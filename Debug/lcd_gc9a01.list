
lcd_gc9a01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bf0  08006c70  08006c70  00007c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  0000c01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a860  0800a860  0000b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a868  0800a868  0000c01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a868  0800a868  0000b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a86c  0800a86c  0000b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800a870  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000001c  0800a88c  0000c01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800a88c  0000c180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a28e  00000000  00000000  0000c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2a  00000000  00000000  000162da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00018108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000739  00000000  00000000  00018a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a0d  00000000  00000000  000191d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2f5  00000000  00000000  0002fbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7a8  00000000  00000000  0003bed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c767b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  000c76c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ca11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006c58 	.word	0x08006c58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08006c58 	.word	0x08006c58

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	@ 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_uldivmod>:
 8000b84:	b953      	cbnz	r3, 8000b9c <__aeabi_uldivmod+0x18>
 8000b86:	b94a      	cbnz	r2, 8000b9c <__aeabi_uldivmod+0x18>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	2800      	cmpeq	r0, #0
 8000b8e:	bf1c      	itt	ne
 8000b90:	f04f 31ff 	movne.w	r1, #4294967295
 8000b94:	f04f 30ff 	movne.w	r0, #4294967295
 8000b98:	f000 b96a 	b.w	8000e70 <__aeabi_idiv0>
 8000b9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba4:	f000 f806 	bl	8000bb4 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4770      	bx	lr

08000bb4 <__udivmoddi4>:
 8000bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb8:	9d08      	ldr	r5, [sp, #32]
 8000bba:	460c      	mov	r4, r1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d14e      	bne.n	8000c5e <__udivmoddi4+0xaa>
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	458c      	cmp	ip, r1
 8000bc4:	4686      	mov	lr, r0
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	d962      	bls.n	8000c92 <__udivmoddi4+0xde>
 8000bcc:	b14a      	cbz	r2, 8000be2 <__udivmoddi4+0x2e>
 8000bce:	f1c2 0320 	rsb	r3, r2, #32
 8000bd2:	4091      	lsls	r1, r2
 8000bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bdc:	4319      	orrs	r1, r3
 8000bde:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be6:	fa1f f68c 	uxth.w	r6, ip
 8000bea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb04 f106 	mul.w	r1, r4, r6
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x64>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0a:	f080 8112 	bcs.w	8000e32 <__udivmoddi4+0x27e>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 810f 	bls.w	8000e32 <__udivmoddi4+0x27e>
 8000c14:	3c02      	subs	r4, #2
 8000c16:	4463      	add	r3, ip
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c22:	fb07 1110 	mls	r1, r7, r0, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb00 f606 	mul.w	r6, r0, r6
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x94>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3a:	f080 80fc 	bcs.w	8000e36 <__udivmoddi4+0x282>
 8000c3e:	429e      	cmp	r6, r3
 8000c40:	f240 80f9 	bls.w	8000e36 <__udivmoddi4+0x282>
 8000c44:	4463      	add	r3, ip
 8000c46:	3802      	subs	r0, #2
 8000c48:	1b9b      	subs	r3, r3, r6
 8000c4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c4e:	2100      	movs	r1, #0
 8000c50:	b11d      	cbz	r5, 8000c5a <__udivmoddi4+0xa6>
 8000c52:	40d3      	lsrs	r3, r2
 8000c54:	2200      	movs	r2, #0
 8000c56:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d905      	bls.n	8000c6e <__udivmoddi4+0xba>
 8000c62:	b10d      	cbz	r5, 8000c68 <__udivmoddi4+0xb4>
 8000c64:	e9c5 0100 	strd	r0, r1, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	e7f5      	b.n	8000c5a <__udivmoddi4+0xa6>
 8000c6e:	fab3 f183 	clz	r1, r3
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d146      	bne.n	8000d04 <__udivmoddi4+0x150>
 8000c76:	42a3      	cmp	r3, r4
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xcc>
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	f0c0 80f0 	bcc.w	8000e60 <__udivmoddi4+0x2ac>
 8000c80:	1a86      	subs	r6, r0, r2
 8000c82:	eb64 0303 	sbc.w	r3, r4, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d0e6      	beq.n	8000c5a <__udivmoddi4+0xa6>
 8000c8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c90:	e7e3      	b.n	8000c5a <__udivmoddi4+0xa6>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x204>
 8000c98:	eba1 040c 	sub.w	r4, r1, ip
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa1f f78c 	uxth.w	r7, ip
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000caa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cae:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb07 f006 	mul.w	r0, r7, r6
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x11c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x11a>
 8000cc8:	4298      	cmp	r0, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2b4>
 8000cce:	4626      	mov	r6, r4
 8000cd0:	1a1c      	subs	r4, r3, r0
 8000cd2:	fa1f f38e 	uxth.w	r3, lr
 8000cd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cda:	fb08 4410 	mls	r4, r8, r0, r4
 8000cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce2:	fb00 f707 	mul.w	r7, r0, r7
 8000ce6:	429f      	cmp	r7, r3
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x148>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x146>
 8000cf4:	429f      	cmp	r7, r3
 8000cf6:	f200 80b0 	bhi.w	8000e5a <__udivmoddi4+0x2a6>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	1bdb      	subs	r3, r3, r7
 8000cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0x9c>
 8000d04:	f1c1 0620 	rsb	r6, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d14:	fa04 f301 	lsl.w	r3, r4, r1
 8000d18:	ea43 030c 	orr.w	r3, r3, ip
 8000d1c:	40f4      	lsrs	r4, r6
 8000d1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d22:	0c38      	lsrs	r0, r7, #16
 8000d24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d28:	fbb4 fef0 	udiv	lr, r4, r0
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fb00 441e 	mls	r4, r0, lr, r4
 8000d34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d38:	fb0e f90c 	mul.w	r9, lr, ip
 8000d3c:	45a1      	cmp	r9, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x1a6>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4a:	f080 8084 	bcs.w	8000e56 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8081 	bls.w	8000e56 <__udivmoddi4+0x2a2>
 8000d54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	eba4 0409 	sub.w	r4, r4, r9
 8000d5e:	fa1f f983 	uxth.w	r9, r3
 8000d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d66:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x1d2>
 8000d76:	193c      	adds	r4, r7, r4
 8000d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d7c:	d267      	bcs.n	8000e4e <__udivmoddi4+0x29a>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d965      	bls.n	8000e4e <__udivmoddi4+0x29a>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	429c      	cmp	r4, r3
 8000d94:	46ce      	mov	lr, r9
 8000d96:	469c      	mov	ip, r3
 8000d98:	d351      	bcc.n	8000e3e <__udivmoddi4+0x28a>
 8000d9a:	d04e      	beq.n	8000e3a <__udivmoddi4+0x286>
 8000d9c:	b155      	cbz	r5, 8000db4 <__udivmoddi4+0x200>
 8000d9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000da2:	eb64 040c 	sbc.w	r4, r4, ip
 8000da6:	fa04 f606 	lsl.w	r6, r4, r6
 8000daa:	40cb      	lsrs	r3, r1
 8000dac:	431e      	orrs	r6, r3
 8000dae:	40cc      	lsrs	r4, r1
 8000db0:	e9c5 6400 	strd	r6, r4, [r5]
 8000db4:	2100      	movs	r1, #0
 8000db6:	e750      	b.n	8000c5a <__udivmoddi4+0xa6>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	430c      	orrs	r4, r1
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3110 	mls	r1, r8, r0, r3
 8000de0:	0c23      	lsrs	r3, r4, #16
 8000de2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de6:	fb00 f107 	mul.w	r1, r0, r7
 8000dea:	4299      	cmp	r1, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x24c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df6:	d22c      	bcs.n	8000e52 <__udivmoddi4+0x29e>
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d92a      	bls.n	8000e52 <__udivmoddi4+0x29e>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e08:	fb08 3311 	mls	r3, r8, r1, r3
 8000e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e10:	fb01 f307 	mul.w	r3, r1, r7
 8000e14:	42a3      	cmp	r3, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x276>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e20:	d213      	bcs.n	8000e4a <__udivmoddi4+0x296>
 8000e22:	42a3      	cmp	r3, r4
 8000e24:	d911      	bls.n	8000e4a <__udivmoddi4+0x296>
 8000e26:	3902      	subs	r1, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	1ae4      	subs	r4, r4, r3
 8000e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e30:	e739      	b.n	8000ca6 <__udivmoddi4+0xf2>
 8000e32:	4604      	mov	r4, r0
 8000e34:	e6f0      	b.n	8000c18 <__udivmoddi4+0x64>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e706      	b.n	8000c48 <__udivmoddi4+0x94>
 8000e3a:	45c8      	cmp	r8, r9
 8000e3c:	d2ae      	bcs.n	8000d9c <__udivmoddi4+0x1e8>
 8000e3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7a8      	b.n	8000d9c <__udivmoddi4+0x1e8>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	e7ed      	b.n	8000e2a <__udivmoddi4+0x276>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	e799      	b.n	8000d86 <__udivmoddi4+0x1d2>
 8000e52:	4630      	mov	r0, r6
 8000e54:	e7d4      	b.n	8000e00 <__udivmoddi4+0x24c>
 8000e56:	46d6      	mov	lr, sl
 8000e58:	e77f      	b.n	8000d5a <__udivmoddi4+0x1a6>
 8000e5a:	4463      	add	r3, ip
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	e74d      	b.n	8000cfc <__udivmoddi4+0x148>
 8000e60:	4606      	mov	r6, r0
 8000e62:	4623      	mov	r3, r4
 8000e64:	4608      	mov	r0, r1
 8000e66:	e70f      	b.n	8000c88 <__udivmoddi4+0xd4>
 8000e68:	3e02      	subs	r6, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	e730      	b.n	8000cd0 <__udivmoddi4+0x11c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <GC9A01_Init>:

//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
//==== данные для инициализации дисплея GC9A01_240X240 ==========
void GC9A01_Init(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af02      	add	r7, sp, #8
	
		// Задержка после подачи питания
		// если при старте не всегда запускаеться дисплей увеличиваем время задержки
		HAL_Delay(100);	
 8000e7a:	2064      	movs	r0, #100	@ 0x64
 8000e7c:	f002 fd14 	bl	80038a8 <HAL_Delay>

		GC9A01_Width = GC9A01_WIDTH;
 8000e80:	4bfb      	ldr	r3, [pc, #1004]	@ (8001270 <GC9A01_Init+0x3fc>)
 8000e82:	22f0      	movs	r2, #240	@ 0xf0
 8000e84:	801a      	strh	r2, [r3, #0]
		GC9A01_Height = GC9A01_HEIGHT;
 8000e86:	4bfb      	ldr	r3, [pc, #1004]	@ (8001274 <GC9A01_Init+0x400>)
 8000e88:	22f0      	movs	r2, #240	@ 0xf0
 8000e8a:	801a      	strh	r2, [r3, #0]
	
		GC9A01_HardReset(); 
 8000e8c:	f000 fa62 	bl	8001354 <GC9A01_HardReset>

    GC9A01_Select();
 8000e90:	f000 fa46 	bl	8001320 <GC9A01_Select>

		GC9A01_SendCmd(GC9A01_InnerReg2Enable);
 8000e94:	20ef      	movs	r0, #239	@ 0xef
 8000e96:	f000 fa75 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendCmd(0xEB);        
 8000e9a:	20eb      	movs	r0, #235	@ 0xeb
 8000e9c:	f000 fa72 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x14);
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f000 faa5 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_InnerReg1Enable);
 8000ea6:	20fe      	movs	r0, #254	@ 0xfe
 8000ea8:	f000 fa6c 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendCmd(GC9A01_InnerReg2Enable);
 8000eac:	20ef      	movs	r0, #239	@ 0xef
 8000eae:	f000 fa69 	bl	8001384 <GC9A01_SendCmd>

		GC9A01_SendCmd(0xEB);        
 8000eb2:	20eb      	movs	r0, #235	@ 0xeb
 8000eb4:	f000 fa66 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x14);       
 8000eb8:	2014      	movs	r0, #20
 8000eba:	f000 fa99 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x84);       
 8000ebe:	2084      	movs	r0, #132	@ 0x84
 8000ec0:	f000 fa60 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x40);
 8000ec4:	2040      	movs	r0, #64	@ 0x40
 8000ec6:	f000 fa93 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x85);        
 8000eca:	2085      	movs	r0, #133	@ 0x85
 8000ecc:	f000 fa5a 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000ed0:	20ff      	movs	r0, #255	@ 0xff
 8000ed2:	f000 fa8d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x86);       
 8000ed6:	2086      	movs	r0, #134	@ 0x86
 8000ed8:	f000 fa54 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000edc:	20ff      	movs	r0, #255	@ 0xff
 8000ede:	f000 fa87 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x87);        
 8000ee2:	2087      	movs	r0, #135	@ 0x87
 8000ee4:	f000 fa4e 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000ee8:	20ff      	movs	r0, #255	@ 0xff
 8000eea:	f000 fa81 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x88);        
 8000eee:	2088      	movs	r0, #136	@ 0x88
 8000ef0:	f000 fa48 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x0A);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fa7b 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x89);        
 8000efa:	2089      	movs	r0, #137	@ 0x89
 8000efc:	f000 fa42 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x21);
 8000f00:	2021      	movs	r0, #33	@ 0x21
 8000f02:	f000 fa75 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8A);        
 8000f06:	208a      	movs	r0, #138	@ 0x8a
 8000f08:	f000 fa3c 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 fa6f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8B);        
 8000f12:	208b      	movs	r0, #139	@ 0x8b
 8000f14:	f000 fa36 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x80);
 8000f18:	2080      	movs	r0, #128	@ 0x80
 8000f1a:	f000 fa69 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8C);        
 8000f1e:	208c      	movs	r0, #140	@ 0x8c
 8000f20:	f000 fa30 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x01);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f000 fa63 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8D);        
 8000f2a:	208d      	movs	r0, #141	@ 0x8d
 8000f2c:	f000 fa2a 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x01);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 fa5d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8E);        
 8000f36:	208e      	movs	r0, #142	@ 0x8e
 8000f38:	f000 fa24 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000f3c:	20ff      	movs	r0, #255	@ 0xff
 8000f3e:	f000 fa57 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x8F);        
 8000f42:	208f      	movs	r0, #143	@ 0x8f
 8000f44:	f000 fa1e 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0xFF);
 8000f48:	20ff      	movs	r0, #255	@ 0xff
 8000f4a:	f000 fa51 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_DisplayFunctionControl);
 8000f4e:	20b6      	movs	r0, #182	@ 0xb6
 8000f50:	f000 fa18 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fa4b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x20); // Scan direction S360 -> S1
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	f000 fa48 	bl	80013f0 <GC9A01_SendData>

		// def rotation
		GC9A01_SendCmd(GC9A01_MADCTL);
 8000f60:	2036      	movs	r0, #54	@ 0x36
 8000f62:	f000 fa0f 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(GC9A01_DEF_ROTATION);
 8000f66:	2008      	movs	r0, #8
 8000f68:	f000 fa42 	bl	80013f0 <GC9A01_SendData>
		
		// ColorMode
		GC9A01_SendCmd(GC9A01_COLMOD);
 8000f6c:	203a      	movs	r0, #58	@ 0x3a
 8000f6e:	f000 fa09 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(ColorMode_MCU_16bit & 0x77);
 8000f72:	2005      	movs	r0, #5
 8000f74:	f000 fa3c 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x90);        
 8000f78:	2090      	movs	r0, #144	@ 0x90
 8000f7a:	f000 fa03 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x08);
 8000f7e:	2008      	movs	r0, #8
 8000f80:	f000 fa36 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8000f84:	2008      	movs	r0, #8
 8000f86:	f000 fa33 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8000f8a:	2008      	movs	r0, #8
 8000f8c:	f000 fa30 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8000f90:	2008      	movs	r0, #8
 8000f92:	f000 fa2d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xBD);        
 8000f96:	20bd      	movs	r0, #189	@ 0xbd
 8000f98:	f000 f9f4 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x06);
 8000f9c:	2006      	movs	r0, #6
 8000f9e:	f000 fa27 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xBC);        
 8000fa2:	20bc      	movs	r0, #188	@ 0xbc
 8000fa4:	f000 f9ee 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fa21 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xFF);        
 8000fae:	20ff      	movs	r0, #255	@ 0xff
 8000fb0:	f000 f9e8 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x60);
 8000fb4:	2060      	movs	r0, #96	@ 0x60
 8000fb6:	f000 fa1b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x01);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 fa18 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x04);
 8000fc0:	2004      	movs	r0, #4
 8000fc2:	f000 fa15 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_PWCTR2);  // Power control 2
 8000fc6:	20c3      	movs	r0, #195	@ 0xc3
 8000fc8:	f000 f9dc 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x13);       // 5.18 V
 8000fcc:	2013      	movs	r0, #19
 8000fce:	f000 fa0f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendCmd(GC9A01_PWCTR3);  // Power control 3
 8000fd2:	20c4      	movs	r0, #196	@ 0xc4
 8000fd4:	f000 f9d6 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x13);       // VREG2A = -3.82 V, VREG2B = 0.68 V
 8000fd8:	2013      	movs	r0, #19
 8000fda:	f000 fa09 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendCmd(GC9A01_PWCTR4);  // Power control 4
 8000fde:	20c9      	movs	r0, #201	@ 0xc9
 8000fe0:	f000 f9d0 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x22);       // VREG2A = 5.88 V, VREG2B = -2.88 V
 8000fe4:	2022      	movs	r0, #34	@ 0x22
 8000fe6:	f000 fa03 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xBE);        
 8000fea:	20be      	movs	r0, #190	@ 0xbe
 8000fec:	f000 f9ca 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x11);
 8000ff0:	2011      	movs	r0, #17
 8000ff2:	f000 f9fd 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xE1);        
 8000ff6:	20e1      	movs	r0, #225	@ 0xe1
 8000ff8:	f000 f9c4 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x10);
 8000ffc:	2010      	movs	r0, #16
 8000ffe:	f000 f9f7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0E);
 8001002:	200e      	movs	r0, #14
 8001004:	f000 f9f4 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xDF);        
 8001008:	20df      	movs	r0, #223	@ 0xdf
 800100a:	f000 f9bb 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x21);
 800100e:	2021      	movs	r0, #33	@ 0x21
 8001010:	f000 f9ee 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0c);
 8001014:	200c      	movs	r0, #12
 8001016:	f000 f9eb 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x02);
 800101a:	2002      	movs	r0, #2
 800101c:	f000 f9e8 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA1);
 8001020:	20f0      	movs	r0, #240	@ 0xf0
 8001022:	f000 f9af 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x45);
 8001026:	2045      	movs	r0, #69	@ 0x45
 8001028:	f000 f9e2 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x09);
 800102c:	2009      	movs	r0, #9
 800102e:	f000 f9df 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001032:	2008      	movs	r0, #8
 8001034:	f000 f9dc 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001038:	2008      	movs	r0, #8
 800103a:	f000 f9d9 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x26);
 800103e:	2026      	movs	r0, #38	@ 0x26
 8001040:	f000 f9d6 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x2A);
 8001044:	202a      	movs	r0, #42	@ 0x2a
 8001046:	f000 f9d3 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA2);
 800104a:	20f1      	movs	r0, #241	@ 0xf1
 800104c:	f000 f99a 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x43);
 8001050:	2043      	movs	r0, #67	@ 0x43
 8001052:	f000 f9cd 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 8001056:	2070      	movs	r0, #112	@ 0x70
 8001058:	f000 f9ca 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x72);
 800105c:	2072      	movs	r0, #114	@ 0x72
 800105e:	f000 f9c7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x36);
 8001062:	2036      	movs	r0, #54	@ 0x36
 8001064:	f000 f9c4 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x37);
 8001068:	2037      	movs	r0, #55	@ 0x37
 800106a:	f000 f9c1 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x6F);
 800106e:	206f      	movs	r0, #111	@ 0x6f
 8001070:	f000 f9be 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA3);
 8001074:	20f2      	movs	r0, #242	@ 0xf2
 8001076:	f000 f985 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x45);
 800107a:	2045      	movs	r0, #69	@ 0x45
 800107c:	f000 f9b8 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x09);
 8001080:	2009      	movs	r0, #9
 8001082:	f000 f9b5 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001086:	2008      	movs	r0, #8
 8001088:	f000 f9b2 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 800108c:	2008      	movs	r0, #8
 800108e:	f000 f9af 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x26);
 8001092:	2026      	movs	r0, #38	@ 0x26
 8001094:	f000 f9ac 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x2A);
 8001098:	202a      	movs	r0, #42	@ 0x2a
 800109a:	f000 f9a9 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_GAMMA4);
 800109e:	20f3      	movs	r0, #243	@ 0xf3
 80010a0:	f000 f970 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x43);
 80010a4:	2043      	movs	r0, #67	@ 0x43
 80010a6:	f000 f9a3 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80010aa:	2070      	movs	r0, #112	@ 0x70
 80010ac:	f000 f9a0 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x72);
 80010b0:	2072      	movs	r0, #114	@ 0x72
 80010b2:	f000 f99d 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x36);
 80010b6:	2036      	movs	r0, #54	@ 0x36
 80010b8:	f000 f99a 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x37);
 80010bc:	2037      	movs	r0, #55	@ 0x37
 80010be:	f000 f997 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x6F);
 80010c2:	206f      	movs	r0, #111	@ 0x6f
 80010c4:	f000 f994 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xED);        
 80010c8:	20ed      	movs	r0, #237	@ 0xed
 80010ca:	f000 f95b 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x1B);
 80010ce:	201b      	movs	r0, #27
 80010d0:	f000 f98e 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0B);
 80010d4:	200b      	movs	r0, #11
 80010d6:	f000 f98b 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xAE);        
 80010da:	20ae      	movs	r0, #174	@ 0xae
 80010dc:	f000 f952 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x77);
 80010e0:	2077      	movs	r0, #119	@ 0x77
 80010e2:	f000 f985 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0xCD);        
 80010e6:	20cd      	movs	r0, #205	@ 0xcd
 80010e8:	f000 f94c 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x63);
 80010ec:	2063      	movs	r0, #99	@ 0x63
 80010ee:	f000 f97f 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x70);        
 80010f2:	2070      	movs	r0, #112	@ 0x70
 80010f4:	f000 f946 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x07);
 80010f8:	2007      	movs	r0, #7
 80010fa:	f000 f979 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 80010fe:	2007      	movs	r0, #7
 8001100:	f000 f976 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x04);
 8001104:	2004      	movs	r0, #4
 8001106:	f000 f973 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0E);
 800110a:	200e      	movs	r0, #14
 800110c:	f000 f970 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0F);
 8001110:	200f      	movs	r0, #15
 8001112:	f000 f96d 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x09);
 8001116:	2009      	movs	r0, #9
 8001118:	f000 f96a 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 800111c:	2007      	movs	r0, #7
 800111e:	f000 f967 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x08);
 8001122:	2008      	movs	r0, #8
 8001124:	f000 f964 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x03);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f961 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_FRAMERATE);       // Frame rate
 800112e:	20e8      	movs	r0, #232	@ 0xe8
 8001130:	f000 f928 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x34);                  // 4 dot inversion
 8001134:	2034      	movs	r0, #52	@ 0x34
 8001136:	f000 f95b 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x62);       
 800113a:	2062      	movs	r0, #98	@ 0x62
 800113c:	f000 f922 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x18);
 8001140:	2018      	movs	r0, #24
 8001142:	f000 f955 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0D);
 8001146:	200d      	movs	r0, #13
 8001148:	f000 f952 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 800114c:	2071      	movs	r0, #113	@ 0x71
 800114e:	f000 f94f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xED);
 8001152:	20ed      	movs	r0, #237	@ 0xed
 8001154:	f000 f94c 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 8001158:	2070      	movs	r0, #112	@ 0x70
 800115a:	f000 f949 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 800115e:	2070      	movs	r0, #112	@ 0x70
 8001160:	f000 f946 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x18);
 8001164:	2018      	movs	r0, #24
 8001166:	f000 f943 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x0F);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f940 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 8001170:	2071      	movs	r0, #113	@ 0x71
 8001172:	f000 f93d 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xEF);
 8001176:	20ef      	movs	r0, #239	@ 0xef
 8001178:	f000 f93a 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 800117c:	2070      	movs	r0, #112	@ 0x70
 800117e:	f000 f937 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 8001182:	2070      	movs	r0, #112	@ 0x70
 8001184:	f000 f934 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x63);        
 8001188:	2063      	movs	r0, #99	@ 0x63
 800118a:	f000 f8fb 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x18);
 800118e:	2018      	movs	r0, #24
 8001190:	f000 f92e 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x11);
 8001194:	2011      	movs	r0, #17
 8001196:	f000 f92b 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 800119a:	2071      	movs	r0, #113	@ 0x71
 800119c:	f000 f928 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF1);
 80011a0:	20f1      	movs	r0, #241	@ 0xf1
 80011a2:	f000 f925 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011a6:	2070      	movs	r0, #112	@ 0x70
 80011a8:	f000 f922 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011ac:	2070      	movs	r0, #112	@ 0x70
 80011ae:	f000 f91f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x18);
 80011b2:	2018      	movs	r0, #24
 80011b4:	f000 f91c 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x13);
 80011b8:	2013      	movs	r0, #19
 80011ba:	f000 f919 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x71);
 80011be:	2071      	movs	r0, #113	@ 0x71
 80011c0:	f000 f916 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF3);
 80011c4:	20f3      	movs	r0, #243	@ 0xf3
 80011c6:	f000 f913 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011ca:	2070      	movs	r0, #112	@ 0x70
 80011cc:	f000 f910 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x70);
 80011d0:	2070      	movs	r0, #112	@ 0x70
 80011d2:	f000 f90d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x64);        
 80011d6:	2064      	movs	r0, #100	@ 0x64
 80011d8:	f000 f8d4 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x28);
 80011dc:	2028      	movs	r0, #40	@ 0x28
 80011de:	f000 f907 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x29);
 80011e2:	2029      	movs	r0, #41	@ 0x29
 80011e4:	f000 f904 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF1);
 80011e8:	20f1      	movs	r0, #241	@ 0xf1
 80011ea:	f000 f901 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x01);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 f8fe 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xF1);
 80011f4:	20f1      	movs	r0, #241	@ 0xf1
 80011f6:	f000 f8fb 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f8f8 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 8001200:	2007      	movs	r0, #7
 8001202:	f000 f8f5 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x66);        
 8001206:	2066      	movs	r0, #102	@ 0x66
 8001208:	f000 f8bc 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x3C);
 800120c:	203c      	movs	r0, #60	@ 0x3c
 800120e:	f000 f8ef 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f8ec 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0xCD);
 8001218:	20cd      	movs	r0, #205	@ 0xcd
 800121a:	f000 f8e9 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x67);
 800121e:	2067      	movs	r0, #103	@ 0x67
 8001220:	f000 f8e6 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x45);
 8001224:	2045      	movs	r0, #69	@ 0x45
 8001226:	f000 f8e3 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x45);
 800122a:	2045      	movs	r0, #69	@ 0x45
 800122c:	f000 f8e0 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x10);
 8001230:	2010      	movs	r0, #16
 8001232:	f000 f8dd 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f8da 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f8d7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001242:	2000      	movs	r0, #0
 8001244:	f000 f8d4 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x67);       
 8001248:	2067      	movs	r0, #103	@ 0x67
 800124a:	f000 f89b 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x00);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f8ce 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x3C);
 8001254:	203c      	movs	r0, #60	@ 0x3c
 8001256:	f000 f8cb 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f8c8 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f8c5 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f8c2 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x01);
 800126c:	2001      	movs	r0, #1
 800126e:	e003      	b.n	8001278 <GC9A01_Init+0x404>
 8001270:	2000003c 	.word	0x2000003c
 8001274:	2000003e 	.word	0x2000003e
 8001278:	f000 f8ba 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x54);
 800127c:	2054      	movs	r0, #84	@ 0x54
 800127e:	f000 f8b7 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x10);
 8001282:	2010      	movs	r0, #16
 8001284:	f000 f8b4 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x32);
 8001288:	2032      	movs	r0, #50	@ 0x32
 800128a:	f000 f8b1 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x98);
 800128e:	2098      	movs	r0, #152	@ 0x98
 8001290:	f000 f8ae 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x74);        
 8001294:	2074      	movs	r0, #116	@ 0x74
 8001296:	f000 f875 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x10);
 800129a:	2010      	movs	r0, #16
 800129c:	f000 f8a8 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x85);
 80012a0:	2085      	movs	r0, #133	@ 0x85
 80012a2:	f000 f8a5 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x80);
 80012a6:	2080      	movs	r0, #128	@ 0x80
 80012a8:	f000 f8a2 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 f89f 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f89c 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x4E);
 80012b8:	204e      	movs	r0, #78	@ 0x4e
 80012ba:	f000 f899 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x00);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f896 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(0x98);       
 80012c4:	2098      	movs	r0, #152	@ 0x98
 80012c6:	f000 f85d 	bl	8001384 <GC9A01_SendCmd>
		GC9A01_SendData(0x3e);
 80012ca:	203e      	movs	r0, #62	@ 0x3e
 80012cc:	f000 f890 	bl	80013f0 <GC9A01_SendData>
		GC9A01_SendData(0x07);
 80012d0:	2007      	movs	r0, #7
 80012d2:	f000 f88d 	bl	80013f0 <GC9A01_SendData>

		GC9A01_SendCmd(GC9A01_TEON); 		// Tearing effect line on
 80012d6:	2035      	movs	r0, #53	@ 0x35
 80012d8:	f000 f854 	bl	8001384 <GC9A01_SendCmd>

		// Inversion Mode 1;
		GC9A01_SendCmd(GC9A01_INVON);
 80012dc:	2021      	movs	r0, #33	@ 0x21
 80012de:	f000 f851 	bl	8001384 <GC9A01_SendCmd>
		
		// Sleep Mode Exit
		GC9A01_SendCmd(GC9A01_SLPOUT);
 80012e2:	2011      	movs	r0, #17
 80012e4:	f000 f84e 	bl	8001384 <GC9A01_SendCmd>

		HAL_Delay(120);
 80012e8:	2078      	movs	r0, #120	@ 0x78
 80012ea:	f002 fadd 	bl	80038a8 <HAL_Delay>
		
		// Display Power on
		GC9A01_SendCmd(GC9A01_DISPON);
 80012ee:	2029      	movs	r0, #41	@ 0x29
 80012f0:	f000 f848 	bl	8001384 <GC9A01_SendCmd>
		
		GC9A01_Unselect();
 80012f4:	f000 f822 	bl	800133c <GC9A01_Unselect>
		
		GC9A01_FillRect(0, 0, GC9A01_Width, GC9A01_Height, GC9A01_BLACK);
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <GC9A01_Init+0x4a4>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <GC9A01_Init+0x4a8>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b21b      	sxth	r3, r3
 8001304:	2100      	movs	r1, #0
 8001306:	9100      	str	r1, [sp, #0]
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f8ec 	bl	80014e8 <GC9A01_FillRect>
		
#if FRAME_BUFFER	// если включен буфер кадра
		GC9A01_Update();
#endif
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000003c 	.word	0x2000003c
 800131c:	2000003e 	.word	0x2000003e

08001320 <GC9A01_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void GC9A01_Select(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
			#endif
			//-----------------------------------------------------
			
			//-- если захотим переделать под CMSIS  ---------------
			#ifdef GC9A01_SPI_CMSIS
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <GC9A01_Select+0x18>)
 8001326:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800132a:	619a      	str	r2, [r3, #24]
			#endif
			//-----------------------------------------------------
	#endif
	
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40020400 	.word	0x40020400

0800133c <GC9A01_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void GC9A01_Unselect(void) {
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
			#endif
			//-----------------------------------------------------
			
			//-- если захотим переделать под CMSIS  ---------------
			#ifdef GC9A01_SPI_CMSIS
					 CS_GPIO_Port->BSRR = CS_Pin;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <GC9A01_Unselect+0x14>)
 8001342:	2240      	movs	r2, #64	@ 0x40
 8001344:	619a      	str	r2, [r3, #24]
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40020400 	.word	0x40020400

08001354 <GC9A01_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void GC9A01_HardReset(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135e:	4808      	ldr	r0, [pc, #32]	@ (8001380 <GC9A01_HardReset+0x2c>)
 8001360:	f003 f8cc 	bl	80044fc <HAL_GPIO_WritePin>
	HAL_Delay(50);	
 8001364:	2032      	movs	r0, #50	@ 0x32
 8001366:	f002 fa9f 	bl	80038a8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <GC9A01_HardReset+0x2c>)
 8001372:	f003 f8c3 	bl	80044fc <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001376:	2096      	movs	r0, #150	@ 0x96
 8001378:	f002 fa96 	bl	80038a8 <HAL_Delay>
	
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40020000 	.word	0x40020000

08001384 <GC9A01_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline static void GC9A01_SendCmd(uint8_t Cmd){	
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под CMSIS  ---------------------------------------------
	#ifdef GC9A01_SPI_CMSIS
		
		// pin DC LOW
		DC_GPIO_Port->BSRR = ( DC_Pin << 16 );
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <GC9A01_SendCmd+0x60>)
 8001390:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001394:	619a      	str	r2, [r3, #24]
		//======  FOR F-SERIES ===========================================================
			
			// Disable SPI	
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			if((GC9A01_SPI_CMSIS->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE){
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <GC9A01_SendCmd+0x64>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800139e:	2b40      	cmp	r3, #64	@ 0x40
 80013a0:	d005      	beq.n	80013ae <GC9A01_SendCmd+0x2a>
				// If disabled, I enable it
				SET_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <GC9A01_SendCmd+0x64>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <GC9A01_SendCmd+0x64>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ac:	6013      	str	r3, [r2, #0]
			}
			
			// Ждем, пока не освободится буфер передатчика
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & SPI_SR_TXE) == RESET ){};	
 80013ae:	bf00      	nop
 80013b0:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <GC9A01_SendCmd+0x64>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f9      	beq.n	80013b0 <GC9A01_SendCmd+0x2c>
			
			// заполняем буфер передатчика 1 байт информации--------------
			*((__IO uint8_t *)&GC9A01_SPI_CMSIS->DR) = Cmd;
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <GC9A01_SendCmd+0x68>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	7013      	strb	r3, [r2, #0]
			
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE ){};
 80013c2:	bf00      	nop
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <GC9A01_SendCmd+0x64>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d1f9      	bne.n	80013c4 <GC9A01_SendCmd+0x40>
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);
			
*/		//================================================================================
		
		// pin DC HIGH
		DC_GPIO_Port->BSRR = DC_Pin;
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <GC9A01_SendCmd+0x60>)
 80013d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d6:	619a      	str	r2, [r3, #24]
	
	#endif
	//-----------------------------------------------------------------------------------

}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40013000 	.word	0x40013000
 80013ec:	4001300c 	.word	0x4001300c

080013f0 <GC9A01_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline static void GC9A01_SendData(uint8_t Data ){
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
		//======  FOR F-SERIES ===========================================================
			
			// Disable SPI	
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			if((GC9A01_SPI_CMSIS->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE){
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <GC9A01_SendData+0x54>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001402:	2b40      	cmp	r3, #64	@ 0x40
 8001404:	d005      	beq.n	8001412 <GC9A01_SendData+0x22>
				// If disabled, I enable it
				SET_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <GC9A01_SendData+0x54>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0e      	ldr	r2, [pc, #56]	@ (8001444 <GC9A01_SendData+0x54>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001410:	6013      	str	r3, [r2, #0]
			}

			// Ждем, пока не освободится буфер передатчика
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & SPI_SR_TXE) == RESET ){};
 8001412:	bf00      	nop
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <GC9A01_SendData+0x54>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f9      	beq.n	8001414 <GC9A01_SendData+0x24>
		
			// передаем 1 байт информации--------------
			*((__IO uint8_t *)&GC9A01_SPI_CMSIS->DR) = Data;
 8001420:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <GC9A01_SendData+0x58>)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	7013      	strb	r3, [r2, #0]

			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE ){};
 8001426:	bf00      	nop
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <GC9A01_SendData+0x54>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 8001430:	2b02      	cmp	r3, #2
 8001432:	d1f9      	bne.n	8001428 <GC9A01_SendData+0x38>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40013000 	.word	0x40013000
 8001448:	4001300c 	.word	0x4001300c

0800144c <GC9A01_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline static void GC9A01_SendDataMASS(uint8_t* buff, size_t buff_size){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
		//======  FOR F-SERIES ===========================================================
			
			// Disable SPI	
			//CLEAR_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			if((GC9A01_SPI_CMSIS->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE){
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145e:	2b40      	cmp	r3, #64	@ 0x40
 8001460:	d016      	beq.n	8001490 <GC9A01_SendDataMASS+0x44>
				// If disabled, I enable it
				SET_BIT(GC9A01_SPI_CMSIS->CR1, SPI_CR1_SPE);	// GC9A01_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800146c:	6013      	str	r3, [r2, #0]
			}
			
			while( buff_size ){
 800146e:	e00f      	b.n	8001490 <GC9A01_SendDataMASS+0x44>
				
			// Ждем, пока не освободится буфер передатчика
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & SPI_SR_TXE) == RESET ){};
 8001470:	bf00      	nop
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <GC9A01_SendDataMASS+0x68>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f9      	beq.n	8001472 <GC9A01_SendDataMASS+0x26>
					
				// передаем 1 байт информации--------------
				*((__IO uint8_t *)&GC9A01_SPI_CMSIS->DR) = *buff++;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <GC9A01_SendDataMASS+0x6c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	7013      	strb	r3, [r2, #0]

				buff_size--;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	603b      	str	r3, [r7, #0]
			while( buff_size ){
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ec      	bne.n	8001470 <GC9A01_SendDataMASS+0x24>
			}
			
			// TXE(Transmit buffer empty) – устанавливается когда буфер передачи(регистр SPI_DR) пуст, очищается при загрузке данных
			while( (GC9A01_SPI_CMSIS->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE ){};
 8001496:	bf00      	nop
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <GC9A01_SendDataMASS+0x68>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d1f9      	bne.n	8001498 <GC9A01_SendDataMASS+0x4c>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40013000 	.word	0x40013000
 80014b8:	4001300c 	.word	0x4001300c

080014bc <GC9A01_Clear>:


//==============================================================================
// Процедура очистки экрана - закрашивает экран цветом черный
//==============================================================================
void GC9A01_Clear(void){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af02      	add	r7, sp, #8
	
  GC9A01_FillRect(0, 0,  GC9A01_Width, GC9A01_Height, 0);
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <GC9A01_Clear+0x24>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <GC9A01_Clear+0x28>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	9100      	str	r1, [sp, #0]
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 f807 	bl	80014e8 <GC9A01_FillRect>
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000003c 	.word	0x2000003c
 80014e4:	2000003e 	.word	0x2000003e

080014e8 <GC9A01_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void GC9A01_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	4603      	mov	r3, r0
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
 8001502:	4613      	mov	r3, r2
 8001504:	803b      	strh	r3, [r7, #0]
	
  if ((x >= GC9A01_Width) || (y >= GC9A01_Height)){
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	4a24      	ldr	r2, [pc, #144]	@ (800159c <GC9A01_FillRect+0xb4>)
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	4293      	cmp	r3, r2
 8001510:	da40      	bge.n	8001594 <GC9A01_FillRect+0xac>
 8001512:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <GC9A01_FillRect+0xb8>)
 8001518:	8812      	ldrh	r2, [r2, #0]
 800151a:	4293      	cmp	r3, r2
 800151c:	da3a      	bge.n	8001594 <GC9A01_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > GC9A01_Width){	  
 800151e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001522:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001526:	4413      	add	r3, r2
 8001528:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <GC9A01_FillRect+0xb4>)
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	4293      	cmp	r3, r2
 800152e:	dd05      	ble.n	800153c <GC9A01_FillRect+0x54>
	  w = GC9A01_Width - x;
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <GC9A01_FillRect+0xb4>)
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > GC9A01_Height){
 800153c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001540:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001544:	4413      	add	r3, r2
 8001546:	4a16      	ldr	r2, [pc, #88]	@ (80015a0 <GC9A01_FillRect+0xb8>)
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	4293      	cmp	r3, r2
 800154c:	dd05      	ble.n	800155a <GC9A01_FillRect+0x72>
	  h = GC9A01_Height - y;
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <GC9A01_FillRect+0xb8>)
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	803b      	strh	r3, [r7, #0]
		for( uint16_t j = 0; j < w; j++ ){
			buff_frame[( y + i ) * GC9A01_Width + x + j] = ((color & 0xFF)<<8) | (color >> 8 );
		}
	}
#else	//если попиксельный вывод
	GC9A01_SetWindow(x, y, x + w - 1, y + h - 1);
 800155a:	88f8      	ldrh	r0, [r7, #6]
 800155c:	88b9      	ldrh	r1, [r7, #4]
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29c      	uxth	r4, r3
 800156a:	88ba      	ldrh	r2, [r7, #4]
 800156c:	883b      	ldrh	r3, [r7, #0]
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	3b01      	subs	r3, #1
 8001574:	b29b      	uxth	r3, r3
 8001576:	4622      	mov	r2, r4
 8001578:	f000 f814 	bl	80015a4 <GC9A01_SetWindow>
 	
  GC9A01_RamWrite(&color, (h * w)); 
 800157c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001580:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4619      	mov	r1, r3
 800158a:	f107 0018 	add.w	r0, r7, #24
 800158e:	f000 f82f 	bl	80015f0 <GC9A01_RamWrite>
 8001592:	e000      	b.n	8001596 <GC9A01_FillRect+0xae>
	  return;
 8001594:	bf00      	nop
#endif
	

}
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	2000003c 	.word	0x2000003c
 80015a0:	2000003e 	.word	0x2000003e

080015a4 <GC9A01_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
static void GC9A01_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
 80015be:	4613      	mov	r3, r2
 80015c0:	803b      	strh	r3, [r7, #0]
	
	GC9A01_Select();
 80015c2:	f7ff fead 	bl	8001320 <GC9A01_Select>
	
	GC9A01_ColumnSet(x0, x1);
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f833 	bl	8001638 <GC9A01_ColumnSet>
	GC9A01_RowSet(y0, y1);
 80015d2:	883a      	ldrh	r2, [r7, #0]
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f86f 	bl	80016bc <GC9A01_RowSet>
	
	// write to RAM
	GC9A01_SendCmd(GC9A01_RAMWR);
 80015de:	202c      	movs	r0, #44	@ 0x2c
 80015e0:	f7ff fed0 	bl	8001384 <GC9A01_SendCmd>
	
	GC9A01_Unselect();
 80015e4:	f7ff feaa 	bl	800133c <GC9A01_Unselect>
	
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <GC9A01_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
static void GC9A01_RamWrite(uint16_t *pBuff, uint32_t Len){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	
  GC9A01_Select();
 80015fa:	f7ff fe91 	bl	8001320 <GC9A01_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 8001612:	e005      	b.n	8001620 <GC9A01_RamWrite+0x30>
	  GC9A01_SendDataMASS( (uint8_t*)buff, 2);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff16 	bl	800144c <GC9A01_SendDataMASS>
  while (Len--){
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f4      	bne.n	8001614 <GC9A01_RamWrite+0x24>
  } 
	
  GC9A01_Unselect();
 800162a:	f7ff fe87 	bl	800133c <GC9A01_Unselect>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <GC9A01_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
static void GC9A01_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	460a      	mov	r2, r1
 8001642:	80fb      	strh	r3, [r7, #6]
 8001644:	4613      	mov	r3, r2
 8001646:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d82a      	bhi.n	80016a6 <GC9A01_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > GC9A01_Width){
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <GC9A01_ColumnSet+0x7c>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d827      	bhi.n	80016aa <GC9A01_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += GC9A01_X_Start;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <GC9A01_ColumnSet+0x80>)
 800165c:	881a      	ldrh	r2, [r3, #0]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	4413      	add	r3, r2
 8001662:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += GC9A01_X_Start;
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <GC9A01_ColumnSet+0x80>)
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	80bb      	strh	r3, [r7, #4]
  
  GC9A01_SendCmd(GC9A01_CASET);
 800166e:	202a      	movs	r0, #42	@ 0x2a
 8001670:	f7ff fe88 	bl	8001384 <GC9A01_SendCmd>
  GC9A01_SendData(ColumnStart >> 8);  
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff feb7 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(ColumnStart & 0xFF);  
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff feb2 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(ColumnEnd >> 8);  
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff feab 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(ColumnEnd & 0xFF);  
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fea6 	bl	80013f0 <GC9A01_SendData>
 80016a4:	e002      	b.n	80016ac <GC9A01_ColumnSet+0x74>
    return;
 80016a6:	bf00      	nop
 80016a8:	e000      	b.n	80016ac <GC9A01_ColumnSet+0x74>
    return;
 80016aa:	bf00      	nop
  
}
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000003c 	.word	0x2000003c
 80016b8:	20000038 	.word	0x20000038

080016bc <GC9A01_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
static void GC9A01_RowSet(uint16_t RowStart, uint16_t RowEnd){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	80fb      	strh	r3, [r7, #6]
 80016c8:	4613      	mov	r3, r2
 80016ca:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d82a      	bhi.n	800172a <GC9A01_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > GC9A01_Height){
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <GC9A01_RowSet+0x7c>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	88ba      	ldrh	r2, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d827      	bhi.n	800172e <GC9A01_RowSet+0x72>
    return;
  }
  
  RowStart += GC9A01_Y_Start;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <GC9A01_RowSet+0x80>)
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	4413      	add	r3, r2
 80016e6:	80fb      	strh	r3, [r7, #6]
  RowEnd += GC9A01_Y_Start;
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <GC9A01_RowSet+0x80>)
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	80bb      	strh	r3, [r7, #4]
 
  GC9A01_SendCmd(GC9A01_RASET);
 80016f2:	202b      	movs	r0, #43	@ 0x2b
 80016f4:	f7ff fe46 	bl	8001384 <GC9A01_SendCmd>
  GC9A01_SendData(RowStart >> 8);  
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe75 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(RowStart & 0xFF);  
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fe70 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(RowEnd >> 8);  
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	b29b      	uxth	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe69 	bl	80013f0 <GC9A01_SendData>
  GC9A01_SendData(RowEnd & 0xFF);  
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe64 	bl	80013f0 <GC9A01_SendData>
 8001728:	e002      	b.n	8001730 <GC9A01_RowSet+0x74>
    return;
 800172a:	bf00      	nop
 800172c:	e000      	b.n	8001730 <GC9A01_RowSet+0x74>
    return;
 800172e:	bf00      	nop

}
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000003e 	.word	0x2000003e
 800173c:	2000003a 	.word	0x2000003a

08001740 <GC9A01_DrawRectangle>:


//==============================================================================
// Процедура рисования прямоугольника ( пустотелый )
//==============================================================================
void GC9A01_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af02      	add	r7, sp, #8
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4623      	mov	r3, r4
 8001750:	80fb      	strh	r3, [r7, #6]
 8001752:	4603      	mov	r3, r0
 8001754:	80bb      	strh	r3, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]
 800175a:	4613      	mov	r3, r2
 800175c:	803b      	strh	r3, [r7, #0]
	
  GC9A01_DrawLine(x1, y1, x1, y2, color);
 800175e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001766:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800176a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800176e:	8b3b      	ldrh	r3, [r7, #24]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4623      	mov	r3, r4
 8001774:	f000 f90b 	bl	800198e <GC9A01_DrawLine>
  GC9A01_DrawLine(x2, y1, x2, y2, color);
 8001778:	f9b7 4000 	ldrsh.w	r4, [r7]
 800177c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001780:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001784:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001788:	8b3b      	ldrh	r3, [r7, #24]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4623      	mov	r3, r4
 800178e:	f000 f8fe 	bl	800198e <GC9A01_DrawLine>
  GC9A01_DrawLine(x1, y1, x2, y1, color);
 8001792:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001796:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800179a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800179e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4623      	mov	r3, r4
 80017a8:	f000 f8f1 	bl	800198e <GC9A01_DrawLine>
  GC9A01_DrawLine(x1, y2, x2, y2, color);
 80017ac:	f9b7 4000 	ldrsh.w	r4, [r7]
 80017b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017b4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80017b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017bc:	8b3b      	ldrh	r3, [r7, #24]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	4623      	mov	r3, r4
 80017c2:	f000 f8e4 	bl	800198e <GC9A01_DrawLine>
	
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}

080017ce <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
static void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	
  int16_t TempValue = *pValue1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	89fa      	ldrh	r2, [r7, #14]
 80017ec:	801a      	strh	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <GC9A01_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void GC9A01_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 80017fa:	b590      	push	{r4, r7, lr}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af02      	add	r7, sp, #8
 8001800:	4604      	mov	r4, r0
 8001802:	4608      	mov	r0, r1
 8001804:	4611      	mov	r1, r2
 8001806:	461a      	mov	r2, r3
 8001808:	4623      	mov	r3, r4
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	4603      	mov	r3, r0
 800180e:	80bb      	strh	r3, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	803b      	strh	r3, [r7, #0]
	
  if (x1 > x2){
 8001818:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800181c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001820:	429a      	cmp	r2, r3
 8001822:	dd05      	ble.n	8001830 <GC9A01_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 8001824:	1cba      	adds	r2, r7, #2
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffcf 	bl	80017ce <SwapInt16Values>
  }
  
  if (y1 > y2){
 8001830:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001834:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001838:	429a      	cmp	r2, r3
 800183a:	dd05      	ble.n	8001848 <GC9A01_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 800183c:	463a      	mov	r2, r7
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffc3 	bl	80017ce <SwapInt16Values>
  }
  
  GC9A01_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 8001848:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800184c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001854:	b29a      	uxth	r2, r3
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	b29b      	uxth	r3, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21c      	sxth	r4, r3
 8001862:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001866:	b29a      	uxth	r2, r3
 8001868:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800186c:	b29b      	uxth	r3, r3
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	b21a      	sxth	r2, r3
 8001874:	8b3b      	ldrh	r3, [r7, #24]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	4622      	mov	r2, r4
 800187c:	f7ff fe34 	bl	80014e8 <GC9A01_FillRect>
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}

08001888 <GC9A01_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
static void GC9A01_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	4604      	mov	r4, r0
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	4603      	mov	r3, r0
 800189c:	80bb      	strh	r3, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 80018a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bfb8      	it	lt
 80018b4:	425b      	neglt	r3, r3
 80018b6:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80018b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80018bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bfb8      	it	lt
 80018c6:	425b      	neglt	r3, r3
 80018c8:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80018ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	da01      	bge.n	80018da <GC9A01_DrawLine_Slow+0x52>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e001      	b.n	80018de <GC9A01_DrawLine_Slow+0x56>
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80018e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	da01      	bge.n	80018f0 <GC9A01_DrawLine_Slow+0x68>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e001      	b.n	80018f4 <GC9A01_DrawLine_Slow+0x6c>
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 80018f6:	8aba      	ldrh	r2, [r7, #20]
 80018f8:	8a7b      	ldrh	r3, [r7, #18]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	82fb      	strh	r3, [r7, #22]

  GC9A01_DrawPixel(x2, y2, color);
 8001900:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001902:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001906:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f8bc 	bl	8001a88 <GC9A01_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 8001910:	e02c      	b.n	800196c <GC9A01_DrawLine_Slow+0xe4>
	  
    GC9A01_DrawPixel(x1, y1, color);
 8001912:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001914:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f8b3 	bl	8001a88 <GC9A01_DrawPixel>
    const int16_t error2 = error * 2;
 8001922:	8afb      	ldrh	r3, [r7, #22]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	b29b      	uxth	r3, r3
 8001928:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 800192a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800192e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001932:	425b      	negs	r3, r3
 8001934:	429a      	cmp	r2, r3
 8001936:	dd09      	ble.n	800194c <GC9A01_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 8001938:	8afa      	ldrh	r2, [r7, #22]
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	8a3b      	ldrh	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	b29b      	uxth	r3, r3
 800194a:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 800194c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001950:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	da09      	bge.n	800196c <GC9A01_DrawLine_Slow+0xe4>
		
      error += deltaX;
 8001958:	8afa      	ldrh	r2, [r7, #22]
 800195a:	8abb      	ldrh	r3, [r7, #20]
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 800196c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001974:	429a      	cmp	r2, r3
 8001976:	d1cc      	bne.n	8001912 <GC9A01_DrawLine_Slow+0x8a>
 8001978:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800197c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001980:	429a      	cmp	r2, r3
 8001982:	d1c6      	bne.n	8001912 <GC9A01_DrawLine_Slow+0x8a>
    }
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}

0800198e <GC9A01_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void GC9A01_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800198e:	b590      	push	{r4, r7, lr}
 8001990:	b085      	sub	sp, #20
 8001992:	af02      	add	r7, sp, #8
 8001994:	4604      	mov	r4, r0
 8001996:	4608      	mov	r0, r1
 8001998:	4611      	mov	r1, r2
 800199a:	461a      	mov	r2, r3
 800199c:	4623      	mov	r3, r4
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	4603      	mov	r3, r0
 80019a2:	80bb      	strh	r3, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 80019ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d129      	bne.n	8001a0c <GC9A01_DrawLine+0x7e>

    if (y1 > y2){
 80019b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dd11      	ble.n	80019e8 <GC9A01_DrawLine+0x5a>
      GC9A01_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 80019c4:	88ba      	ldrh	r2, [r7, #4]
 80019c6:	883b      	ldrh	r3, [r7, #0]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80019d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019da:	8b3b      	ldrh	r3, [r7, #24]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	4613      	mov	r3, r2
 80019e0:	2201      	movs	r2, #1
 80019e2:	f7ff fd81 	bl	80014e8 <GC9A01_FillRect>
	}
    else{
      GC9A01_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 80019e6:	e04c      	b.n	8001a82 <GC9A01_DrawLine+0xf4>
      GC9A01_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 80019e8:	883a      	ldrh	r2, [r7, #0]
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019fe:	8b3b      	ldrh	r3, [r7, #24]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	2201      	movs	r2, #1
 8001a06:	f7ff fd6f 	bl	80014e8 <GC9A01_FillRect>
    return;
 8001a0a:	e03a      	b.n	8001a82 <GC9A01_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 8001a0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d127      	bne.n	8001a68 <GC9A01_DrawLine+0xda>
    
    if (x1 > x2){
 8001a18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dd10      	ble.n	8001a46 <GC9A01_DrawLine+0xb8>
      GC9A01_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a36:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001a3a:	8b3b      	ldrh	r3, [r7, #24]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f7ff fd52 	bl	80014e8 <GC9A01_FillRect>
	}
    else{
      GC9A01_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 8001a44:	e01d      	b.n	8001a82 <GC9A01_DrawLine+0xf4>
      GC9A01_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a58:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a5c:	8b3b      	ldrh	r3, [r7, #24]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	f7ff fd41 	bl	80014e8 <GC9A01_FillRect>
    return;
 8001a66:	e00c      	b.n	8001a82 <GC9A01_DrawLine+0xf4>
  }
  
  GC9A01_DrawLine_Slow(x1, y1, x2, y2, color);
 8001a68:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001a6c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a70:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a74:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a78:	8b3b      	ldrh	r3, [r7, #24]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	f7ff ff03 	bl	8001888 <GC9A01_DrawLine_Slow>
}
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}

08001a88 <GC9A01_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void GC9A01_DrawPixel(int16_t x, int16_t y, uint16_t color){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= GC9A01_Width) || (y < 0) || (y >= GC9A01_Height)){
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db1b      	blt.n	8001ada <GC9A01_DrawPixel+0x52>
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <GC9A01_DrawPixel+0x5c>)
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	da15      	bge.n	8001ada <GC9A01_DrawPixel+0x52>
 8001aae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db11      	blt.n	8001ada <GC9A01_DrawPixel+0x52>
 8001ab6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <GC9A01_DrawPixel+0x60>)
 8001abc:	8812      	ldrh	r2, [r2, #0]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	da0b      	bge.n	8001ada <GC9A01_DrawPixel+0x52>
  }
	
#if FRAME_BUFFER	// если включен буфер кадра
	buff_frame[y * GC9A01_Width + x] = ((color & 0xFF)<<8) | (color >> 8 );
#else	//если попиксельный вывод
	GC9A01_SetWindow(x, y, x, y);
 8001ac2:	88f8      	ldrh	r0, [r7, #6]
 8001ac4:	88b9      	ldrh	r1, [r7, #4]
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	f7ff fd6b 	bl	80015a4 <GC9A01_SetWindow>
  GC9A01_RamWrite(&color, 1);
 8001ace:	1cbb      	adds	r3, r7, #2
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd8c 	bl	80015f0 <GC9A01_RamWrite>
 8001ad8:	e000      	b.n	8001adc <GC9A01_DrawPixel+0x54>
    return;
 8001ada:	bf00      	nop
#endif
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000003c 	.word	0x2000003c
 8001ae8:	2000003e 	.word	0x2000003e

08001aec <GC9A01_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void GC9A01_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	4604      	mov	r4, r0
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	80fb      	strh	r3, [r7, #6]
 8001afe:	4603      	mov	r3, r0
 8001b00:	80bb      	strh	r3, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  int y = radius;
 8001b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b12:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 8001b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	f1c3 0301 	rsb	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 8001b24:	e075      	b.n	8001c12 <GC9A01_DrawCircleFilled+0x126>
	  
    GC9A01_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b218      	sxth	r0, r3
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b219      	sxth	r1, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4413      	add	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b21c      	sxth	r4, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	883b      	ldrh	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	f7ff ff16 	bl	800198e <GC9A01_DrawLine>
    GC9A01_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b218      	sxth	r0, r3
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b219      	sxth	r1, r3
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b21c      	sxth	r4, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	883b      	ldrh	r3, [r7, #0]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	4622      	mov	r2, r4
 8001b9a:	f7ff fef8 	bl	800198e <GC9A01_DrawLine>
    error = 2 * (delta + y) - 1;
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da0c      	bge.n	8001bca <GC9A01_DrawCircleFilled+0xde>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dc09      	bgt.n	8001bca <GC9A01_DrawCircleFilled+0xde>
		
      ++x;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
      continue;
 8001bc8:	e023      	b.n	8001c12 <GC9A01_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dd0d      	ble.n	8001bf8 <GC9A01_DrawCircleFilled+0x10c>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	dd0a      	ble.n	8001bf8 <GC9A01_DrawCircleFilled+0x10c>
		
      --y;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	f1c3 0301 	rsb	r3, r3, #1
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
      continue;
 8001bf6:	e00c      	b.n	8001c12 <GC9A01_DrawCircleFilled+0x126>
    }
	
    ++x;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    --y;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da86      	bge.n	8001b26 <GC9A01_DrawCircleFilled+0x3a>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}

08001c22 <GC9A01_DrawCircle>:


//==============================================================================
// Процедура рисования круг ( пустотелый )
//==============================================================================
void GC9A01_DrawCircle(int16_t x0, int16_t y0, int16_t radius, uint16_t color) {
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b087      	sub	sp, #28
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4604      	mov	r4, r0
 8001c2a:	4608      	mov	r0, r1
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4623      	mov	r3, r4
 8001c32:	80fb      	strh	r3, [r7, #6]
 8001c34:	4603      	mov	r3, r0
 8001c36:	80bb      	strh	r3, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  int y = radius;
 8001c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c48:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 8001c4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	f1c3 0301 	rsb	r3, r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 8001c5a:	e079      	b.n	8001d50 <GC9A01_DrawCircle+0x12e>
	  
    GC9A01_DrawPixel(x0 + x, y0 + y, color);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4413      	add	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b218      	sxth	r0, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	883a      	ldrh	r2, [r7, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7ff ff06 	bl	8001a88 <GC9A01_DrawPixel>
    GC9A01_DrawPixel(x0 + x, y0 - y, color);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b218      	sxth	r0, r3
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	883a      	ldrh	r2, [r7, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7ff fef6 	bl	8001a88 <GC9A01_DrawPixel>
    GC9A01_DrawPixel(x0 - x, y0 + y, color);
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b218      	sxth	r0, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	883a      	ldrh	r2, [r7, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7ff fee6 	bl	8001a88 <GC9A01_DrawPixel>
    GC9A01_DrawPixel(x0 - x, y0 - y, color);
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b218      	sxth	r0, r3
 8001cc8:	88ba      	ldrh	r2, [r7, #4]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	883a      	ldrh	r2, [r7, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7ff fed6 	bl	8001a88 <GC9A01_DrawPixel>
    error = 2 * (delta + y) - 1;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da0c      	bge.n	8001d08 <GC9A01_DrawCircle+0xe6>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dc09      	bgt.n	8001d08 <GC9A01_DrawCircle+0xe6>
		
      ++x;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	3301      	adds	r3, #1
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
      continue;
 8001d06:	e023      	b.n	8001d50 <GC9A01_DrawCircle+0x12e>
    }
	
    error = 2 * (delta - x) - 1;
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dd0d      	ble.n	8001d36 <GC9A01_DrawCircle+0x114>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dd0a      	ble.n	8001d36 <GC9A01_DrawCircle+0x114>
		
      --y;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	f1c3 0301 	rsb	r3, r3, #1
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
      continue;
 8001d34:	e00c      	b.n	8001d50 <GC9A01_DrawCircle+0x12e>
    }
	
    ++x;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    --y;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da82      	bge.n	8001c5c <GC9A01_DrawCircle+0x3a>
  }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}

08001d60 <GC9A01_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void GC9A01_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4604      	mov	r4, r0
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	80fb      	strh	r3, [r7, #6]
 8001d72:	4603      	mov	r3, r0
 8001d74:	80bb      	strh	r3, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	807b      	strh	r3, [r7, #2]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	803b      	strh	r3, [r7, #0]
	
	uint32_t i, b, j;
	
	uint32_t X = x, Y = y;
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
	
	uint8_t xx, yy;
	
	if( multiplier < 1 ){
 8001d86:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <GC9A01_DrawChar+0x34>
		multiplier = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	}

	/* Check available space in LCD */
	if (GC9A01_Width >= ( x + Font->FontWidth) || GC9A01_Height >= ( y + Font->FontHeight)){
 8001d94:	4b90      	ldr	r3, [pc, #576]	@ (8001fd8 <GC9A01_DrawChar+0x278>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	4299      	cmp	r1, r3
 8001da4:	da09      	bge.n	8001dba <GC9A01_DrawChar+0x5a>
 8001da6:	4b8d      	ldr	r3, [pc, #564]	@ (8001fdc <GC9A01_DrawChar+0x27c>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	88bb      	ldrh	r3, [r7, #4]
 8001dae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001db0:	7852      	ldrb	r2, [r2, #1]
 8001db2:	4413      	add	r3, r2
 8001db4:	4299      	cmp	r1, r3
 8001db6:	f2c0 8154 	blt.w	8002062 <GC9A01_DrawChar+0x302>

	
			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {		
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e149      	b.n	8002054 <GC9A01_DrawChar+0x2f4>
				
				if( ch < 127 ){			
 8001dc0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001dc4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001dc6:	d810      	bhi.n	8001dea <GC9A01_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001dd0:	3b20      	subs	r3, #32
 8001dd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dd4:	7849      	ldrb	r1, [r1, #1]
 8001dd6:	fb01 f303 	mul.w	r3, r1, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	440b      	add	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	e0b8      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch > 191 ){
 8001dea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001dee:	2bbf      	cmp	r3, #191	@ 0xbf
 8001df0:	d910      	bls.n	8001e14 <GC9A01_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом 
					// только кирилицу то нужно добавлять 95 если шрифт 
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 8001df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001dfa:	3b60      	subs	r3, #96	@ 0x60
 8001dfc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dfe:	7849      	ldrb	r1, [r1, #1]
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	440b      	add	r3, r1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	e0a3      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 8001e14:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e18:	2ba8      	cmp	r3, #168	@ 0xa8
 8001e1a:	d110      	bne.n	8001e3e <GC9A01_DrawChar+0xde>
					// 160 эллемент ( символ Ё ) 
					b = Font->data[( 160 ) * Font->FontHeight + i];
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	4619      	mov	r1, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	015b      	lsls	r3, r3, #5
 8001e2e:	4619      	mov	r1, r3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	440b      	add	r3, r1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e08e      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8001e3e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e42:	2bb8      	cmp	r3, #184	@ 0xb8
 8001e44:	d111      	bne.n	8001e6a <GC9A01_DrawChar+0x10a>
					// 161 эллемент  ( символ ё ) 
					b = Font->data[( 161 ) * Font->FontHeight + i];
 8001e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	015b      	lsls	r3, r3, #5
 8001e58:	4413      	add	r3, r2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	440b      	add	r3, r1
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e078      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------
				
				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 8001e6a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e6e:	2baa      	cmp	r3, #170	@ 0xaa
 8001e70:	d10f      	bne.n	8001e92 <GC9A01_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	23a2      	movs	r3, #162	@ 0xa2
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	440b      	add	r3, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	e064      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 8001e92:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e96:	2baf      	cmp	r3, #175	@ 0xaf
 8001e98:	d10f      	bne.n	8001eba <GC9A01_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	23a3      	movs	r3, #163	@ 0xa3
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	440b      	add	r3, r1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	e050      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8001eba:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001ebe:	2bb2      	cmp	r3, #178	@ 0xb2
 8001ec0:	d10f      	bne.n	8001ee2 <GC9A01_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	23a4      	movs	r3, #164	@ 0xa4
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	440b      	add	r3, r1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	e03c      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 8001ee2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001ee6:	2bb3      	cmp	r3, #179	@ 0xb3
 8001ee8:	d111      	bne.n	8001f0e <GC9A01_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 8001eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	440b      	add	r3, r1
 8001efe:	4619      	mov	r1, r3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	440b      	add	r3, r1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	e026      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 8001f0e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001f12:	2bba      	cmp	r3, #186	@ 0xba
 8001f14:	d10f      	bne.n	8001f36 <GC9A01_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 8001f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	23a6      	movs	r3, #166	@ 0xa6
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	440b      	add	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e012      	b.n	8001f5c <GC9A01_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8001f36:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001f3a:	2bbf      	cmp	r3, #191	@ 0xbf
 8001f3c:	d10e      	bne.n	8001f5c <GC9A01_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f44:	785b      	ldrb	r3, [r3, #1]
 8001f46:	4619      	mov	r1, r3
 8001f48:	23a7      	movs	r3, #167	@ 0xa7
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	440b      	add	r3, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------
			
				for (j = 0; j < Font->FontWidth; j++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e068      	b.n	8002034 <GC9A01_DrawChar+0x2d4>
					
					if ((b << j) & 0x8000) {
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d028      	beq.n	8001fc4 <GC9A01_DrawChar+0x264>
						
						for (yy = 0; yy < multiplier; yy++){
 8001f72:	2300      	movs	r3, #0
 8001f74:	72bb      	strb	r3, [r7, #10]
 8001f76:	e01f      	b.n	8001fb8 <GC9A01_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8001f78:	2300      	movs	r3, #0
 8001f7a:	72fb      	strb	r3, [r7, #11]
 8001f7c:	e014      	b.n	8001fa8 <GC9A01_DrawChar+0x248>
									GC9A01_DrawPixel(X+xx, Y+yy, TextColor);
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	b218      	sxth	r0, r3
 8001f8c:	7abb      	ldrb	r3, [r7, #10]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7ff fd73 	bl	8001a88 <GC9A01_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	72fb      	strb	r3, [r7, #11]
 8001fa8:	7afa      	ldrb	r2, [r7, #11]
 8001faa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3e5      	bcc.n	8001f7e <GC9A01_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 8001fb2:	7abb      	ldrb	r3, [r7, #10]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	72bb      	strb	r3, [r7, #10]
 8001fb8:	7aba      	ldrb	r2, [r7, #10]
 8001fba:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3da      	bcc.n	8001f78 <GC9A01_DrawChar+0x218>
 8001fc2:	e02f      	b.n	8002024 <GC9A01_DrawChar+0x2c4>
							}
						}
						
					} 
					else if( TransparentBg ){
 8001fc4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02b      	beq.n	8002024 <GC9A01_DrawChar+0x2c4>
						
						for (yy = 0; yy < multiplier; yy++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	72bb      	strb	r3, [r7, #10]
 8001fd0:	e023      	b.n	800201a <GC9A01_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	72fb      	strb	r3, [r7, #11]
 8001fd6:	e018      	b.n	800200a <GC9A01_DrawChar+0x2aa>
 8001fd8:	2000003c 	.word	0x2000003c
 8001fdc:	2000003e 	.word	0x2000003e
									GC9A01_DrawPixel(X+xx, Y+yy, BgColor);
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	b218      	sxth	r0, r3
 8001fee:	7abb      	ldrb	r3, [r7, #10]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	883a      	ldrh	r2, [r7, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7ff fd42 	bl	8001a88 <GC9A01_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	3301      	adds	r3, #1
 8002008:	72fb      	strb	r3, [r7, #11]
 800200a:	7afa      	ldrb	r2, [r7, #11]
 800200c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002010:	429a      	cmp	r2, r3
 8002012:	d3e5      	bcc.n	8001fe0 <GC9A01_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8002014:	7abb      	ldrb	r3, [r7, #10]
 8002016:	3301      	adds	r3, #1
 8002018:	72bb      	strb	r3, [r7, #10]
 800201a:	7aba      	ldrb	r2, [r7, #10]
 800201c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002020:	429a      	cmp	r2, r3
 8002022:	d3d6      	bcc.n	8001fd2 <GC9A01_DrawChar+0x272>
							}
						}
						
					}
					X = X + multiplier;
 8002024:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4293      	cmp	r3, r2
 800203e:	d390      	bcc.n	8001f62 <GC9A01_DrawChar+0x202>
				}
				X = x;
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8002044:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {		
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	461a      	mov	r2, r3
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4293      	cmp	r3, r2
 800205e:	f4ff aeaf 	bcc.w	8001dc0 <GC9A01_DrawChar+0x60>
			}
	}
}
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop

0800206c <GC9A01_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void GC9A01_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af04      	add	r7, sp, #16
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	4623      	mov	r3, r4
 800207c:	80fb      	strh	r3, [r7, #6]
 800207e:	4603      	mov	r3, r0
 8002080:	80bb      	strh	r3, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	803b      	strh	r3, [r7, #0]
	
	if( multiplier < 1 ){
 800208a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <GC9A01_print+0x2c>
		multiplier = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8002098:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800209a:	f7fe f89d 	bl	80001d8 <strlen>
 800209e:	4603      	mov	r3, r0
 80020a0:	81bb      	strh	r3, [r7, #12]
	
	while (len--) {
 80020a2:	e09c      	b.n	80021de <GC9A01_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 80020a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2bbf      	cmp	r3, #191	@ 0xbf
 80020aa:	d977      	bls.n	800219c <GC9A01_print+0x130>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 80020ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2bd0      	cmp	r3, #208	@ 0xd0
 80020b2:	d002      	beq.n	80020ba <GC9A01_print+0x4e>
 80020b4:	2bd1      	cmp	r3, #209	@ 0xd1
 80020b6:	d02c      	beq.n	8002112 <GC9A01_print+0xa6>
 80020b8:	e05b      	b.n	8002172 <GC9A01_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80020ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020bc:	3301      	adds	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80020c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b8f      	cmp	r3, #143	@ 0x8f
 80020c6:	d908      	bls.n	80020da <GC9A01_print+0x6e>
 80020c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2bbf      	cmp	r3, #191	@ 0xbf
 80020ce:	d804      	bhi.n	80020da <GC9A01_print+0x6e>
 80020d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3330      	adds	r3, #48	@ 0x30
 80020d6:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 80020d8:	e048      	b.n	800216c <GC9A01_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80020da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b81      	cmp	r3, #129	@ 0x81
 80020e0:	d102      	bne.n	80020e8 <GC9A01_print+0x7c>
 80020e2:	23a8      	movs	r3, #168	@ 0xa8
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e044      	b.n	8002172 <GC9A01_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b84      	cmp	r3, #132	@ 0x84
 80020ee:	d102      	bne.n	80020f6 <GC9A01_print+0x8a>
 80020f0:	23aa      	movs	r3, #170	@ 0xaa
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e03d      	b.n	8002172 <GC9A01_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b86      	cmp	r3, #134	@ 0x86
 80020fc:	d102      	bne.n	8002104 <GC9A01_print+0x98>
 80020fe:	23b2      	movs	r3, #178	@ 0xb2
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e036      	b.n	8002172 <GC9A01_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b87      	cmp	r3, #135	@ 0x87
 800210a:	d12f      	bne.n	800216c <GC9A01_print+0x100>
 800210c:	23af      	movs	r3, #175	@ 0xaf
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e02f      	b.n	8002172 <GC9A01_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8002112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002114:	3301      	adds	r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8002118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b25b      	sxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	da08      	bge.n	8002134 <GC9A01_print+0xc8>
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b8f      	cmp	r3, #143	@ 0x8f
 8002128:	d804      	bhi.n	8002134 <GC9A01_print+0xc8>
 800212a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	3370      	adds	r3, #112	@ 0x70
 8002130:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8002132:	e01d      	b.n	8002170 <GC9A01_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b91      	cmp	r3, #145	@ 0x91
 800213a:	d102      	bne.n	8002142 <GC9A01_print+0xd6>
 800213c:	23b8      	movs	r3, #184	@ 0xb8
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e017      	b.n	8002172 <GC9A01_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b94      	cmp	r3, #148	@ 0x94
 8002148:	d102      	bne.n	8002150 <GC9A01_print+0xe4>
 800214a:	23ba      	movs	r3, #186	@ 0xba
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e010      	b.n	8002172 <GC9A01_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b96      	cmp	r3, #150	@ 0x96
 8002156:	d102      	bne.n	800215e <GC9A01_print+0xf2>
 8002158:	23b3      	movs	r3, #179	@ 0xb3
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e009      	b.n	8002172 <GC9A01_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b97      	cmp	r3, #151	@ 0x97
 8002164:	d104      	bne.n	8002170 <GC9A01_print+0x104>
 8002166:	23bf      	movs	r3, #191	@ 0xbf
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e002      	b.n	8002172 <GC9A01_print+0x106>
					break;
 800216c:	bf00      	nop
 800216e:	e000      	b.n	8002172 <GC9A01_print+0x106>
					break;
 8002170:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8002172:	89bb      	ldrh	r3, [r7, #12]
 8002174:	3b01      	subs	r3, #1
 8002176:	81bb      	strh	r3, [r7, #12]
			
			GC9A01_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8002178:	883c      	ldrh	r4, [r7, #0]
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	88b9      	ldrh	r1, [r7, #4]
 800217e:	88f8      	ldrh	r0, [r7, #6]
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	9303      	str	r3, [sp, #12]
 8002184:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4623      	mov	r3, r4
 8002196:	f7ff fde3 	bl	8001d60 <GC9A01_DrawChar>
 800219a:	e011      	b.n	80021c0 <GC9A01_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			GC9A01_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 800219c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	883c      	ldrh	r4, [r7, #0]
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	88b9      	ldrh	r1, [r7, #4]
 80021a6:	88f8      	ldrh	r0, [r7, #6]
 80021a8:	9303      	str	r3, [sp, #12]
 80021aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4623      	mov	r3, r4
 80021bc:	f7ff fdd0 	bl	8001d60 <GC9A01_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	fb12 f303 	smulbb	r3, r2, r3
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	4413      	add	r3, r2
 80021d6:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021da:	3301      	adds	r3, #1
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (len--) {
 80021de:	89bb      	ldrh	r3, [r7, #12]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	81ba      	strh	r2, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f af5d 	bne.w	80020a4 <GC9A01_print+0x38>
	}
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}

080021f4 <GC9A01_rotation>:
// установка ротации дисплея, отзеркаливание по вертикали и горизонтали и режим цветопередаци
// первый параметр ротация значения от 0 до 7 
// второй параметр отзеркаливание по вертикали значения 0-выкл 1-вкл
// третий параметр отзеркаливание по горизонтали значения 0-выкл 1-вкл
// по умолчанию стоит #define GC9A01_DEF_ROTATION  ( 0, 0, 0 )
void GC9A01_rotation(uint8_t Rotation, uint8_t VertMirror, uint8_t HorizMirror){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	460b      	mov	r3, r1
 8002200:	71bb      	strb	r3, [r7, #6]
 8002202:	4613      	mov	r3, r2
 8002204:	717b      	strb	r3, [r7, #5]
	
		GC9A01_Select();
 8002206:	f7ff f88b 	bl	8001320 <GC9A01_Select>
		
		uint8_t Value;
		Rotation &= 7;
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	71fb      	strb	r3, [r7, #7]

		GC9A01_SendCmd(GC9A01_MADCTL);
 8002212:	2036      	movs	r0, #54	@ 0x36
 8002214:	f7ff f8b6 	bl	8001384 <GC9A01_SendCmd>

		switch (Rotation) {
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b07      	cmp	r3, #7
 800221c:	d82a      	bhi.n	8002274 <GC9A01_rotation+0x80>
 800221e:	a201      	add	r2, pc, #4	@ (adr r2, 8002224 <GC9A01_rotation+0x30>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	08002245 	.word	0x08002245
 8002228:	0800224b 	.word	0x0800224b
 800222c:	08002251 	.word	0x08002251
 8002230:	08002257 	.word	0x08002257
 8002234:	0800225d 	.word	0x0800225d
 8002238:	08002263 	.word	0x08002263
 800223c:	08002269 	.word	0x08002269
 8002240:	0800226f 	.word	0x0800226f
		case 0:
			Value = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
			break;
 8002248:	e014      	b.n	8002274 <GC9A01_rotation+0x80>
		case 1:
			Value = GC9A01_MADCTL_MX;
 800224a:	2340      	movs	r3, #64	@ 0x40
 800224c:	73fb      	strb	r3, [r7, #15]
			break;
 800224e:	e011      	b.n	8002274 <GC9A01_rotation+0x80>
		case 2:
			Value = GC9A01_MADCTL_MY;
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	73fb      	strb	r3, [r7, #15]
			break;
 8002254:	e00e      	b.n	8002274 <GC9A01_rotation+0x80>
		case 3:
			Value = GC9A01_MADCTL_MX | GC9A01_MADCTL_MY;
 8002256:	23c0      	movs	r3, #192	@ 0xc0
 8002258:	73fb      	strb	r3, [r7, #15]
			break;
 800225a:	e00b      	b.n	8002274 <GC9A01_rotation+0x80>
		case 4:
			Value = GC9A01_MADCTL_MV;
 800225c:	2320      	movs	r3, #32
 800225e:	73fb      	strb	r3, [r7, #15]
			break;
 8002260:	e008      	b.n	8002274 <GC9A01_rotation+0x80>
		case 5:
			Value = GC9A01_MADCTL_MV | GC9A01_MADCTL_MX;
 8002262:	2360      	movs	r3, #96	@ 0x60
 8002264:	73fb      	strb	r3, [r7, #15]
			break;
 8002266:	e005      	b.n	8002274 <GC9A01_rotation+0x80>
		case 6:
			Value = GC9A01_MADCTL_MV | GC9A01_MADCTL_MY;
 8002268:	23a0      	movs	r3, #160	@ 0xa0
 800226a:	73fb      	strb	r3, [r7, #15]
			break;
 800226c:	e002      	b.n	8002274 <GC9A01_rotation+0x80>
		case 7:
			Value = GC9A01_MADCTL_MV | GC9A01_MADCTL_MX | GC9A01_MADCTL_MY;
 800226e:	23e0      	movs	r3, #224	@ 0xe0
 8002270:	73fb      	strb	r3, [r7, #15]
			break;
 8002272:	bf00      	nop
		}

		if (VertMirror){
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <GC9A01_rotation+0x8a>
			Value = GC9A01_MADCTL_ML;
 800227a:	2310      	movs	r3, #16
 800227c:	73fb      	strb	r3, [r7, #15]
		}
		
		if (HorizMirror){
 800227e:	797b      	ldrb	r3, [r7, #5]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <GC9A01_rotation+0x94>
			Value = GC9A01_MADCTL_MH;
 8002284:	2304      	movs	r3, #4
 8002286:	73fb      	strb	r3, [r7, #15]
		}

		// RGB or BGR
		Value |= GC9A01_DEF_ROTATION;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	73fb      	strb	r3, [r7, #15]
		
		GC9A01_SendData(Value);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f8ac 	bl	80013f0 <GC9A01_SendData>
		
		GC9A01_Unselect();
 8002298:	f7ff f850 	bl	800133c <GC9A01_Unselect>
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <GC9A01_DrawLineThick>:
//==============================================================================

//==============================================================================
// Процедура рисования линия толстая ( последний параметр толщина )
//==============================================================================
void GC9A01_DrawLineThick(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t thick) {
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	80fb      	strh	r3, [r7, #6]
 80022b6:	4603      	mov	r3, r0
 80022b8:	80bb      	strh	r3, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
 80022be:	4613      	mov	r3, r2
 80022c0:	803b      	strh	r3, [r7, #0]
	const int16_t deltaX = abs(x2 - x1);
 80022c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bfb8      	it	lt
 80022d0:	425b      	neglt	r3, r3
 80022d2:	82bb      	strh	r3, [r7, #20]
	const int16_t deltaY = abs(y2 - y1);
 80022d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80022d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	425b      	neglt	r3, r3
 80022e4:	827b      	strh	r3, [r7, #18]
	const int16_t signX = x1 < x2 ? 1 : -1;
 80022e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	da01      	bge.n	80022f6 <GC9A01_DrawLineThick+0x52>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e001      	b.n	80022fa <GC9A01_DrawLineThick+0x56>
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	823b      	strh	r3, [r7, #16]
	const int16_t signY = y1 < y2 ? 1 : -1;
 80022fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002300:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002304:	429a      	cmp	r2, r3
 8002306:	da01      	bge.n	800230c <GC9A01_DrawLineThick+0x68>
 8002308:	2301      	movs	r3, #1
 800230a:	e001      	b.n	8002310 <GC9A01_DrawLineThick+0x6c>
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	81fb      	strh	r3, [r7, #14]

	int16_t error = deltaX - deltaY;
 8002312:	8aba      	ldrh	r2, [r7, #20]
 8002314:	8a7b      	ldrh	r3, [r7, #18]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	b29b      	uxth	r3, r3
 800231a:	82fb      	strh	r3, [r7, #22]

	if (thick > 1){
 800231c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d90c      	bls.n	800233e <GC9A01_DrawLineThick+0x9a>
		GC9A01_DrawCircleFilled(x2, y2, thick >> 1, color);
 8002324:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	b21a      	sxth	r2, r3
 800232e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002330:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002334:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002338:	f7ff fbd8 	bl	8001aec <GC9A01_DrawCircleFilled>
 800233c:	e046      	b.n	80023cc <GC9A01_DrawLineThick+0x128>
	}
	else{
		GC9A01_DrawPixel(x2, y2, color);
 800233e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002340:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002344:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fb9d 	bl	8001a88 <GC9A01_DrawPixel>
	}

	while (x1 != x2 || y1 != y2) {
 800234e:	e03d      	b.n	80023cc <GC9A01_DrawLineThick+0x128>
		if (thick > 1){
 8002350:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d90c      	bls.n	8002372 <GC9A01_DrawLineThick+0xce>
			GC9A01_DrawCircleFilled(x1, y1, thick >> 1, color);
 8002358:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	b21a      	sxth	r2, r3
 8002362:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002364:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002368:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800236c:	f7ff fbbe 	bl	8001aec <GC9A01_DrawCircleFilled>
 8002370:	e007      	b.n	8002382 <GC9A01_DrawLineThick+0xde>
		}
		else{
			GC9A01_DrawPixel(x1, y1, color);
 8002372:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002374:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fb83 	bl	8001a88 <GC9A01_DrawPixel>
		}

		const int16_t error2 = error * 2;
 8002382:	8afb      	ldrh	r3, [r7, #22]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	81bb      	strh	r3, [r7, #12]
		if (error2 > -deltaY) {
 800238a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800238e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002392:	425b      	negs	r3, r3
 8002394:	429a      	cmp	r2, r3
 8002396:	dd09      	ble.n	80023ac <GC9A01_DrawLineThick+0x108>
			error -= deltaY;
 8002398:	8afa      	ldrh	r2, [r7, #22]
 800239a:	8a7b      	ldrh	r3, [r7, #18]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	b29b      	uxth	r3, r3
 80023a0:	82fb      	strh	r3, [r7, #22]
			x1 += signX;
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	8a3b      	ldrh	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX) {
 80023ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	da09      	bge.n	80023cc <GC9A01_DrawLineThick+0x128>
			error += deltaX;
 80023b8:	8afa      	ldrh	r2, [r7, #22]
 80023ba:	8abb      	ldrh	r3, [r7, #20]
 80023bc:	4413      	add	r3, r2
 80023be:	b29b      	uxth	r3, r3
 80023c0:	82fb      	strh	r3, [r7, #22]
			y1 += signY;
 80023c2:	88ba      	ldrh	r2, [r7, #4]
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	4413      	add	r3, r2
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	80bb      	strh	r3, [r7, #4]
	while (x1 != x2 || y1 != y2) {
 80023cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80023d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1bb      	bne.n	8002350 <GC9A01_DrawLineThick+0xac>
 80023d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1b5      	bne.n	8002350 <GC9A01_DrawLineThick+0xac>
		}
	}
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
	...

080023f0 <GC9A01_DrawArc>:
//==============================================================================		

//==============================================================================
// Процедура рисования дуга толстая ( часть круга )
//==============================================================================
void GC9A01_DrawArc(int16_t x0, int16_t y0, int16_t radius, int16_t startAngle, int16_t endAngle, uint16_t color, uint8_t thick) {
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b08a      	sub	sp, #40	@ 0x28
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	4604      	mov	r4, r0
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	80fb      	strh	r3, [r7, #6]
 8002402:	4603      	mov	r3, r0
 8002404:	80bb      	strh	r3, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
 800240a:	4613      	mov	r3, r2
 800240c:	803b      	strh	r3, [r7, #0]
	
	int16_t xLast = -1, yLast = -1;
 800240e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002412:	83fb      	strh	r3, [r7, #30]
 8002414:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002418:	83bb      	strh	r3, [r7, #28]
	startAngle -= 90;
 800241a:	883b      	ldrh	r3, [r7, #0]
 800241c:	3b5a      	subs	r3, #90	@ 0x5a
 800241e:	b29b      	uxth	r3, r3
 8002420:	803b      	strh	r3, [r7, #0]
	endAngle -= 90;
 8002422:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002424:	3b5a      	subs	r3, #90	@ 0x5a
 8002426:	b29b      	uxth	r3, r3
 8002428:	863b      	strh	r3, [r7, #48]	@ 0x30

	for (int16_t angle = startAngle; angle <= endAngle; angle += 2) {
 800242a:	883b      	ldrh	r3, [r7, #0]
 800242c:	837b      	strh	r3, [r7, #26]
 800242e:	e0b2      	b.n	8002596 <GC9A01_DrawArc+0x1a6>
		float angleRad = (float) angle * PI / 180;
 8002430:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243c:	ee17 0a90 	vmov	r0, s15
 8002440:	f7fe f836 	bl	80004b0 <__aeabi_f2d>
 8002444:	a35b      	add	r3, pc, #364	@ (adr r3, 80025b4 <GC9A01_DrawArc+0x1c4>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fe f889 	bl	8000560 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b55      	ldr	r3, [pc, #340]	@ (80025b0 <GC9A01_DrawArc+0x1c0>)
 800245c:	f7fe f9aa 	bl	80007b4 <__aeabi_ddiv>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fb3c 	bl	8000ae4 <__aeabi_d2f>
 800246c:	4603      	mov	r3, r0
 800246e:	617b      	str	r3, [r7, #20]
		int x = cos(angleRad) * radius + x0;
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7fe f81d 	bl	80004b0 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	ec43 2b10 	vmov	d0, r2, r3
 800247e:	f003 fb67 	bl	8005b50 <cos>
 8002482:	ec55 4b10 	vmov	r4, r5, d0
 8002486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fffe 	bl	800048c <__aeabi_i2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4620      	mov	r0, r4
 8002496:	4629      	mov	r1, r5
 8002498:	f7fe f862 	bl	8000560 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4614      	mov	r4, r2
 80024a2:	461d      	mov	r5, r3
 80024a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd ffef 	bl	800048c <__aeabi_i2d>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd fe9d 	bl	80001f4 <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7fe fae7 	bl	8000a94 <__aeabi_d2iz>
 80024c6:	4603      	mov	r3, r0
 80024c8:	613b      	str	r3, [r7, #16]
		int y = sin(angleRad) * radius + y0;
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7fd fff0 	bl	80004b0 <__aeabi_f2d>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	ec43 2b10 	vmov	d0, r2, r3
 80024d8:	f003 fb8e 	bl	8005bf8 <sin>
 80024dc:	ec55 4b10 	vmov	r4, r5, d0
 80024e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ffd1 	bl	800048c <__aeabi_i2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fe f835 	bl	8000560 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4614      	mov	r4, r2
 80024fc:	461d      	mov	r5, r3
 80024fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd ffc2 	bl	800048c <__aeabi_i2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4620      	mov	r0, r4
 800250e:	4629      	mov	r1, r5
 8002510:	f7fd fe70 	bl	80001f4 <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe faba 	bl	8000a94 <__aeabi_d2iz>
 8002520:	4603      	mov	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

		if (xLast == -1 || yLast == -1) {
 8002524:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d004      	beq.n	8002538 <GC9A01_DrawArc+0x148>
 800252e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d104      	bne.n	8002542 <GC9A01_DrawArc+0x152>
			xLast = x;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	83fb      	strh	r3, [r7, #30]
			yLast = y;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	83bb      	strh	r3, [r7, #28]
			continue;
 8002540:	e025      	b.n	800258e <GC9A01_DrawArc+0x19e>
		}

		if (thick > 1){
 8002542:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002546:	2b01      	cmp	r3, #1
 8002548:	d910      	bls.n	800256c <GC9A01_DrawArc+0x17c>
			GC9A01_DrawLineThick(xLast, yLast, x, y, color, thick);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	b21a      	sxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	b21c      	sxth	r4, r3
 8002552:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8002556:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800255a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4623      	mov	r3, r4
 8002566:	f7ff fe9d 	bl	80022a4 <GC9A01_DrawLineThick>
 800256a:	e00c      	b.n	8002586 <GC9A01_DrawArc+0x196>
		}
		else{
			GC9A01_DrawLine(xLast, yLast, x, y, color);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	b21a      	sxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	b21c      	sxth	r4, r3
 8002574:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8002578:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800257c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4623      	mov	r3, r4
 8002582:	f7ff fa04 	bl	800198e <GC9A01_DrawLine>
		}

		xLast = x;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	83fb      	strh	r3, [r7, #30]
		yLast = y;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	83bb      	strh	r3, [r7, #28]
	for (int16_t angle = startAngle; angle <= endAngle; angle += 2) {
 800258e:	8b7b      	ldrh	r3, [r7, #26]
 8002590:	3302      	adds	r3, #2
 8002592:	b29b      	uxth	r3, r3
 8002594:	837b      	strh	r3, [r7, #26]
 8002596:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800259a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800259e:	429a      	cmp	r2, r3
 80025a0:	f77f af46 	ble.w	8002430 <GC9A01_DrawArc+0x40>
	}
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bdb0      	pop	{r4, r5, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40668000 	.word	0x40668000
 80025b4:	53c8d4f1 	.word	0x53c8d4f1
 80025b8:	400921fb 	.word	0x400921fb

080025bc <SPI_Write>:

/************************ (C) COPYRIGHT GKP *****END OF FILE****/


	HAL_StatusTypeDef SPI_Write(uint8_t* pbuff, uint16_t size)
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
		//DMA, use HAL_SPI_Transmit_DMA() function
	    HAL_StatusTypeDef status =  HAL_SPI_Transmit_DMA(&hspi1, pbuff, size);
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4808      	ldr	r0, [pc, #32]	@ (80025f0 <SPI_Write+0x34>)
 80025d0:	f003 f856 	bl	8005680 <HAL_SPI_Transmit_DMA>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
	    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){;}
 80025d8:	bf00      	nop
 80025da:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <SPI_Write+0x34>)
 80025dc:	f003 f920 	bl	8005820 <HAL_SPI_GetState>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d1f9      	bne.n	80025da <SPI_Write+0x1e>
	    return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]

	    //no DMA, use HAL_SPI_Transmit() function
	    //return HAL_SPI_Transmit(&hspi1, pbuff, size, 100);
	}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000064 	.word	0x20000064

080025f4 <Write_Cmd_Data>:

	void  Write_Cmd_Data (unsigned char CMDP)
	{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
	    LCD_CS_0;
 80025fe:	2200      	movs	r2, #0
 8002600:	2140      	movs	r1, #64	@ 0x40
 8002602:	480b      	ldr	r0, [pc, #44]	@ (8002630 <Write_Cmd_Data+0x3c>)
 8002604:	f001 ff7a 	bl	80044fc <HAL_GPIO_WritePin>
	   	LCD_DC_1;
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800260e:	4809      	ldr	r0, [pc, #36]	@ (8002634 <Write_Cmd_Data+0x40>)
 8002610:	f001 ff74 	bl	80044fc <HAL_GPIO_WritePin>

	   	SPI_Write(&CMDP, 1);
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	2101      	movs	r1, #1
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ffcf 	bl	80025bc <SPI_Write>

	   	LCD_CS_1;
 800261e:	2201      	movs	r2, #1
 8002620:	2140      	movs	r1, #64	@ 0x40
 8002622:	4803      	ldr	r0, [pc, #12]	@ (8002630 <Write_Cmd_Data+0x3c>)
 8002624:	f001 ff6a 	bl	80044fc <HAL_GPIO_WritePin>
	}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40020400 	.word	0x40020400
 8002634:	40020000 	.word	0x40020000

08002638 <Write_Cmd>:

	//=============================================================
	//write command

	void Write_Cmd(unsigned char CMD)
	{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	    LCD_CS_0;
 8002642:	2200      	movs	r2, #0
 8002644:	2140      	movs	r1, #64	@ 0x40
 8002646:	480b      	ldr	r0, [pc, #44]	@ (8002674 <Write_Cmd+0x3c>)
 8002648:	f001 ff58 	bl	80044fc <HAL_GPIO_WritePin>
	   	LCD_DC_0;
 800264c:	2200      	movs	r2, #0
 800264e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002652:	4809      	ldr	r0, [pc, #36]	@ (8002678 <Write_Cmd+0x40>)
 8002654:	f001 ff52 	bl	80044fc <HAL_GPIO_WritePin>

	   	SPI_Write(&CMD, 1);
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ffad 	bl	80025bc <SPI_Write>

	   	LCD_CS_1;
 8002662:	2201      	movs	r2, #1
 8002664:	2140      	movs	r1, #64	@ 0x40
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <Write_Cmd+0x3c>)
 8002668:	f001 ff48 	bl	80044fc <HAL_GPIO_WritePin>
	}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40020400 	.word	0x40020400
 8002678:	40020000 	.word	0x40020000

0800267c <LCD_SetPos>:



	 void LCD_SetPos(unsigned int Xstart,unsigned int Ystart,unsigned int Xend,unsigned int Yend)
	{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
		Write_Cmd(0x2a);
 800268a:	202a      	movs	r0, #42	@ 0x2a
 800268c:	f7ff ffd4 	bl	8002638 <Write_Cmd>
		Write_Cmd_Data(Xstart>>8);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ffac 	bl	80025f4 <Write_Cmd_Data>
		Write_Cmd_Data(Xstart);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ffa7 	bl	80025f4 <Write_Cmd_Data>
	 	Write_Cmd_Data(Xend>>8);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffa1 	bl	80025f4 <Write_Cmd_Data>
		Write_Cmd_Data(Xend);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff9c 	bl	80025f4 <Write_Cmd_Data>

		Write_Cmd(0x2b);
 80026bc:	202b      	movs	r0, #43	@ 0x2b
 80026be:	f7ff ffbb 	bl	8002638 <Write_Cmd>
		Write_Cmd_Data(Ystart>>8);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff93 	bl	80025f4 <Write_Cmd_Data>
		Write_Cmd_Data(Ystart);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff8e 	bl	80025f4 <Write_Cmd_Data>
		Write_Cmd_Data(Yend>>8);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff88 	bl	80025f4 <Write_Cmd_Data>
		Write_Cmd_Data(Yend);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff83 	bl	80025f4 <Write_Cmd_Data>

	  	Write_Cmd(0x2c);//LCD_WriteCMD(GRAMWR);
 80026ee:	202c      	movs	r0, #44	@ 0x2c
 80026f0:	f7ff ffa2 	bl	8002638 <Write_Cmd>
	}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <Write_Bytes>:



	void Write_Bytes(unsigned char * pbuff, unsigned short size)
	{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
	    LCD_CS_0;
 8002708:	2200      	movs	r2, #0
 800270a:	2140      	movs	r1, #64	@ 0x40
 800270c:	480b      	ldr	r0, [pc, #44]	@ (800273c <Write_Bytes+0x40>)
 800270e:	f001 fef5 	bl	80044fc <HAL_GPIO_WritePin>
	   	LCD_DC_1;
 8002712:	2201      	movs	r2, #1
 8002714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002718:	4809      	ldr	r0, [pc, #36]	@ (8002740 <Write_Bytes+0x44>)
 800271a:	f001 feef 	bl	80044fc <HAL_GPIO_WritePin>

	   	SPI_Write(pbuff, size);
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ff4a 	bl	80025bc <SPI_Write>

	   	LCD_CS_1;
 8002728:	2201      	movs	r2, #1
 800272a:	2140      	movs	r1, #64	@ 0x40
 800272c:	4803      	ldr	r0, [pc, #12]	@ (800273c <Write_Bytes+0x40>)
 800272e:	f001 fee5 	bl	80044fc <HAL_GPIO_WritePin>
	}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40020400 	.word	0x40020400
 8002740:	40020000 	.word	0x40020000

08002744 <ClearWindow>:


	void ClearWindow(unsigned int startX, unsigned int startY, unsigned int endX, unsigned int endY, unsigned int bColor)
	{
 8002744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002748:	b08f      	sub	sp, #60	@ 0x3c
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	466b      	mov	r3, sp
 8002756:	461e      	mov	r6, r3
	 unsigned int i;

	 //Exchange high 8bit and low 8bit of bColor for DMA batch transmit
	 unsigned char hb = (bColor&0xFFFF) >> 8;
 8002758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	 unsigned char lb = bColor & 0xFF;
 8002760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002762:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	 unsigned short tempColor = lb * 256 + hb;
 8002766:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800276a:	b29b      	uxth	r3, r3
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b29a      	uxth	r2, r3
 8002770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002774:	b29b      	uxth	r3, r3
 8002776:	4413      	add	r3, r2
 8002778:	863b      	strh	r3, [r7, #48]	@ 0x30

	 unsigned int totalSize = (endX-startX) * (endY - startY) * 2; // total clear window data size
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	1a8a      	subs	r2, r1, r2
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 unsigned int bufSize = 512;  // define bufSize, need less than DMA transmit size
 800278e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28

	 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize; // transmit loop times
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002798:	fbb3 f2f2 	udiv	r2, r3, r2
 800279c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800279e:	fb01 f202 	mul.w	r2, r1, r2
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
	 unsigned int modNum = totalSize % bufSize;  // remainder data bytes
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80027b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ba:	fb01 f202 	mul.w	r2, r1, r2
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	623b      	str	r3, [r7, #32]


	 //use a tempBuf to initial bColor data, bufSize < DMA transmit size
	 unsigned short tempBuf[bufSize];
 80027c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027c4:	460b      	mov	r3, r1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	2300      	movs	r3, #0
 80027cc:	4688      	mov	r8, r1
 80027ce:	4699      	mov	r9, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80027dc:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80027e0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80027e4:	2300      	movs	r3, #0
 80027e6:	460c      	mov	r4, r1
 80027e8:	461d      	mov	r5, r3
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	012b      	lsls	r3, r5, #4
 80027f4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80027f8:	0122      	lsls	r2, r4, #4
 80027fa:	004b      	lsls	r3, r1, #1
 80027fc:	3307      	adds	r3, #7
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	ebad 0d03 	sub.w	sp, sp, r3
 8002806:	466b      	mov	r3, sp
 8002808:	3301      	adds	r3, #1
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
	 unsigned char * ptempBuf;

	 //init tempBuf data to tempColor( Exchange high 8bit and low 8bit of bColor )
	 for(i=0; i<bufSize; i++){
 8002810:	2300      	movs	r3, #0
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
 8002814:	e007      	b.n	8002826 <ClearWindow+0xe2>
		 tempBuf[i] = tempColor;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800281a:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800281c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	 for(i=0; i<bufSize; i++){
 8002820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002822:	3301      	adds	r3, #1
 8002824:	637b      	str	r3, [r7, #52]	@ 0x34
 8002826:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	429a      	cmp	r2, r3
 800282c:	d3f3      	bcc.n	8002816 <ClearWindow+0xd2>
	 }

	 // Clear window size: from (startX, startY) to (endX, endY)
	 LCD_SetPos(startX,startY,endX-1,endY-1);// (endX-startX) * (endY - startY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3b01      	subs	r3, #1
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff ff1f 	bl	800267c <LCD_SetPos>

	 // transmit bufSize byte one time, loopNum loops
	 ptempBuf = (unsigned char *)tempBuf;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	617b      	str	r3, [r7, #20]
	 for(i=0; i<loopNum; i++){
 8002842:	2300      	movs	r3, #0
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
 8002846:	e008      	b.n	800285a <ClearWindow+0x116>
		 Write_Bytes(ptempBuf, bufSize);
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	b29b      	uxth	r3, r3
 800284c:	4619      	mov	r1, r3
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff54 	bl	80026fc <Write_Bytes>
	 for(i=0; i<loopNum; i++){
 8002854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002856:	3301      	adds	r3, #1
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
 800285a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	429a      	cmp	r2, r3
 8002860:	d3f2      	bcc.n	8002848 <ClearWindow+0x104>
	 }

	 // transmit remainder data, modNum bytes
	 Write_Bytes(ptempBuf, modNum);
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	b29b      	uxth	r3, r3
 8002866:	4619      	mov	r1, r3
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	f7ff ff47 	bl	80026fc <Write_Bytes>
 800286e:	46b5      	mov	sp, r6

	}
 8002870:	bf00      	nop
 8002872:	373c      	adds	r7, #60	@ 0x3c
 8002874:	46bd      	mov	sp, r7
 8002876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800287a <ClearScreen2>:


	void ClearScreen2(unsigned int bColor)
	{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af02      	add	r7, sp, #8
 8002880:	6078      	str	r0, [r7, #4]
		ClearWindow(0,0,GC9A01_TFTWIDTH,GC9A01_TFTHEIGHT,bColor);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	23f0      	movs	r3, #240	@ 0xf0
 8002888:	22f0      	movs	r2, #240	@ 0xf0
 800288a:	2100      	movs	r1, #0
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff ff59 	bl	8002744 <ClearWindow>
	}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	0000      	movs	r0, r0
 800289c:	0000      	movs	r0, r0
	...

080028a0 <DrawArrow>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DrawArrow(int16_t angle, uint8_t lineLen, uint8_t thick, uint16_t color) {
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4623      	mov	r3, r4
 80028b0:	80fb      	strh	r3, [r7, #6]
 80028b2:	4603      	mov	r3, r0
 80028b4:	717b      	strb	r3, [r7, #5]
 80028b6:	460b      	mov	r3, r1
 80028b8:	713b      	strb	r3, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	807b      	strh	r3, [r7, #2]

	angle -= 90;
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	3b5a      	subs	r3, #90	@ 0x5a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	80fb      	strh	r3, [r7, #6]
	float angleRad = (float) angle * PI / 180;
 80028c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d2:	ee17 0a90 	vmov	r0, s15
 80028d6:	f7fd fdeb 	bl	80004b0 <__aeabi_f2d>
 80028da:	a33b      	add	r3, pc, #236	@ (adr r3, 80029c8 <DrawArrow+0x128>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fe3e 	bl	8000560 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4b33      	ldr	r3, [pc, #204]	@ (80029c0 <DrawArrow+0x120>)
 80028f2:	f7fd ff5f 	bl	80007b4 <__aeabi_ddiv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f8f1 	bl	8000ae4 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	617b      	str	r3, [r7, #20]
	int x = cos(angleRad) * lineLen + xC;
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7fd fdd2 	bl	80004b0 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	ec43 2b10 	vmov	d0, r2, r3
 8002914:	f003 f91c 	bl	8005b50 <cos>
 8002918:	ec55 4b10 	vmov	r4, r5, d0
 800291c:	797b      	ldrb	r3, [r7, #5]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fdb4 	bl	800048c <__aeabi_i2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fe18 	bl	8000560 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	4b21      	ldr	r3, [pc, #132]	@ (80029c4 <DrawArrow+0x124>)
 800293e:	f7fd fc59 	bl	80001f4 <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f8a3 	bl	8000a94 <__aeabi_d2iz>
 800294e:	4603      	mov	r3, r0
 8002950:	613b      	str	r3, [r7, #16]
	int y = sin(angleRad) * lineLen + yC;
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7fd fdac 	bl	80004b0 <__aeabi_f2d>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	ec43 2b10 	vmov	d0, r2, r3
 8002960:	f003 f94a 	bl	8005bf8 <sin>
 8002964:	ec55 4b10 	vmov	r4, r5, d0
 8002968:	797b      	ldrb	r3, [r7, #5]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fd8e 	bl	800048c <__aeabi_i2d>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4620      	mov	r0, r4
 8002976:	4629      	mov	r1, r5
 8002978:	f7fd fdf2 	bl	8000560 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <DrawArrow+0x124>)
 800298a:	f7fd fc33 	bl	80001f4 <__adddf3>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f87d 	bl	8000a94 <__aeabi_d2iz>
 800299a:	4603      	mov	r3, r0
 800299c:	60fb      	str	r3, [r7, #12]

	GC9A01_DrawLineThick(xC, yC, x, y, color, thick);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	b219      	sxth	r1, r3
 80029a6:	793b      	ldrb	r3, [r7, #4]
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	460b      	mov	r3, r1
 80029b0:	2178      	movs	r1, #120	@ 0x78
 80029b2:	2078      	movs	r0, #120	@ 0x78
 80029b4:	f7ff fc76 	bl	80022a4 <GC9A01_DrawLineThick>
}
 80029b8:	bf00      	nop
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bdb0      	pop	{r4, r5, r7, pc}
 80029c0:	40668000 	.word	0x40668000
 80029c4:	405e0000 	.word	0x405e0000
 80029c8:	53c8d4f1 	.word	0x53c8d4f1
 80029cc:	400921fb 	.word	0x400921fb

080029d0 <DrawClock>:

void DrawClock(uint8_t hour, uint8_t min, uint8_t sec, uint8_t light, uint8_t secBubbles) {
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b096      	sub	sp, #88	@ 0x58
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	4604      	mov	r4, r0
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	71fb      	strb	r3, [r7, #7]
 80029e2:	4603      	mov	r3, r0
 80029e4:	71bb      	strb	r3, [r7, #6]
 80029e6:	460b      	mov	r3, r1
 80029e8:	717b      	strb	r3, [r7, #5]
 80029ea:	4613      	mov	r3, r2
 80029ec:	713b      	strb	r3, [r7, #4]

	uint16_t bgColor, riskColor, digitColor, arrowColor, secArcColor;

	if (light) {
 80029ee:	793b      	ldrb	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <DrawClock+0x4a>
		bgColor = GC9A01_WHITE;
 80029f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029f8:	873b      	strh	r3, [r7, #56]	@ 0x38
		riskColor = digitColor = arrowColor = GC9A01_BLACK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a04:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002a08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002a0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		secArcColor = GC9A01_MAGENTA;
 8002a10:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a14:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002a18:	e011      	b.n	8002a3e <DrawClock+0x6e>
	} else {
		bgColor = GC9A01_BLACK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	873b      	strh	r3, [r7, #56]	@ 0x38
		riskColor = digitColor = arrowColor = GC9A01_WHITE;
 8002a1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a2a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002a2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002a32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		secArcColor = GC9A01_GREEN;
 8002a36:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	}

//	GC9A01_FillScreen(bgColor);   //NO DMA
	ClearScreen2(GC9A01_BLACK);   //DMA
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff ff1b 	bl	800287a <ClearScreen2>


	uint8_t radius1 = 119;
 8002a44:	2377      	movs	r3, #119	@ 0x77
 8002a46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	for (uint16_t angle = 0; angle <= 360; angle += 6) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002a4e:	e0fb      	b.n	8002c48 <DrawClock+0x278>
		uint8_t riskSize;
		if (!(angle % 90))
 8002a50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002a52:	085a      	lsrs	r2, r3, #1
 8002a54:	490f      	ldr	r1, [pc, #60]	@ (8002a94 <DrawClock+0xc4>)
 8002a56:	fba1 1202 	umull	r1, r2, r1, r2
 8002a5a:	0952      	lsrs	r2, r2, #5
 8002a5c:	215a      	movs	r1, #90	@ 0x5a
 8002a5e:	fb01 f202 	mul.w	r2, r1, r2
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <DrawClock+0xa2>
			riskSize = 13;
 8002a6a:	230d      	movs	r3, #13
 8002a6c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8002a70:	e017      	b.n	8002aa2 <DrawClock+0xd2>
		else if (!(angle % 30))
 8002a72:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <DrawClock+0xc8>)
 8002a76:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7a:	0919      	lsrs	r1, r3, #4
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a5b      	subs	r3, r3, r1
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <DrawClock+0xcc>
			riskSize = 10;
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8002a92:	e006      	b.n	8002aa2 <DrawClock+0xd2>
 8002a94:	b60b60b7 	.word	0xb60b60b7
 8002a98:	88888889 	.word	0x88888889
		else
			riskSize = 6;
 8002a9c:	2306      	movs	r3, #6
 8002a9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

		uint8_t radius2 = radius1 - riskSize;
 8002aa2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002aa6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		float angleRad = (float) angle * PI / 180;
 8002ab0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fcf7 	bl	80004b0 <__aeabi_f2d>
 8002ac2:	a3de      	add	r3, pc, #888	@ (adr r3, 8002e3c <DrawClock+0x46c>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fd4a 	bl	8000560 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4bc7      	ldr	r3, [pc, #796]	@ (8002df8 <DrawClock+0x428>)
 8002ada:	f7fd fe6b 	bl	80007b4 <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fd fffd 	bl	8000ae4 <__aeabi_d2f>
 8002aea:	4603      	mov	r3, r0
 8002aec:	61fb      	str	r3, [r7, #28]
		int x1 = cos(angleRad) * radius1 + xC;
 8002aee:	69f8      	ldr	r0, [r7, #28]
 8002af0:	f7fd fcde 	bl	80004b0 <__aeabi_f2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	ec43 2b10 	vmov	d0, r2, r3
 8002afc:	f003 f828 	bl	8005b50 <cos>
 8002b00:	ec55 4b10 	vmov	r4, r5, d0
 8002b04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fcbf 	bl	800048c <__aeabi_i2d>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7fd fd23 	bl	8000560 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	4bb5      	ldr	r3, [pc, #724]	@ (8002dfc <DrawClock+0x42c>)
 8002b28:	f7fd fb64 	bl	80001f4 <__adddf3>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fd ffae 	bl	8000a94 <__aeabi_d2iz>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	61bb      	str	r3, [r7, #24]
		int y1 = sin(angleRad) * radius1 + yC;
 8002b3c:	69f8      	ldr	r0, [r7, #28]
 8002b3e:	f7fd fcb7 	bl	80004b0 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	ec43 2b10 	vmov	d0, r2, r3
 8002b4a:	f003 f855 	bl	8005bf8 <sin>
 8002b4e:	ec55 4b10 	vmov	r4, r5, d0
 8002b52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fc98 	bl	800048c <__aeabi_i2d>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4620      	mov	r0, r4
 8002b62:	4629      	mov	r1, r5
 8002b64:	f7fd fcfc 	bl	8000560 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4ba1      	ldr	r3, [pc, #644]	@ (8002dfc <DrawClock+0x42c>)
 8002b76:	f7fd fb3d 	bl	80001f4 <__adddf3>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ff87 	bl	8000a94 <__aeabi_d2iz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	617b      	str	r3, [r7, #20]
		int x2 = cos(angleRad) * radius2 + xC;
 8002b8a:	69f8      	ldr	r0, [r7, #28]
 8002b8c:	f7fd fc90 	bl	80004b0 <__aeabi_f2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	ec43 2b10 	vmov	d0, r2, r3
 8002b98:	f002 ffda 	bl	8005b50 <cos>
 8002b9c:	ec55 4b10 	vmov	r4, r5, d0
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fc71 	bl	800048c <__aeabi_i2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd fcd5 	bl	8000560 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b8e      	ldr	r3, [pc, #568]	@ (8002dfc <DrawClock+0x42c>)
 8002bc4:	f7fd fb16 	bl	80001f4 <__adddf3>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7fd ff60 	bl	8000a94 <__aeabi_d2iz>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	613b      	str	r3, [r7, #16]
		int y2 = sin(angleRad) * radius2 + yC;
 8002bd8:	69f8      	ldr	r0, [r7, #28]
 8002bda:	f7fd fc69 	bl	80004b0 <__aeabi_f2d>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	ec43 2b10 	vmov	d0, r2, r3
 8002be6:	f003 f807 	bl	8005bf8 <sin>
 8002bea:	ec55 4b10 	vmov	r4, r5, d0
 8002bee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc4a 	bl	800048c <__aeabi_i2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f7fd fcae 	bl	8000560 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b7a      	ldr	r3, [pc, #488]	@ (8002dfc <DrawClock+0x42c>)
 8002c12:	f7fd faef 	bl	80001f4 <__adddf3>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd ff39 	bl	8000a94 <__aeabi_d2iz>
 8002c22:	4603      	mov	r3, r0
 8002c24:	60fb      	str	r3, [r7, #12]

		GC9A01_DrawLine(x1, y1, x2, y2, riskColor);
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	b218      	sxth	r0, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	b219      	sxth	r1, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	b21a      	sxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	b21c      	sxth	r4, r3
 8002c36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	f7fe fea6 	bl	800198e <GC9A01_DrawLine>
	for (uint16_t angle = 0; angle <= 360; angle += 6) {
 8002c42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002c44:	3306      	adds	r3, #6
 8002c46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002c48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002c4a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002c4e:	f67f aeff 	bls.w	8002a50 <DrawClock+0x80>
	}


	GC9A01_print( 165, 30, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "1" );
 8002c52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002c56:	4b6a      	ldr	r3, [pc, #424]	@ (8002e00 <DrawClock+0x430>)
 8002c58:	9303      	str	r3, [sp, #12]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	9302      	str	r3, [sp, #8]
 8002c5e:	4b69      	ldr	r3, [pc, #420]	@ (8002e04 <DrawClock+0x434>)
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	234c      	movs	r3, #76	@ 0x4c
 8002c68:	211e      	movs	r1, #30
 8002c6a:	20a5      	movs	r0, #165	@ 0xa5
 8002c6c:	f7ff f9fe 	bl	800206c <GC9A01_print>
	GC9A01_print( 200, 63, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "2" );
 8002c70:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002c74:	4b64      	ldr	r3, [pc, #400]	@ (8002e08 <DrawClock+0x438>)
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	4b61      	ldr	r3, [pc, #388]	@ (8002e04 <DrawClock+0x434>)
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	234c      	movs	r3, #76	@ 0x4c
 8002c86:	213f      	movs	r1, #63	@ 0x3f
 8002c88:	20c8      	movs	r0, #200	@ 0xc8
 8002c8a:	f7ff f9ef 	bl	800206c <GC9A01_print>
	GC9A01_print( 207, 110, digitColor , RGB565(0, 10, 100) , 0, &Font_16x26, 1, "3" );
 8002c8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002c92:	4b5e      	ldr	r3, [pc, #376]	@ (8002e0c <DrawClock+0x43c>)
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	2301      	movs	r3, #1
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e10 <DrawClock+0x440>)
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	234c      	movs	r3, #76	@ 0x4c
 8002ca4:	216e      	movs	r1, #110	@ 0x6e
 8002ca6:	20cf      	movs	r0, #207	@ 0xcf
 8002ca8:	f7ff f9e0 	bl	800206c <GC9A01_print>
	GC9A01_print( 200, 160, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "4" );
 8002cac:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002cb0:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <DrawClock+0x444>)
 8002cb2:	9303      	str	r3, [sp, #12]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	4b52      	ldr	r3, [pc, #328]	@ (8002e04 <DrawClock+0x434>)
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	234c      	movs	r3, #76	@ 0x4c
 8002cc2:	21a0      	movs	r1, #160	@ 0xa0
 8002cc4:	20c8      	movs	r0, #200	@ 0xc8
 8002cc6:	f7ff f9d1 	bl	800206c <GC9A01_print>
	GC9A01_print( 165, 193, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "5" );
 8002cca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002cce:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <DrawClock+0x448>)
 8002cd0:	9303      	str	r3, [sp, #12]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <DrawClock+0x434>)
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	234c      	movs	r3, #76	@ 0x4c
 8002ce0:	21c1      	movs	r1, #193	@ 0xc1
 8002ce2:	20a5      	movs	r0, #165	@ 0xa5
 8002ce4:	f7ff f9c2 	bl	800206c <GC9A01_print>
	GC9A01_print( 110, 200, digitColor , RGB565(0, 10, 100) , 0, &Font_16x26, 1, "6" );
 8002ce8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002cec:	4b4b      	ldr	r3, [pc, #300]	@ (8002e1c <DrawClock+0x44c>)
 8002cee:	9303      	str	r3, [sp, #12]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	4b46      	ldr	r3, [pc, #280]	@ (8002e10 <DrawClock+0x440>)
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	234c      	movs	r3, #76	@ 0x4c
 8002cfe:	21c8      	movs	r1, #200	@ 0xc8
 8002d00:	206e      	movs	r0, #110	@ 0x6e
 8002d02:	f7ff f9b3 	bl	800206c <GC9A01_print>
	GC9A01_print( 65, 193, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "7" );
 8002d06:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002d0a:	4b45      	ldr	r3, [pc, #276]	@ (8002e20 <DrawClock+0x450>)
 8002d0c:	9303      	str	r3, [sp, #12]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	4b3c      	ldr	r3, [pc, #240]	@ (8002e04 <DrawClock+0x434>)
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	234c      	movs	r3, #76	@ 0x4c
 8002d1c:	21c1      	movs	r1, #193	@ 0xc1
 8002d1e:	2041      	movs	r0, #65	@ 0x41
 8002d20:	f7ff f9a4 	bl	800206c <GC9A01_print>
	GC9A01_print( 32, 160, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "8" );
 8002d24:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002d28:	4b3e      	ldr	r3, [pc, #248]	@ (8002e24 <DrawClock+0x454>)
 8002d2a:	9303      	str	r3, [sp, #12]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	4b34      	ldr	r3, [pc, #208]	@ (8002e04 <DrawClock+0x434>)
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	2300      	movs	r3, #0
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	234c      	movs	r3, #76	@ 0x4c
 8002d3a:	21a0      	movs	r1, #160	@ 0xa0
 8002d3c:	2020      	movs	r0, #32
 8002d3e:	f7ff f995 	bl	800206c <GC9A01_print>
	GC9A01_print( 19, 110, digitColor , RGB565(0, 10, 100) , 0, &Font_16x26, 1, "9" );
 8002d42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002d46:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <DrawClock+0x458>)
 8002d48:	9303      	str	r3, [sp, #12]
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	9302      	str	r3, [sp, #8]
 8002d4e:	4b30      	ldr	r3, [pc, #192]	@ (8002e10 <DrawClock+0x440>)
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	234c      	movs	r3, #76	@ 0x4c
 8002d58:	216e      	movs	r1, #110	@ 0x6e
 8002d5a:	2013      	movs	r0, #19
 8002d5c:	f7ff f986 	bl	800206c <GC9A01_print>
	GC9A01_print( 32, 63, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "10" );
 8002d60:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002d64:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <DrawClock+0x45c>)
 8002d66:	9303      	str	r3, [sp, #12]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <DrawClock+0x434>)
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	234c      	movs	r3, #76	@ 0x4c
 8002d76:	213f      	movs	r1, #63	@ 0x3f
 8002d78:	2020      	movs	r0, #32
 8002d7a:	f7ff f977 	bl	800206c <GC9A01_print>
	GC9A01_print( 65, 30, digitColor , RGB565(0, 10, 100) , 0, &Font_11x18, 1, "11" );
 8002d7e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002d82:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <DrawClock+0x460>)
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	2301      	movs	r3, #1
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <DrawClock+0x434>)
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	234c      	movs	r3, #76	@ 0x4c
 8002d94:	211e      	movs	r1, #30
 8002d96:	2041      	movs	r0, #65	@ 0x41
 8002d98:	f7ff f968 	bl	800206c <GC9A01_print>
	GC9A01_print( 106, 20, digitColor , RGB565(0, 10, 100) , 0, &Font_16x26, 1, "12" );
 8002d9c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002da0:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <DrawClock+0x464>)
 8002da2:	9303      	str	r3, [sp, #12]
 8002da4:	2301      	movs	r3, #1
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <DrawClock+0x440>)
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	234c      	movs	r3, #76	@ 0x4c
 8002db2:	2114      	movs	r1, #20
 8002db4:	206a      	movs	r0, #106	@ 0x6a
 8002db6:	f7ff f959 	bl	800206c <GC9A01_print>

	DrawArrow(min * 6 + sec / 10, 80, 2, arrowColor);
 8002dba:	79bb      	ldrb	r3, [r7, #6]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	0052      	lsls	r2, r2, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	797a      	ldrb	r2, [r7, #5]
 8002dca:	491b      	ldr	r1, [pc, #108]	@ (8002e38 <DrawClock+0x468>)
 8002dcc:	fba1 1202 	umull	r1, r2, r1, r2
 8002dd0:	08d2      	lsrs	r2, r2, #3
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b218      	sxth	r0, r3
 8002dda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002dde:	2202      	movs	r2, #2
 8002de0:	2150      	movs	r1, #80	@ 0x50
 8002de2:	f7ff fd5d 	bl	80028a0 <DrawArrow>

	DrawArrow(hour * 30 + min / 2, 50, 4, arrowColor);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	e028      	b.n	8002e44 <DrawClock+0x474>
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	40668000 	.word	0x40668000
 8002dfc:	405e0000 	.word	0x405e0000
 8002e00:	08006c70 	.word	0x08006c70
 8002e04:	20000000 	.word	0x20000000
 8002e08:	08006c74 	.word	0x08006c74
 8002e0c:	08006c78 	.word	0x08006c78
 8002e10:	20000008 	.word	0x20000008
 8002e14:	08006c7c 	.word	0x08006c7c
 8002e18:	08006c80 	.word	0x08006c80
 8002e1c:	08006c84 	.word	0x08006c84
 8002e20:	08006c88 	.word	0x08006c88
 8002e24:	08006c8c 	.word	0x08006c8c
 8002e28:	08006c90 	.word	0x08006c90
 8002e2c:	08006c94 	.word	0x08006c94
 8002e30:	08006c98 	.word	0x08006c98
 8002e34:	08006c9c 	.word	0x08006c9c
 8002e38:	cccccccd 	.word	0xcccccccd
 8002e3c:	53c8d4f1 	.word	0x53c8d4f1
 8002e40:	400921fb 	.word	0x400921fb
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	79ba      	ldrb	r2, [r7, #6]
 8002e4a:	0852      	lsrs	r2, r2, #1
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	4413      	add	r3, r2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b218      	sxth	r0, r3
 8002e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002e58:	2204      	movs	r2, #4
 8002e5a:	2132      	movs	r1, #50	@ 0x32
 8002e5c:	f7ff fd20 	bl	80028a0 <DrawArrow>

	if (!sec)
 8002e60:	797b      	ldrb	r3, [r7, #5]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <DrawClock+0x49a>
		sec = 60;
 8002e66:	233c      	movs	r3, #60	@ 0x3c
 8002e68:	717b      	strb	r3, [r7, #5]
	if (secBubbles) {
 8002e6a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8097 	beq.w	8002fa2 <DrawClock+0x5d2>
		int16_t startAngle = -90;
 8002e74:	f64f 73a6 	movw	r3, #65446	@ 0xffa6
 8002e78:	86bb      	strh	r3, [r7, #52]	@ 0x34
		int16_t endAngle = sec * 6 - 90;
 8002e7a:	797b      	ldrb	r3, [r7, #5]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	0052      	lsls	r2, r2, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b5a      	subs	r3, #90	@ 0x5a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	867b      	strh	r3, [r7, #50]	@ 0x32

		for (int16_t angle = startAngle; angle <= endAngle; angle += 6) {
 8002e8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e90:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002e92:	e07e      	b.n	8002f92 <DrawClock+0x5c2>
			float angleRad = (float) angle * PI / 180;
 8002e94:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea0:	ee17 0a90 	vmov	r0, s15
 8002ea4:	f7fd fb04 	bl	80004b0 <__aeabi_f2d>
 8002ea8:	a34f      	add	r3, pc, #316	@ (adr r3, 8002fe8 <DrawClock+0x618>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fb57 	bl	8000560 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b48      	ldr	r3, [pc, #288]	@ (8002fe0 <DrawClock+0x610>)
 8002ec0:	f7fd fc78 	bl	80007b4 <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd fe0a 	bl	8000ae4 <__aeabi_d2f>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			int x = cos(angleRad) * 119 + xC;
 8002ed4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ed6:	f7fd faeb 	bl	80004b0 <__aeabi_f2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	ec43 2b10 	vmov	d0, r2, r3
 8002ee2:	f002 fe35 	bl	8005b50 <cos>
 8002ee6:	ec51 0b10 	vmov	r0, r1, d0
 8002eea:	a33b      	add	r3, pc, #236	@ (adr r3, 8002fd8 <DrawClock+0x608>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f7fd fb36 	bl	8000560 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <DrawClock+0x614>)
 8002f02:	f7fd f977 	bl	80001f4 <__adddf3>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fdc1 	bl	8000a94 <__aeabi_d2iz>
 8002f12:	4603      	mov	r3, r0
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
			int y = sin(angleRad) * 119 + yC;
 8002f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f18:	f7fd faca 	bl	80004b0 <__aeabi_f2d>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	ec43 2b10 	vmov	d0, r2, r3
 8002f24:	f002 fe68 	bl	8005bf8 <sin>
 8002f28:	ec51 0b10 	vmov	r0, r1, d0
 8002f2c:	a32a      	add	r3, pc, #168	@ (adr r3, 8002fd8 <DrawClock+0x608>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd fb15 	bl	8000560 <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <DrawClock+0x614>)
 8002f44:	f7fd f956 	bl	80001f4 <__adddf3>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f7fd fda0 	bl	8000a94 <__aeabi_d2iz>
 8002f54:	4603      	mov	r3, r0
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24

			if (angle == endAngle)
 8002f58:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8002f5c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d109      	bne.n	8002f78 <DrawClock+0x5a8>
				GC9A01_DrawCircleFilled(x, y, 4, secArcColor);
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	b218      	sxth	r0, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	b219      	sxth	r1, r3
 8002f6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f70:	2204      	movs	r2, #4
 8002f72:	f7fe fdbb 	bl	8001aec <GC9A01_DrawCircleFilled>
 8002f76:	e008      	b.n	8002f8a <DrawClock+0x5ba>
			else
				GC9A01_DrawCircleFilled(x, y, 2, secArcColor);
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	b218      	sxth	r0, r3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	b219      	sxth	r1, r3
 8002f80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f84:	2202      	movs	r2, #2
 8002f86:	f7fe fdb1 	bl	8001aec <GC9A01_DrawCircleFilled>
		for (int16_t angle = startAngle; angle <= endAngle; angle += 6) {
 8002f8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002f8c:	3306      	adds	r3, #6
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002f92:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8002f96:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	f77f af7a 	ble.w	8002e94 <DrawClock+0x4c4>
 8002fa0:	e013      	b.n	8002fca <DrawClock+0x5fa>
		}
	} else
		GC9A01_DrawArc(xC, yC, 119, 0, sec * 6, secArcColor, 2);
 8002fa2:	797b      	ldrb	r3, [r7, #5]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	0052      	lsls	r2, r2, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	9202      	str	r2, [sp, #8]
 8002fb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002fba:	9201      	str	r2, [sp, #4]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2277      	movs	r2, #119	@ 0x77
 8002fc2:	2178      	movs	r1, #120	@ 0x78
 8002fc4:	2078      	movs	r0, #120	@ 0x78
 8002fc6:	f7ff fa13 	bl	80023f0 <GC9A01_DrawArc>


	HAL_Delay(50);
 8002fca:	2032      	movs	r0, #50	@ 0x32
 8002fcc:	f000 fc6c 	bl	80038a8 <HAL_Delay>
}
 8002fd0:	bf00      	nop
 8002fd2:	3748      	adds	r7, #72	@ 0x48
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	405dc000 	.word	0x405dc000
 8002fe0:	40668000 	.word	0x40668000
 8002fe4:	405e0000 	.word	0x405e0000
 8002fe8:	53c8d4f1 	.word	0x53c8d4f1
 8002fec:	400921fb 	.word	0x400921fb

08002ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b08c      	sub	sp, #48	@ 0x30
 8002ff4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff6:	f000 fbe5 	bl	80037c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffa:	f000 f8df 	bl	80031bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ffe:	f000 fa01 	bl	8003404 <MX_GPIO_Init>
  MX_DMA_Init();
 8003002:	f000 f9d7 	bl	80033b4 <MX_DMA_Init>
  MX_RTC_Init();
 8003006:	f000 f945 	bl	8003294 <MX_RTC_Init>
  MX_SPI1_Init();
 800300a:	f000 f99d 	bl	8003348 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GC9A01_Init();
 800300e:	f7fd ff31 	bl	8000e74 <GC9A01_Init>
  GC9A01_rotation(3,0,0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	2003      	movs	r0, #3
 8003018:	f7ff f8ec 	bl	80021f4 <GC9A01_rotation>
  HAL_Delay (1000);
 800301c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003020:	f000 fc42 	bl	80038a8 <HAL_Delay>
    GC9A01_DrawChar( 120, 20, RGB565( 228, 233, 50 ) , RGB565( 0, 10, 10 ) , 0, &Font_16x26, 1, 'F' );
  	HAL_Delay (1000);
  	GC9A01_Clear();
  	GC9A01_DrawRectangleFilled(105, 105, 30, 30, RGB565(255, 255, 255)) ;
  	HAL_Delay (1000);*/
  	for( uint8_t i = 0; i< GC9A01_Width; i+=3){
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e034      	b.n	8003094 <main+0xa4>
  		GC9A01_DrawRectangleFilled(i, i, GC9A01_Width-i, GC9A01_Height-i, RGB565(i/2, 255-i, 0+i)) ;
 800302a:	7ffb      	ldrb	r3, [r7, #31]
 800302c:	b218      	sxth	r0, r3
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	b219      	sxth	r1, r3
 8003032:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <main+0x1a8>)
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	b29b      	uxth	r3, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b29b      	uxth	r3, r3
 800303e:	b21c      	sxth	r4, r3
 8003040:	4b56      	ldr	r3, [pc, #344]	@ (800319c <main+0x1ac>)
 8003042:	881a      	ldrh	r2, [r3, #0]
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	b29b      	uxth	r3, r3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	b21d      	sxth	r5, r3
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	b21b      	sxth	r3, r3
 8003058:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	b21a      	sxth	r2, r3
 8003062:	7ffb      	ldrb	r3, [r7, #31]
 8003064:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	b21b      	sxth	r3, r3
 800306c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003070:	b21b      	sxth	r3, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	b21a      	sxth	r2, r3
 8003076:	7ffb      	ldrb	r3, [r7, #31]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	b21b      	sxth	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	b21b      	sxth	r3, r3
 8003082:	b29b      	uxth	r3, r3
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	462b      	mov	r3, r5
 8003088:	4622      	mov	r2, r4
 800308a:	f7fe fbb6 	bl	80017fa <GC9A01_DrawRectangleFilled>
  	for( uint8_t i = 0; i< GC9A01_Width; i+=3){
 800308e:	7ffb      	ldrb	r3, [r7, #31]
 8003090:	3303      	adds	r3, #3
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	7ffb      	ldrb	r3, [r7, #31]
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b3f      	ldr	r3, [pc, #252]	@ (8003198 <main+0x1a8>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d3c4      	bcc.n	800302a <main+0x3a>
  	}

  	for( uint8_t i = 0; i< GC9A01_Width/2; i+=3){
 80030a0:	2300      	movs	r3, #0
 80030a2:	77bb      	strb	r3, [r7, #30]
 80030a4:	e01a      	b.n	80030dc <main+0xec>
  		GC9A01_DrawRectangle(i, i, GC9A01_Width-i, GC9A01_Height-i, RGB565(255, 0, 0)) ;
 80030a6:	7fbb      	ldrb	r3, [r7, #30]
 80030a8:	b218      	sxth	r0, r3
 80030aa:	7fbb      	ldrb	r3, [r7, #30]
 80030ac:	b219      	sxth	r1, r3
 80030ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003198 <main+0x1a8>)
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	7fbb      	ldrb	r3, [r7, #30]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	b21c      	sxth	r4, r3
 80030bc:	4b37      	ldr	r3, [pc, #220]	@ (800319c <main+0x1ac>)
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	7fbb      	ldrb	r3, [r7, #30]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80030ce:	9200      	str	r2, [sp, #0]
 80030d0:	4622      	mov	r2, r4
 80030d2:	f7fe fb35 	bl	8001740 <GC9A01_DrawRectangle>
  	for( uint8_t i = 0; i< GC9A01_Width/2; i+=3){
 80030d6:	7fbb      	ldrb	r3, [r7, #30]
 80030d8:	3303      	adds	r3, #3
 80030da:	77bb      	strb	r3, [r7, #30]
 80030dc:	7fbb      	ldrb	r3, [r7, #30]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003198 <main+0x1a8>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3dc      	bcc.n	80030a6 <main+0xb6>
  	}
  	HAL_Delay (1000);
 80030ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030f0:	f000 fbda 	bl	80038a8 <HAL_Delay>
  	GC9A01_Clear();
 80030f4:	f7fe f9e2 	bl	80014bc <GC9A01_Clear>

  	HAL_Delay (1000);

  	GC9A01_Clear();*/

  	GC9A01_DrawCircle(120-1, 120-1, 115, RGB565(255, 0, 255));
 80030f8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80030fc:	2273      	movs	r2, #115	@ 0x73
 80030fe:	2177      	movs	r1, #119	@ 0x77
 8003100:	2077      	movs	r0, #119	@ 0x77
 8003102:	f7fe fd8e 	bl	8001c22 <GC9A01_DrawCircle>
//    GC9A01_print( 40, 80, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_16x26, 2, "Adham" );
//    GC9A01_print( 40, 140, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, "You idiot!" );

    GC9A01_print( 90, 80, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_16x26, 2, "Hi" );
 8003106:	4b26      	ldr	r3, [pc, #152]	@ (80031a0 <main+0x1b0>)
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	2302      	movs	r3, #2
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <main+0x1b4>)
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2301      	movs	r3, #1
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	234c      	movs	r3, #76	@ 0x4c
 8003118:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800311c:	2150      	movs	r1, #80	@ 0x50
 800311e:	205a      	movs	r0, #90	@ 0x5a
 8003120:	f7fe ffa4 	bl	800206c <GC9A01_print>
    GC9A01_print( 70, 140, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, "There!" );
 8003124:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <main+0x1b8>)
 8003126:	9303      	str	r3, [sp, #12]
 8003128:	2301      	movs	r3, #1
 800312a:	9302      	str	r3, [sp, #8]
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <main+0x1b4>)
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2301      	movs	r3, #1
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	234c      	movs	r3, #76	@ 0x4c
 8003136:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800313a:	218c      	movs	r1, #140	@ 0x8c
 800313c:	2046      	movs	r0, #70	@ 0x46
 800313e:	f7fe ff95 	bl	800206c <GC9A01_print>

  	HAL_Delay (1000);
 8003142:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003146:	f000 fbaf 	bl	80038a8 <HAL_Delay>
  {
    /* USER CODE END WHILE */
	  RTC_DateTypeDef gDate;
	  		RTC_TimeTypeDef gTime;

	  		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	2200      	movs	r2, #0
 800314e:	4619      	mov	r1, r3
 8003150:	4816      	ldr	r0, [pc, #88]	@ (80031ac <main+0x1bc>)
 8003152:	f002 f81c 	bl	800518e <HAL_RTC_GetTime>
	  		  /* Get the RTC current Date */
	  		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003156:	f107 0318 	add.w	r3, r7, #24
 800315a:	2200      	movs	r2, #0
 800315c:	4619      	mov	r1, r3
 800315e:	4813      	ldr	r0, [pc, #76]	@ (80031ac <main+0x1bc>)
 8003160:	f002 f8f7 	bl	8005352 <HAL_RTC_GetDate>

	  		    ss=gTime.Seconds;
 8003164:	79ba      	ldrb	r2, [r7, #6]
 8003166:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <main+0x1c0>)
 8003168:	701a      	strb	r2, [r3, #0]
	  		    mm=gTime.Minutes;
 800316a:	797a      	ldrb	r2, [r7, #5]
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <main+0x1c4>)
 800316e:	701a      	strb	r2, [r3, #0]
	  		    hh=gTime.Hours;
 8003170:	793a      	ldrb	r2, [r7, #4]
 8003172:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <main+0x1c8>)
 8003174:	701a      	strb	r2, [r3, #0]

	  //		for( uint8_t i = 0; i < 60; i++ ){
	  			DrawClock(hh, mm, ss, 0, 0);
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <main+0x1c8>)
 8003178:	7818      	ldrb	r0, [r3, #0]
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <main+0x1c4>)
 800317c:	7819      	ldrb	r1, [r3, #0]
 800317e:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <main+0x1c0>)
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	2300      	movs	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	f7ff fc22 	bl	80029d0 <DrawClock>
	  			HAL_Delay( 1000 );
 800318c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003190:	f000 fb8a 	bl	80038a8 <HAL_Delay>
  {
 8003194:	bf00      	nop
 8003196:	e7d8      	b.n	800314a <main+0x15a>
 8003198:	2000003c 	.word	0x2000003c
 800319c:	2000003e 	.word	0x2000003e
 80031a0:	08006ca0 	.word	0x08006ca0
 80031a4:	20000008 	.word	0x20000008
 80031a8:	08006ca4 	.word	0x08006ca4
 80031ac:	20000044 	.word	0x20000044
 80031b0:	20000042 	.word	0x20000042
 80031b4:	20000041 	.word	0x20000041
 80031b8:	20000040 	.word	0x20000040

080031bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b094      	sub	sp, #80	@ 0x50
 80031c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031c2:	f107 0320 	add.w	r3, r7, #32
 80031c6:	2230      	movs	r2, #48	@ 0x30
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 fc94 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	4b29      	ldr	r3, [pc, #164]	@ (800328c <SystemClock_Config+0xd0>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4a28      	ldr	r2, [pc, #160]	@ (800328c <SystemClock_Config+0xd0>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f0:	4b26      	ldr	r3, [pc, #152]	@ (800328c <SystemClock_Config+0xd0>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80031fc:	2300      	movs	r3, #0
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <SystemClock_Config+0xd4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003208:	4a21      	ldr	r2, [pc, #132]	@ (8003290 <SystemClock_Config+0xd4>)
 800320a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <SystemClock_Config+0xd4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800321c:	230a      	movs	r3, #10
 800321e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003220:	2301      	movs	r3, #1
 8003222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003224:	2310      	movs	r3, #16
 8003226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003228:	2301      	movs	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800322c:	2302      	movs	r3, #2
 800322e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003230:	2300      	movs	r3, #0
 8003232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003234:	2308      	movs	r3, #8
 8003236:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003238:	2354      	movs	r3, #84	@ 0x54
 800323a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800323c:	2302      	movs	r3, #2
 800323e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003240:	2304      	movs	r3, #4
 8003242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003244:	f107 0320 	add.w	r3, r7, #32
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f971 	bl	8004530 <HAL_RCC_OscConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003254:	f000 f930 	bl	80034b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003258:	230f      	movs	r3, #15
 800325a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800325c:	2302      	movs	r3, #2
 800325e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003268:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f001 fbd3 	bl	8004a20 <HAL_RCC_ClockConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003280:	f000 f91a 	bl	80034b8 <Error_Handler>
  }
}
 8003284:	bf00      	nop
 8003286:	3750      	adds	r7, #80	@ 0x50
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000

08003294 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80032a8:	2300      	movs	r3, #0
 80032aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032ac:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <MX_RTC_Init+0xac>)
 80032ae:	4a25      	ldr	r2, [pc, #148]	@ (8003344 <MX_RTC_Init+0xb0>)
 80032b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032b2:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <MX_RTC_Init+0xac>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032b8:	4b21      	ldr	r3, [pc, #132]	@ (8003340 <MX_RTC_Init+0xac>)
 80032ba:	227f      	movs	r2, #127	@ 0x7f
 80032bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032be:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <MX_RTC_Init+0xac>)
 80032c0:	22ff      	movs	r2, #255	@ 0xff
 80032c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003340 <MX_RTC_Init+0xac>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <MX_RTC_Init+0xac>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <MX_RTC_Init+0xac>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032d6:	481a      	ldr	r0, [pc, #104]	@ (8003340 <MX_RTC_Init+0xac>)
 80032d8:	f001 fe3c 	bl	8004f54 <HAL_RTC_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80032e2:	f000 f8e9 	bl	80034b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80032e6:	2312      	movs	r3, #18
 80032e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 80032ea:	2315      	movs	r3, #21
 80032ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	2201      	movs	r2, #1
 80032fe:	4619      	mov	r1, r3
 8003300:	480f      	ldr	r0, [pc, #60]	@ (8003340 <MX_RTC_Init+0xac>)
 8003302:	f001 feaa 	bl	800505a <HAL_RTC_SetTime>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800330c:	f000 f8d4 	bl	80034b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003310:	2301      	movs	r3, #1
 8003312:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003314:	2301      	movs	r3, #1
 8003316:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003318:	2301      	movs	r3, #1
 800331a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800331c:	2300      	movs	r3, #0
 800331e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003320:	463b      	mov	r3, r7
 8003322:	2201      	movs	r2, #1
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	@ (8003340 <MX_RTC_Init+0xac>)
 8003328:	f001 ff8f 	bl	800524a <HAL_RTC_SetDate>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003332:	f000 f8c1 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000044 	.word	0x20000044
 8003344:	40002800 	.word	0x40002800

08003348 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800334c:	4b17      	ldr	r3, [pc, #92]	@ (80033ac <MX_SPI1_Init+0x64>)
 800334e:	4a18      	ldr	r2, [pc, #96]	@ (80033b0 <MX_SPI1_Init+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003352:	4b16      	ldr	r3, [pc, #88]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003354:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800335a:	4b14      	ldr	r3, [pc, #80]	@ (80033ac <MX_SPI1_Init+0x64>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003366:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800336c:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <MX_SPI1_Init+0x64>)
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003372:	4b0e      	ldr	r3, [pc, #56]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003378:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800337a:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <MX_SPI1_Init+0x64>)
 800337c:	2200      	movs	r2, #0
 800337e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800338c:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <MX_SPI1_Init+0x64>)
 800338e:	2200      	movs	r2, #0
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <MX_SPI1_Init+0x64>)
 8003394:	220a      	movs	r2, #10
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003398:	4804      	ldr	r0, [pc, #16]	@ (80033ac <MX_SPI1_Init+0x64>)
 800339a:	f002 f8e7 	bl	800556c <HAL_SPI_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033a4:	f000 f888 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000064 	.word	0x20000064
 80033b0:	40013000 	.word	0x40013000

080033b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <MX_DMA_Init+0x4c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003400 <MX_DMA_Init+0x4c>)
 80033c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <MX_DMA_Init+0x4c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	2038      	movs	r0, #56	@ 0x38
 80033dc:	f000 fb63 	bl	8003aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80033e0:	2038      	movs	r0, #56	@ 0x38
 80033e2:	f000 fb7c 	bl	8003ade <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	203b      	movs	r0, #59	@ 0x3b
 80033ec:	f000 fb5b 	bl	8003aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80033f0:	203b      	movs	r0, #59	@ 0x3b
 80033f2:	f000 fb74 	bl	8003ade <HAL_NVIC_EnableIRQ>

}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4b23      	ldr	r3, [pc, #140]	@ (80034ac <MX_GPIO_Init+0xa8>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <MX_GPIO_Init+0xa8>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6313      	str	r3, [r2, #48]	@ 0x30
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <MX_GPIO_Init+0xa8>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ac <MX_GPIO_Init+0xa8>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	4a1b      	ldr	r2, [pc, #108]	@ (80034ac <MX_GPIO_Init+0xa8>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	6313      	str	r3, [r2, #48]	@ 0x30
 8003446:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <MX_GPIO_Init+0xa8>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8003452:	2200      	movs	r2, #0
 8003454:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003458:	4815      	ldr	r0, [pc, #84]	@ (80034b0 <MX_GPIO_Init+0xac>)
 800345a:	f001 f84f 	bl	80044fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	2140      	movs	r1, #64	@ 0x40
 8003462:	4814      	ldr	r0, [pc, #80]	@ (80034b4 <MX_GPIO_Init+0xb0>)
 8003464:	f001 f84a 	bl	80044fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8003468:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800346c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	4619      	mov	r1, r3
 8003480:	480b      	ldr	r0, [pc, #44]	@ (80034b0 <MX_GPIO_Init+0xac>)
 8003482:	f000 feb7 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8003486:	2340      	movs	r3, #64	@ 0x40
 8003488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348a:	2301      	movs	r3, #1
 800348c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	4619      	mov	r1, r3
 800349c:	4805      	ldr	r0, [pc, #20]	@ (80034b4 <MX_GPIO_Init+0xb0>)
 800349e:	f000 fea9 	bl	80041f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034a2:	bf00      	nop
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020400 	.word	0x40020400

080034b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034bc:	b672      	cpsid	i
}
 80034be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <Error_Handler+0x8>

080034c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_MspInit+0x4c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003510 <HAL_MspInit+0x4c>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_MspInit+0x4c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_MspInit+0x4c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	4a08      	ldr	r2, [pc, #32]	@ (8003510 <HAL_MspInit+0x4c>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_MspInit+0x4c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <HAL_RTC_MspInit+0x50>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d111      	bne.n	800355a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003536:	2302      	movs	r3, #2
 8003538:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800353a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800353e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fc17 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003550:	f7ff ffb2 	bl	80034b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RTC_MspInit+0x54>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800355a:	bf00      	nop
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40002800 	.word	0x40002800
 8003568:	42470e3c 	.word	0x42470e3c

0800356c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a47      	ldr	r2, [pc, #284]	@ (80036a8 <HAL_SPI_MspInit+0x13c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	f040 8088 	bne.w	80036a0 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	4b45      	ldr	r3, [pc, #276]	@ (80036ac <HAL_SPI_MspInit+0x140>)
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	4a44      	ldr	r2, [pc, #272]	@ (80036ac <HAL_SPI_MspInit+0x140>)
 800359a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800359e:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a0:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <HAL_SPI_MspInit+0x140>)
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	4b3e      	ldr	r3, [pc, #248]	@ (80036ac <HAL_SPI_MspInit+0x140>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	4a3d      	ldr	r2, [pc, #244]	@ (80036ac <HAL_SPI_MspInit+0x140>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80035bc:	4b3b      	ldr	r3, [pc, #236]	@ (80036ac <HAL_SPI_MspInit+0x140>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035c8:	23e0      	movs	r3, #224	@ 0xe0
 80035ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035d8:	2305      	movs	r3, #5
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	4833      	ldr	r0, [pc, #204]	@ (80036b0 <HAL_SPI_MspInit+0x144>)
 80035e4:	f000 fe06 	bl	80041f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035e8:	4b32      	ldr	r3, [pc, #200]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 80035ea:	4a33      	ldr	r2, [pc, #204]	@ (80036b8 <HAL_SPI_MspInit+0x14c>)
 80035ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035ee:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 80035f0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f6:	4b2f      	ldr	r3, [pc, #188]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fc:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003602:	4b2c      	ldr	r3, [pc, #176]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 8003604:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003608:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360a:	4b2a      	ldr	r3, [pc, #168]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003610:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 8003612:	2200      	movs	r2, #0
 8003614:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003616:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 8003618:	2200      	movs	r2, #0
 800361a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800361c:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 800361e:	2200      	movs	r2, #0
 8003620:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003622:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 8003624:	2200      	movs	r2, #0
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003628:	4822      	ldr	r0, [pc, #136]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 800362a:	f000 fa73 	bl	8003b14 <HAL_DMA_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003634:	f7ff ff40 	bl	80034b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a1e      	ldr	r2, [pc, #120]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 800363c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800363e:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_SPI_MspInit+0x148>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003644:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003646:	4a1e      	ldr	r2, [pc, #120]	@ (80036c0 <HAL_SPI_MspInit+0x154>)
 8003648:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800364a:	4b1c      	ldr	r3, [pc, #112]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 800364c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003650:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003652:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003658:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003664:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800366c:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003674:	2200      	movs	r2, #0
 8003676:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003678:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 800367a:	2200      	movs	r2, #0
 800367c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003680:	2200      	movs	r2, #0
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003684:	480d      	ldr	r0, [pc, #52]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003686:	f000 fa45 	bl	8003b14 <HAL_DMA_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003690:	f7ff ff12 	bl	80034b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 8003698:	649a      	str	r2, [r3, #72]	@ 0x48
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <HAL_SPI_MspInit+0x150>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80036a0:	bf00      	nop
 80036a2:	3728      	adds	r7, #40	@ 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013000 	.word	0x40013000
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40020000 	.word	0x40020000
 80036b4:	200000bc 	.word	0x200000bc
 80036b8:	40026410 	.word	0x40026410
 80036bc:	2000011c 	.word	0x2000011c
 80036c0:	40026458 	.word	0x40026458

080036c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <NMI_Handler+0x4>

080036cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <HardFault_Handler+0x4>

080036d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <MemManage_Handler+0x4>

080036dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <BusFault_Handler+0x4>

080036e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <UsageFault_Handler+0x4>

080036ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800371a:	f000 f8a5 	bl	8003868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003728:	4802      	ldr	r0, [pc, #8]	@ (8003734 <DMA2_Stream0_IRQHandler+0x10>)
 800372a:	f000 faf9 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200000bc 	.word	0x200000bc

08003738 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800373c:	4802      	ldr	r0, [pc, #8]	@ (8003748 <DMA2_Stream3_IRQHandler+0x10>)
 800373e:	f000 faef 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	2000011c 	.word	0x2000011c

0800374c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <SystemInit+0x20>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	4a05      	ldr	r2, [pc, #20]	@ (800376c <SystemInit+0x20>)
 8003758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800375c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003774:	f7ff ffea 	bl	800374c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003778:	480c      	ldr	r0, [pc, #48]	@ (80037ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800377a:	490d      	ldr	r1, [pc, #52]	@ (80037b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800377e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003780:	e002      	b.n	8003788 <LoopCopyDataInit>

08003782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003786:	3304      	adds	r3, #4

08003788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800378c:	d3f9      	bcc.n	8003782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378e:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003790:	4c0a      	ldr	r4, [pc, #40]	@ (80037bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003794:	e001      	b.n	800379a <LoopFillZerobss>

08003796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003798:	3204      	adds	r2, #4

0800379a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800379c:	d3fb      	bcc.n	8003796 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800379e:	f002 f9b3 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a2:	f7ff fc25 	bl	8002ff0 <main>
  bx  lr    
 80037a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80037ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80037b4:	0800a870 	.word	0x0800a870
  ldr r2, =_sbss
 80037b8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80037bc:	20000180 	.word	0x20000180

080037c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c0:	e7fe      	b.n	80037c0 <ADC_IRQHandler>
	...

080037c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <HAL_Init+0x40>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <HAL_Init+0x40>)
 80037ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_Init+0x40>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003804 <HAL_Init+0x40>)
 80037da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a07      	ldr	r2, [pc, #28]	@ (8003804 <HAL_Init+0x40>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ec:	2003      	movs	r0, #3
 80037ee:	f000 f94f 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f2:	200f      	movs	r0, #15
 80037f4:	f000 f808 	bl	8003808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f8:	f7ff fe64 	bl	80034c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_InitTick+0x54>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_InitTick+0x58>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800381e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f967 	bl	8003afa <HAL_SYSTICK_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00e      	b.n	8003854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b0f      	cmp	r3, #15
 800383a:	d80a      	bhi.n	8003852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383c:	2200      	movs	r2, #0
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f000 f92f 	bl	8003aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003848:	4a06      	ldr	r2, [pc, #24]	@ (8003864 <HAL_InitTick+0x5c>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000010 	.word	0x20000010
 8003860:	20000018 	.word	0x20000018
 8003864:	20000014 	.word	0x20000014

08003868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_IncTick+0x20>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_IncTick+0x24>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4413      	add	r3, r2
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_IncTick+0x24>)
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000018 	.word	0x20000018
 800388c:	2000017c 	.word	0x2000017c

08003890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_GetTick+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000017c 	.word	0x2000017c

080038a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7ff ffee 	bl	8003890 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d005      	beq.n	80038ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038c2:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <HAL_Delay+0x44>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ce:	bf00      	nop
 80038d0:	f7ff ffde 	bl	8003890 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d8f7      	bhi.n	80038d0 <HAL_Delay+0x28>
  {
  }
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000018 	.word	0x20000018

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4907      	ldr	r1, [pc, #28]	@ (800398c <__NVIC_EnableIRQ+0x38>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000e100 	.word	0xe000e100

08003990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db0a      	blt.n	80039ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <__NVIC_SetPriority+0x4c>)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	440b      	add	r3, r1
 80039b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b8:	e00a      	b.n	80039d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	4908      	ldr	r1, [pc, #32]	@ (80039e0 <__NVIC_SetPriority+0x50>)
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3b04      	subs	r3, #4
 80039c8:	0112      	lsls	r2, r2, #4
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	440b      	add	r3, r1
 80039ce:	761a      	strb	r2, [r3, #24]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000e100 	.word	0xe000e100
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	bf28      	it	cs
 8003a02:	2304      	movcs	r3, #4
 8003a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d902      	bls.n	8003a14 <NVIC_EncodePriority+0x30>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3b03      	subs	r3, #3
 8003a12:	e000      	b.n	8003a16 <NVIC_EncodePriority+0x32>
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	401a      	ands	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	43d9      	mvns	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	4313      	orrs	r3, r2
         );
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d301      	bcc.n	8003a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <SysTick_Config+0x40>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f7ff ff8e 	bl	8003990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <SysTick_Config+0x40>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7a:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <SysTick_Config+0x40>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010

08003a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff29 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab8:	f7ff ff3e 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff8e 	bl	80039e4 <NVIC_EncodePriority>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5d 	bl	8003990 <__NVIC_SetPriority>
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff31 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffa2 	bl	8003a4c <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff feb6 	bl	8003890 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e099      	b.n	8003c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b50:	e00f      	b.n	8003b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b52:	f7ff fe9d 	bl	8003890 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d908      	bls.n	8003b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e078      	b.n	8003c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e8      	bne.n	8003b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <HAL_DMA_Init+0x158>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d107      	bne.n	8003bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d117      	bne.n	8003c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fa6f 	bl	80040fc <DMA_CheckFifoParam>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c32:	2301      	movs	r3, #1
 8003c34:	e016      	b.n	8003c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa26 	bl	8004090 <DMA_CalcBaseAndBitshift>
 8003c44:	4603      	mov	r3, r0
 8003c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	223f      	movs	r2, #63	@ 0x3f
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	f010803f 	.word	0xf010803f

08003c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_DMA_Start_IT+0x26>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e040      	b.n	8003d18 <HAL_DMA_Start_IT+0xa8>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d12f      	bne.n	8003d0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9b8 	bl	8004034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	223f      	movs	r2, #63	@ 0x3f
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0216 	orr.w	r2, r2, #22
 8003cde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0208 	orr.w	r2, r2, #8
 8003cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e005      	b.n	8003d16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003f68 <HAL_DMA_IRQHandler+0x248>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a8e      	ldr	r2, [pc, #568]	@ (8003f6c <HAL_DMA_IRQHandler+0x24c>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a9b      	lsrs	r3, r3, #10
 8003d38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01a      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	2208      	movs	r2, #8
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	2201      	movs	r2, #1
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d012      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	2204      	movs	r2, #4
 8003de6:	409a      	lsls	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d043      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d03c      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d024      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e01f      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
 8003e60:	e016      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d107      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0208 	bic.w	r2, r2, #8
 8003e7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	2220      	movs	r2, #32
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 808f 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8087 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d136      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0216 	bic.w	r2, r2, #22
 8003ed8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_DMA_IRQHandler+0x1da>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0208 	bic.w	r2, r2, #8
 8003f08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	223f      	movs	r2, #63	@ 0x3f
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d07e      	beq.n	800402c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
        }
        return;
 8003f36:	e079      	b.n	800402c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d031      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e02c      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
 8003f66:	bf00      	nop
 8003f68:	20000010 	.word	0x20000010
 8003f6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	e01e      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0210 	bic.w	r2, r2, #16
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d032      	beq.n	800402e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2205      	movs	r2, #5
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d307      	bcc.n	8004008 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f2      	bne.n	8003fec <HAL_DMA_IRQHandler+0x2cc>
 8004006:	e000      	b.n	800400a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004008:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
 800402a:	e000      	b.n	800402e <HAL_DMA_IRQHandler+0x30e>
        return;
 800402c:	bf00      	nop
    }
  }
}
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d108      	bne.n	8004074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004072:	e007      	b.n	8004084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3b10      	subs	r3, #16
 80040a0:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x64>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040aa:	4a13      	ldr	r2, [pc, #76]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x68>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d909      	bls.n	80040d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80040d0:	e007      	b.n	80040e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	aaaaaaab 	.word	0xaaaaaaab
 80040f8:	0800a67c 	.word	0x0800a67c

080040fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11f      	bne.n	8004156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d856      	bhi.n	80041ca <DMA_CheckFifoParam+0xce>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <DMA_CheckFifoParam+0x28>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004147 	.word	0x08004147
 800412c:	08004135 	.word	0x08004135
 8004130:	080041cb 	.word	0x080041cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d046      	beq.n	80041ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e043      	b.n	80041ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800414e:	d140      	bne.n	80041d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e03d      	b.n	80041d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800415e:	d121      	bne.n	80041a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d837      	bhi.n	80041d6 <DMA_CheckFifoParam+0xda>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <DMA_CheckFifoParam+0x70>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004183 	.word	0x08004183
 8004174:	0800417d 	.word	0x0800417d
 8004178:	08004195 	.word	0x08004195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e030      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004192:	e022      	b.n	80041da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800419c:	d11f      	bne.n	80041de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041a2:	e01c      	b.n	80041de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d903      	bls.n	80041b2 <DMA_CheckFifoParam+0xb6>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d003      	beq.n	80041b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041b0:	e018      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      break;
 80041b6:	e015      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e00b      	b.n	80041e2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ca:	bf00      	nop
 80041cc:	e00a      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e008      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e006      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
    }
  } 
  
  return status; 
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	@ 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e159      	b.n	80044c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004210:	2201      	movs	r2, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	429a      	cmp	r2, r3
 800422a:	f040 8148 	bne.w	80044be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d005      	beq.n	8004246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004242:	2b02      	cmp	r3, #2
 8004244:	d130      	bne.n	80042a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2203      	movs	r2, #3
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800427c:	2201      	movs	r2, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 0201 	and.w	r2, r3, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d017      	beq.n	80042e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2203      	movs	r2, #3
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d123      	bne.n	8004338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	08da      	lsrs	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	08da      	lsrs	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3208      	adds	r2, #8
 8004332:	69b9      	ldr	r1, [r7, #24]
 8004334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2203      	movs	r2, #3
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80a2 	beq.w	80044be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	4b57      	ldr	r3, [pc, #348]	@ (80044dc <HAL_GPIO_Init+0x2e8>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	4a56      	ldr	r2, [pc, #344]	@ (80044dc <HAL_GPIO_Init+0x2e8>)
 8004384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004388:	6453      	str	r3, [r2, #68]	@ 0x44
 800438a:	4b54      	ldr	r3, [pc, #336]	@ (80044dc <HAL_GPIO_Init+0x2e8>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004396:	4a52      	ldr	r2, [pc, #328]	@ (80044e0 <HAL_GPIO_Init+0x2ec>)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	3302      	adds	r3, #2
 800439e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	220f      	movs	r2, #15
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a49      	ldr	r2, [pc, #292]	@ (80044e4 <HAL_GPIO_Init+0x2f0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d019      	beq.n	80043f6 <HAL_GPIO_Init+0x202>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a48      	ldr	r2, [pc, #288]	@ (80044e8 <HAL_GPIO_Init+0x2f4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_GPIO_Init+0x1fe>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a47      	ldr	r2, [pc, #284]	@ (80044ec <HAL_GPIO_Init+0x2f8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00d      	beq.n	80043ee <HAL_GPIO_Init+0x1fa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a46      	ldr	r2, [pc, #280]	@ (80044f0 <HAL_GPIO_Init+0x2fc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <HAL_GPIO_Init+0x1f6>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a45      	ldr	r2, [pc, #276]	@ (80044f4 <HAL_GPIO_Init+0x300>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_GPIO_Init+0x1f2>
 80043e2:	2304      	movs	r3, #4
 80043e4:	e008      	b.n	80043f8 <HAL_GPIO_Init+0x204>
 80043e6:	2307      	movs	r3, #7
 80043e8:	e006      	b.n	80043f8 <HAL_GPIO_Init+0x204>
 80043ea:	2303      	movs	r3, #3
 80043ec:	e004      	b.n	80043f8 <HAL_GPIO_Init+0x204>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e002      	b.n	80043f8 <HAL_GPIO_Init+0x204>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_GPIO_Init+0x204>
 80043f6:	2300      	movs	r3, #0
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	f002 0203 	and.w	r2, r2, #3
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	4093      	lsls	r3, r2
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004408:	4935      	ldr	r1, [pc, #212]	@ (80044e0 <HAL_GPIO_Init+0x2ec>)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004416:	4b38      	ldr	r3, [pc, #224]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	43db      	mvns	r3, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800443a:	4a2f      	ldr	r2, [pc, #188]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004440:	4b2d      	ldr	r3, [pc, #180]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004464:	4a24      	ldr	r2, [pc, #144]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800446a:	4b23      	ldr	r3, [pc, #140]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800448e:	4a1a      	ldr	r2, [pc, #104]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004494:	4b18      	ldr	r3, [pc, #96]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b8:	4a0f      	ldr	r2, [pc, #60]	@ (80044f8 <HAL_GPIO_Init+0x304>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3301      	adds	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	f67f aea2 	bls.w	8004210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40020000 	.word	0x40020000
 80044e8:	40020400 	.word	0x40020400
 80044ec:	40020800 	.word	0x40020800
 80044f0:	40020c00 	.word	0x40020c00
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40013c00 	.word	0x40013c00

080044fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
 8004508:	4613      	mov	r3, r2
 800450a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800450c:	787b      	ldrb	r3, [r7, #1]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004512:	887a      	ldrh	r2, [r7, #2]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004518:	e003      	b.n	8004522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	041a      	lsls	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e267      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d075      	beq.n	800463a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800454e:	4b88      	ldr	r3, [pc, #544]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b04      	cmp	r3, #4
 8004558:	d00c      	beq.n	8004574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455a:	4b85      	ldr	r3, [pc, #532]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004562:	2b08      	cmp	r3, #8
 8004564:	d112      	bne.n	800458c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004566:	4b82      	ldr	r3, [pc, #520]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004572:	d10b      	bne.n	800458c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	4b7e      	ldr	r3, [pc, #504]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05b      	beq.n	8004638 <HAL_RCC_OscConfig+0x108>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d157      	bne.n	8004638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e242      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004594:	d106      	bne.n	80045a4 <HAL_RCC_OscConfig+0x74>
 8004596:	4b76      	ldr	r3, [pc, #472]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e01d      	b.n	80045e0 <HAL_RCC_OscConfig+0xb0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x98>
 80045ae:	4b70      	ldr	r3, [pc, #448]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6c      	ldr	r2, [pc, #432]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0xb0>
 80045c8:	4b69      	ldr	r3, [pc, #420]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a68      	ldr	r2, [pc, #416]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b66      	ldr	r3, [pc, #408]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a65      	ldr	r2, [pc, #404]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80045da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7ff f952 	bl	8003890 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f0:	f7ff f94e 	bl	8003890 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	@ 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e207      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	4b5b      	ldr	r3, [pc, #364]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0xc0>
 800460e:	e014      	b.n	800463a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7ff f93e 	bl	8003890 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004618:	f7ff f93a 	bl	8003890 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e1f3      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	4b51      	ldr	r3, [pc, #324]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0xe8>
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d063      	beq.n	800470e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004646:	4b4a      	ldr	r3, [pc, #296]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465a:	2b08      	cmp	r3, #8
 800465c:	d11c      	bne.n	8004698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465e:	4b44      	ldr	r3, [pc, #272]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x152>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e1c7      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4937      	ldr	r1, [pc, #220]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	e03a      	b.n	800470e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a0:	4b34      	ldr	r3, [pc, #208]	@ (8004774 <HAL_RCC_OscConfig+0x244>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7ff f8f3 	bl	8003890 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ae:	f7ff f8ef 	bl	8003890 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e1a8      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4925      	ldr	r1, [pc, #148]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
 80046e0:	e015      	b.n	800470e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <HAL_RCC_OscConfig+0x244>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7ff f8d2 	bl	8003890 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f0:	f7ff f8ce 	bl	8003890 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e187      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d036      	beq.n	8004788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <HAL_RCC_OscConfig+0x248>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7ff f8b2 	bl	8003890 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004730:	f7ff f8ae 	bl	8003890 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e167      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_OscConfig+0x240>)
 8004744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x200>
 800474e:	e01b      	b.n	8004788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <HAL_RCC_OscConfig+0x248>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004756:	f7ff f89b 	bl	8003890 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475c:	e00e      	b.n	800477c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475e:	f7ff f897 	bl	8003890 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d907      	bls.n	800477c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e150      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b88      	ldr	r3, [pc, #544]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8097 	beq.w	80048c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b81      	ldr	r3, [pc, #516]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b7d      	ldr	r3, [pc, #500]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	4a7c      	ldr	r2, [pc, #496]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047b6:	4b7a      	ldr	r3, [pc, #488]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b77      	ldr	r3, [pc, #476]	@ (80049a4 <HAL_RCC_OscConfig+0x474>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b74      	ldr	r3, [pc, #464]	@ (80049a4 <HAL_RCC_OscConfig+0x474>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a73      	ldr	r2, [pc, #460]	@ (80049a4 <HAL_RCC_OscConfig+0x474>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7ff f857 	bl	8003890 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7ff f853 	bl	8003890 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e10c      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b6a      	ldr	r3, [pc, #424]	@ (80049a4 <HAL_RCC_OscConfig+0x474>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x2ea>
 800480c:	4b64      	ldr	r3, [pc, #400]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a63      	ldr	r2, [pc, #396]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x324>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x30c>
 8004822:	4b5f      	ldr	r3, [pc, #380]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	4a5e      	ldr	r2, [pc, #376]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	@ 0x70
 800482e:	4b5c      	ldr	r3, [pc, #368]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4a5b      	ldr	r2, [pc, #364]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	@ 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x324>
 800483c:	4b58      	ldr	r3, [pc, #352]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a57      	ldr	r2, [pc, #348]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
 8004848:	4b55      	ldr	r3, [pc, #340]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4a54      	ldr	r2, [pc, #336]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7ff f818 	bl	8003890 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7ff f814 	bl	8003890 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0cb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	4b49      	ldr	r3, [pc, #292]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x334>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004888:	f7ff f802 	bl	8003890 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fe fffe 	bl	8003890 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0b5      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	4b3e      	ldr	r3, [pc, #248]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b39      	ldr	r3, [pc, #228]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	4a38      	ldr	r2, [pc, #224]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a1 	beq.w	8004a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ce:	4b34      	ldr	r3, [pc, #208]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d05c      	beq.n	8004994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d141      	bne.n	8004966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <HAL_RCC_OscConfig+0x478>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe ffd2 	bl	8003890 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fe ffce 	bl	8003890 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e087      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	4b27      	ldr	r3, [pc, #156]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	491b      	ldr	r1, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <HAL_RCC_OscConfig+0x478>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fe ffa7 	bl	8003890 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004946:	f7fe ffa3 	bl	8003890 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e05c      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004958:	4b11      	ldr	r3, [pc, #68]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x416>
 8004964:	e054      	b.n	8004a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <HAL_RCC_OscConfig+0x478>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fe ff90 	bl	8003890 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004974:	f7fe ff8c 	bl	8003890 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e045      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <HAL_RCC_OscConfig+0x470>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x444>
 8004992:	e03d      	b.n	8004a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e038      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40007000 	.word	0x40007000
 80049a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCC_OscConfig+0x4ec>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d028      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d121      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d11a      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d111      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	3b01      	subs	r3, #1
 80049f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0cc      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b68      	ldr	r3, [pc, #416]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d90c      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b65      	ldr	r3, [pc, #404]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b63      	ldr	r3, [pc, #396]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0b8      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d020      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a74:	4b59      	ldr	r3, [pc, #356]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a58      	ldr	r2, [pc, #352]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a8c:	4b53      	ldr	r3, [pc, #332]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a52      	ldr	r2, [pc, #328]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b50      	ldr	r3, [pc, #320]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	494d      	ldr	r1, [pc, #308]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d044      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d119      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ade:	4b3f      	ldr	r3, [pc, #252]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e06f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aee:	4b3b      	ldr	r3, [pc, #236]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e067      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afe:	4b37      	ldr	r3, [pc, #220]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4934      	ldr	r1, [pc, #208]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b10:	f7fe febe 	bl	8003890 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b18:	f7fe feba 	bl	8003890 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e04f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 020c 	and.w	r2, r3, #12
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d1eb      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b40:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d20c      	bcs.n	8004b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b22      	ldr	r3, [pc, #136]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e032      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4916      	ldr	r1, [pc, #88]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	490e      	ldr	r1, [pc, #56]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ba6:	f000 f821 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	490a      	ldr	r1, [pc, #40]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bc2:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fe1e 	bl	8003808 <HAL_InitTick>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023c00 	.word	0x40023c00
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	0800a66c 	.word	0x0800a66c
 8004be4:	20000010 	.word	0x20000010
 8004be8:	20000014 	.word	0x20000014

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b090      	sub	sp, #64	@ 0x40
 8004bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c04:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d00d      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x40>
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	f200 80a1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c1e:	e09b      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b53      	ldr	r3, [pc, #332]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c22:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c24:	e09b      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b53      	ldr	r3, [pc, #332]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c2a:	e098      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c36:	4b4d      	ldr	r3, [pc, #308]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d028      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b4a      	ldr	r3, [pc, #296]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	2200      	movs	r2, #0
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c54:	2100      	movs	r1, #0
 8004c56:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c58:	fb03 f201 	mul.w	r2, r3, r1
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	4a43      	ldr	r2, [pc, #268]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c66:	fba0 1202 	umull	r1, r2, r0, r2
 8004c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c72:	4413      	add	r3, r2
 8004c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c78:	2200      	movs	r2, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	61fa      	str	r2, [r7, #28]
 8004c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c86:	f7fb ff7d 	bl	8000b84 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4613      	mov	r3, r2
 8004c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c92:	e053      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c94:	4b35      	ldr	r3, [pc, #212]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	617a      	str	r2, [r7, #20]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ca6:	f04f 0b00 	mov.w	fp, #0
 8004caa:	4652      	mov	r2, sl
 8004cac:	465b      	mov	r3, fp
 8004cae:	f04f 0000 	mov.w	r0, #0
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	0159      	lsls	r1, r3, #5
 8004cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cbc:	0150      	lsls	r0, r2, #5
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8004cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cde:	ebb2 0408 	subs.w	r4, r2, r8
 8004ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	00eb      	lsls	r3, r5, #3
 8004cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf4:	00e2      	lsls	r2, r4, #3
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	461d      	mov	r5, r3
 8004cfa:	eb14 030a 	adds.w	r3, r4, sl
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	eb45 030b 	adc.w	r3, r5, fp
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d26:	2200      	movs	r2, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	60fa      	str	r2, [r7, #12]
 8004d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d30:	f7fb ff28 	bl	8000b84 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004d4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3740      	adds	r7, #64	@ 0x40
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	017d7840 	.word	0x017d7840

08004d78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d035      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004da0:	4b67      	ldr	r3, [pc, #412]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004da6:	f7fe fd73 	bl	8003890 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dae:	f7fe fd6f 	bl	8003890 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0ba      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc0:	4b60      	ldr	r3, [pc, #384]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	019a      	lsls	r2, r3, #6
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	071b      	lsls	r3, r3, #28
 8004dd8:	495a      	ldr	r1, [pc, #360]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004de0:	4b57      	ldr	r3, [pc, #348]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fe fd53 	bl	8003890 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dee:	f7fe fd4f 	bl	8003890 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e09a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e00:	4b50      	ldr	r3, [pc, #320]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8083 	beq.w	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	4b49      	ldr	r3, [pc, #292]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	4a48      	ldr	r2, [pc, #288]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e2a:	4b46      	ldr	r3, [pc, #280]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e36:	4b44      	ldr	r3, [pc, #272]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a43      	ldr	r2, [pc, #268]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e42:	f7fe fd25 	bl	8003890 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e4a:	f7fe fd21 	bl	8003890 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e06c      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e68:	4b36      	ldr	r3, [pc, #216]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e70:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d028      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e86:	4b2f      	ldr	r3, [pc, #188]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e90:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e96:	4b2d      	ldr	r3, [pc, #180]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e9c:	4a29      	ldr	r2, [pc, #164]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ea2:	4b28      	ldr	r3, [pc, #160]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d114      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fe fcef 	bl	8003890 <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fe fceb 	bl	8003890 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e034      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ee      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee4:	d10d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ee6:	4b17      	ldr	r3, [pc, #92]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efa:	4912      	ldr	r1, [pc, #72]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]
 8004f00:	e005      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	4a0f      	ldr	r2, [pc, #60]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f08:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f0c:	6093      	str	r3, [r2, #8]
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	490a      	ldr	r1, [pc, #40]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	7c1a      	ldrb	r2, [r3, #16]
 8004f30:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f32:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	42470068 	.word	0x42470068
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42470e40 	.word	0x42470e40
 8004f50:	424711e0 	.word	0x424711e0

08004f54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e073      	b.n	8005052 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7f5b      	ldrb	r3, [r3, #29]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe faca 	bl	8003514 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d055      	beq.n	8005040 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	22ca      	movs	r2, #202	@ 0xca
 8004f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2253      	movs	r2, #83	@ 0x53
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa49 	bl	800543c <RTC_EnterInitMode>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d12c      	bne.n	800500e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6919      	ldr	r1, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	041a      	lsls	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fa50 	bl	80054aa <RTC_ExitInitMode>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d110      	bne.n	8005036 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	22ff      	movs	r2, #255	@ 0xff
 800503c:	625a      	str	r2, [r3, #36]	@ 0x24
 800503e:	e001      	b.n	8005044 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800505a:	b590      	push	{r4, r7, lr}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	7f1b      	ldrb	r3, [r3, #28]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_RTC_SetTime+0x1c>
 8005072:	2302      	movs	r3, #2
 8005074:	e087      	b.n	8005186 <HAL_RTC_SetTime+0x12c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2202      	movs	r2, #2
 8005080:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d126      	bne.n	80050d6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fa27 	bl	80054f4 <RTC_ByteToBcd2>
 80050a6:	4603      	mov	r3, r0
 80050a8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fa20 	bl	80054f4 <RTC_ByteToBcd2>
 80050b4:	4603      	mov	r3, r0
 80050b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050b8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa18 	bl	80054f4 <RTC_ByteToBcd2>
 80050c4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	78db      	ldrb	r3, [r3, #3]
 80050ce:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e018      	b.n	8005108 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050f6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80050fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	78db      	ldrb	r3, [r3, #3]
 8005102:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	22ca      	movs	r2, #202	@ 0xca
 800510e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2253      	movs	r2, #83	@ 0x53
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f98f 	bl	800543c <RTC_EnterInitMode>
 800511e:	4603      	mov	r3, r0
 8005120:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d120      	bne.n	800516a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005132:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005146:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6899      	ldr	r1, [r3, #8]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	431a      	orrs	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f9a2 	bl	80054aa <RTC_ExitInitMode>
 8005166:	4603      	mov	r3, r0
 8005168:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]

  return status;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
}
 8005186:	4618      	mov	r0, r3
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}

0800518e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80051c0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80051c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	0d9b      	lsrs	r3, r3, #22
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11a      	bne.n	8005240 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f98e 	bl	8005530 <RTC_Bcd2ToByte>
 8005214:	4603      	mov	r3, r0
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f985 	bl	8005530 <RTC_Bcd2ToByte>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	789b      	ldrb	r3, [r3, #2]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f97c 	bl	8005530 <RTC_Bcd2ToByte>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800524a:	b590      	push	{r4, r7, lr}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	7f1b      	ldrb	r3, [r3, #28]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_RTC_SetDate+0x1c>
 8005262:	2302      	movs	r3, #2
 8005264:	e071      	b.n	800534a <HAL_RTC_SetDate+0x100>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2202      	movs	r2, #2
 8005270:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10e      	bne.n	8005296 <HAL_RTC_SetDate+0x4c>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	b2db      	uxtb	r3, r3
 800528e:	330a      	adds	r3, #10
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11c      	bne.n	80052d6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	78db      	ldrb	r3, [r3, #3]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f927 	bl	80054f4 <RTC_ByteToBcd2>
 80052a6:	4603      	mov	r3, r0
 80052a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f920 	bl	80054f4 <RTC_ByteToBcd2>
 80052b4:	4603      	mov	r3, r0
 80052b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	789b      	ldrb	r3, [r3, #2]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f918 	bl	80054f4 <RTC_ByteToBcd2>
 80052c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e00e      	b.n	80052f4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	78db      	ldrb	r3, [r3, #3]
 80052da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80052e2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80052e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	22ca      	movs	r2, #202	@ 0xca
 80052fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2253      	movs	r2, #83	@ 0x53
 8005302:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f899 	bl	800543c <RTC_EnterInitMode>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10c      	bne.n	800532e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800531e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005322:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f8c0 	bl	80054aa <RTC_ExitInitMode>
 800532a:	4603      	mov	r3, r0
 800532c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	22ff      	movs	r2, #255	@ 0xff
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]

  return status;
 8005348:	7cfb      	ldrb	r3, [r7, #19]
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}

08005352 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800536c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005370:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	b2da      	uxtb	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005394:	b2da      	uxtb	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	0b5b      	lsrs	r3, r3, #13
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11a      	bne.n	80053e6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	78db      	ldrb	r3, [r3, #3]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f8bb 	bl	8005530 <RTC_Bcd2ToByte>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f8b2 	bl	8005530 <RTC_Bcd2ToByte>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	789b      	ldrb	r3, [r3, #2]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 f8a9 	bl	8005530 <RTC_Bcd2ToByte>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0d      	ldr	r2, [pc, #52]	@ (8005438 <HAL_RTC_WaitForSynchro+0x48>)
 8005402:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005404:	f7fe fa44 	bl	8003890 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800540a:	e009      	b.n	8005420 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800540c:	f7fe fa40 	bl	8003890 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800541a:	d901      	bls.n	8005420 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e007      	b.n	8005430 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0ee      	beq.n	800540c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	00013f5f 	.word	0x00013f5f

0800543c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d122      	bne.n	80054a0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005468:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800546a:	f7fe fa11 	bl	8003890 <HAL_GetTick>
 800546e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005470:	e00c      	b.n	800548c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005472:	f7fe fa0d 	bl	8003890 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005480:	d904      	bls.n	800548c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2204      	movs	r2, #4
 8005486:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <RTC_EnterInitMode+0x64>
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d1e8      	bne.n	8005472 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff8b 	bl	80053f0 <HAL_RTC_WaitForSynchro>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2204      	movs	r2, #4
 80054e4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005502:	e005      	b.n	8005510 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	3b0a      	subs	r3, #10
 800550e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	2b09      	cmp	r3, #9
 8005514:	d8f6      	bhi.n	8005504 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	b2da      	uxtb	r2, r3
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	4313      	orrs	r3, r2
 8005522:	b2db      	uxtb	r3, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	b2db      	uxtb	r3, r3
 800555c:	4413      	add	r3, r2
 800555e:	b2db      	uxtb	r3, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07b      	b.n	8005676 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d108      	bne.n	8005598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800558e:	d009      	beq.n	80055a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	61da      	str	r2, [r3, #28]
 8005596:	e005      	b.n	80055a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fd ffd4 	bl	800356c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005628:	ea42 0103 	orr.w	r1, r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	f003 0104 	and.w	r1, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	f003 0210 	and.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_SPI_Transmit_DMA+0x20>
 800569c:	2302      	movs	r3, #2
 800569e:	e097      	b.n	80057d0 <HAL_SPI_Transmit_DMA+0x150>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
 80056b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056b8:	e085      	b.n	80057c6 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_SPI_Transmit_DMA+0x46>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ca:	e07c      	b.n	80057c6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2203      	movs	r2, #3
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005712:	d10f      	bne.n	8005734 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005722:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005732:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <HAL_SPI_Transmit_DMA+0x158>)
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <HAL_SPI_Transmit_DMA+0x15c>)
 8005742:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005748:	4a25      	ldr	r2, [pc, #148]	@ (80057e0 <HAL_SPI_Transmit_DMA+0x160>)
 800574a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005750:	2200      	movs	r2, #0
 8005752:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	4619      	mov	r1, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800576c:	f7fe fa80 	bl	8003c70 <HAL_DMA_Start_IT>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577a:	f043 0210 	orr.w	r2, r3, #16
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005786:	e01e      	b.n	80057c6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d007      	beq.n	80057a6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057a4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0220 	orr.w	r2, r2, #32
 80057b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0202 	orr.w	r2, r2, #2
 80057c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	080058e5 	.word	0x080058e5
 80057dc:	0800583d 	.word	0x0800583d
 80057e0:	08005901 	.word	0x08005901

080057e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800582e:	b2db      	uxtb	r3, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800584a:	f7fe f821 	bl	8003890 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585e:	d03b      	beq.n	80058d8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0220 	bic.w	r2, r2, #32
 800586e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0202 	bic.w	r2, r2, #2
 800587e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	2164      	movs	r1, #100	@ 0x64
 8005884:	6978      	ldr	r0, [r7, #20]
 8005886:	f000 f8e3 	bl	8005a50 <SPI_EndRxTxTransaction>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2200      	movs	r2, #0
 80058be:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f7ff ff9b 	bl	800580c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80058d6:	e002      	b.n	80058de <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80058d8:	6978      	ldr	r0, [r7, #20]
 80058da:	f7ff ff83 	bl	80057e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff ff80 	bl	80057f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0203 	bic.w	r2, r2, #3
 800591c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005922:	f043 0210 	orr.w	r2, r3, #16
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff ff6a 	bl	800580c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005950:	f7fd ff9e 	bl	8003890 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	4413      	add	r3, r2
 800595e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005960:	f7fd ff96 	bl	8003890 <HAL_GetTick>
 8005964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005966:	4b39      	ldr	r3, [pc, #228]	@ (8005a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	015b      	lsls	r3, r3, #5
 800596c:	0d1b      	lsrs	r3, r3, #20
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005976:	e054      	b.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d050      	beq.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005980:	f7fd ff86 	bl	8003890 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	429a      	cmp	r2, r3
 800598e:	d902      	bls.n	8005996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d13d      	bne.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ae:	d111      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b8:	d004      	beq.n	80059c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c2:	d107      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059dc:	d10f      	bne.n	80059fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e017      	b.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	bf0c      	ite	eq
 8005a32:	2301      	moveq	r3, #1
 8005a34:	2300      	movne	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d19b      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000010 	.word	0x20000010

08005a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2201      	movs	r2, #1
 8005a64:	2102      	movs	r1, #2
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff ff6a 	bl	8005940 <SPI_WaitFlagStateUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e032      	b.n	8005ae8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a82:	4b1b      	ldr	r3, [pc, #108]	@ (8005af0 <SPI_EndRxTxTransaction+0xa0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <SPI_EndRxTxTransaction+0xa4>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	0d5b      	lsrs	r3, r3, #21
 8005a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aa0:	d112      	bne.n	8005ac8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2180      	movs	r1, #128	@ 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ff47 	bl	8005940 <SPI_WaitFlagStateUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d016      	beq.n	8005ae6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e00f      	b.n	8005ae8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ade:	2b80      	cmp	r3, #128	@ 0x80
 8005ae0:	d0f2      	beq.n	8005ac8 <SPI_EndRxTxTransaction+0x78>
 8005ae2:	e000      	b.n	8005ae6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ae4:	bf00      	nop
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000010 	.word	0x20000010
 8005af4:	165e9f81 	.word	0x165e9f81

08005af8 <memset>:
 8005af8:	4402      	add	r2, r0
 8005afa:	4603      	mov	r3, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	@ (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f001 f89c 	bl	8006c58 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	0800a868 	.word	0x0800a868
 8005b44:	0800a868 	.word	0x0800a868
 8005b48:	0800a868 	.word	0x0800a868
 8005b4c:	0800a86c 	.word	0x0800a86c

08005b50 <cos>:
 8005b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b52:	ec53 2b10 	vmov	r2, r3, d0
 8005b56:	4826      	ldr	r0, [pc, #152]	@ (8005bf0 <cos+0xa0>)
 8005b58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b5c:	4281      	cmp	r1, r0
 8005b5e:	d806      	bhi.n	8005b6e <cos+0x1e>
 8005b60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005be8 <cos+0x98>
 8005b64:	b005      	add	sp, #20
 8005b66:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b6a:	f000 b899 	b.w	8005ca0 <__kernel_cos>
 8005b6e:	4821      	ldr	r0, [pc, #132]	@ (8005bf4 <cos+0xa4>)
 8005b70:	4281      	cmp	r1, r0
 8005b72:	d908      	bls.n	8005b86 <cos+0x36>
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	f7fa fb3a 	bl	80001f0 <__aeabi_dsub>
 8005b7c:	ec41 0b10 	vmov	d0, r0, r1
 8005b80:	b005      	add	sp, #20
 8005b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b86:	4668      	mov	r0, sp
 8005b88:	f000 fa0e 	bl	8005fa8 <__ieee754_rem_pio2>
 8005b8c:	f000 0003 	and.w	r0, r0, #3
 8005b90:	2801      	cmp	r0, #1
 8005b92:	d00b      	beq.n	8005bac <cos+0x5c>
 8005b94:	2802      	cmp	r0, #2
 8005b96:	d015      	beq.n	8005bc4 <cos+0x74>
 8005b98:	b9d8      	cbnz	r0, 8005bd2 <cos+0x82>
 8005b9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b9e:	ed9d 0b00 	vldr	d0, [sp]
 8005ba2:	f000 f87d 	bl	8005ca0 <__kernel_cos>
 8005ba6:	ec51 0b10 	vmov	r0, r1, d0
 8005baa:	e7e7      	b.n	8005b7c <cos+0x2c>
 8005bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bb0:	ed9d 0b00 	vldr	d0, [sp]
 8005bb4:	f000 f93c 	bl	8005e30 <__kernel_sin>
 8005bb8:	ec53 2b10 	vmov	r2, r3, d0
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005bc2:	e7db      	b.n	8005b7c <cos+0x2c>
 8005bc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bc8:	ed9d 0b00 	vldr	d0, [sp]
 8005bcc:	f000 f868 	bl	8005ca0 <__kernel_cos>
 8005bd0:	e7f2      	b.n	8005bb8 <cos+0x68>
 8005bd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bd6:	ed9d 0b00 	vldr	d0, [sp]
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f000 f928 	bl	8005e30 <__kernel_sin>
 8005be0:	e7e1      	b.n	8005ba6 <cos+0x56>
 8005be2:	bf00      	nop
 8005be4:	f3af 8000 	nop.w
	...
 8005bf0:	3fe921fb 	.word	0x3fe921fb
 8005bf4:	7fefffff 	.word	0x7fefffff

08005bf8 <sin>:
 8005bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bfa:	ec53 2b10 	vmov	r2, r3, d0
 8005bfe:	4826      	ldr	r0, [pc, #152]	@ (8005c98 <sin+0xa0>)
 8005c00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c04:	4281      	cmp	r1, r0
 8005c06:	d807      	bhi.n	8005c18 <sin+0x20>
 8005c08:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005c90 <sin+0x98>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	b005      	add	sp, #20
 8005c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c14:	f000 b90c 	b.w	8005e30 <__kernel_sin>
 8005c18:	4820      	ldr	r0, [pc, #128]	@ (8005c9c <sin+0xa4>)
 8005c1a:	4281      	cmp	r1, r0
 8005c1c:	d908      	bls.n	8005c30 <sin+0x38>
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	f7fa fae5 	bl	80001f0 <__aeabi_dsub>
 8005c26:	ec41 0b10 	vmov	d0, r0, r1
 8005c2a:	b005      	add	sp, #20
 8005c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c30:	4668      	mov	r0, sp
 8005c32:	f000 f9b9 	bl	8005fa8 <__ieee754_rem_pio2>
 8005c36:	f000 0003 	and.w	r0, r0, #3
 8005c3a:	2801      	cmp	r0, #1
 8005c3c:	d00c      	beq.n	8005c58 <sin+0x60>
 8005c3e:	2802      	cmp	r0, #2
 8005c40:	d011      	beq.n	8005c66 <sin+0x6e>
 8005c42:	b9e8      	cbnz	r0, 8005c80 <sin+0x88>
 8005c44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c48:	ed9d 0b00 	vldr	d0, [sp]
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f000 f8ef 	bl	8005e30 <__kernel_sin>
 8005c52:	ec51 0b10 	vmov	r0, r1, d0
 8005c56:	e7e6      	b.n	8005c26 <sin+0x2e>
 8005c58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c5c:	ed9d 0b00 	vldr	d0, [sp]
 8005c60:	f000 f81e 	bl	8005ca0 <__kernel_cos>
 8005c64:	e7f5      	b.n	8005c52 <sin+0x5a>
 8005c66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c6a:	ed9d 0b00 	vldr	d0, [sp]
 8005c6e:	2001      	movs	r0, #1
 8005c70:	f000 f8de 	bl	8005e30 <__kernel_sin>
 8005c74:	ec53 2b10 	vmov	r2, r3, d0
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005c7e:	e7d2      	b.n	8005c26 <sin+0x2e>
 8005c80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c84:	ed9d 0b00 	vldr	d0, [sp]
 8005c88:	f000 f80a 	bl	8005ca0 <__kernel_cos>
 8005c8c:	e7f2      	b.n	8005c74 <sin+0x7c>
 8005c8e:	bf00      	nop
	...
 8005c98:	3fe921fb 	.word	0x3fe921fb
 8005c9c:	7fefffff 	.word	0x7fefffff

08005ca0 <__kernel_cos>:
 8005ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	ec57 6b10 	vmov	r6, r7, d0
 8005ca8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005cac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005cb0:	ed8d 1b00 	vstr	d1, [sp]
 8005cb4:	d206      	bcs.n	8005cc4 <__kernel_cos+0x24>
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	4639      	mov	r1, r7
 8005cba:	f7fa feeb 	bl	8000a94 <__aeabi_d2iz>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f000 8088 	beq.w	8005dd4 <__kernel_cos+0x134>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa fc48 	bl	8000560 <__aeabi_dmul>
 8005cd0:	4b51      	ldr	r3, [pc, #324]	@ (8005e18 <__kernel_cos+0x178>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	f7fa fc42 	bl	8000560 <__aeabi_dmul>
 8005cdc:	a340      	add	r3, pc, #256	@ (adr r3, 8005de0 <__kernel_cos+0x140>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	4682      	mov	sl, r0
 8005ce4:	468b      	mov	fp, r1
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7fa fc39 	bl	8000560 <__aeabi_dmul>
 8005cee:	a33e      	add	r3, pc, #248	@ (adr r3, 8005de8 <__kernel_cos+0x148>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f7fa fa7e 	bl	80001f4 <__adddf3>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	f7fa fc30 	bl	8000560 <__aeabi_dmul>
 8005d00:	a33b      	add	r3, pc, #236	@ (adr r3, 8005df0 <__kernel_cos+0x150>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fa73 	bl	80001f0 <__aeabi_dsub>
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	f7fa fc27 	bl	8000560 <__aeabi_dmul>
 8005d12:	a339      	add	r3, pc, #228	@ (adr r3, 8005df8 <__kernel_cos+0x158>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fa6c 	bl	80001f4 <__adddf3>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fc1e 	bl	8000560 <__aeabi_dmul>
 8005d24:	a336      	add	r3, pc, #216	@ (adr r3, 8005e00 <__kernel_cos+0x160>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fa61 	bl	80001f0 <__aeabi_dsub>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	f7fa fc15 	bl	8000560 <__aeabi_dmul>
 8005d36:	a334      	add	r3, pc, #208	@ (adr r3, 8005e08 <__kernel_cos+0x168>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fa5a 	bl	80001f4 <__adddf3>
 8005d40:	4622      	mov	r2, r4
 8005d42:	462b      	mov	r3, r5
 8005d44:	f7fa fc0c 	bl	8000560 <__aeabi_dmul>
 8005d48:	4622      	mov	r2, r4
 8005d4a:	462b      	mov	r3, r5
 8005d4c:	f7fa fc08 	bl	8000560 <__aeabi_dmul>
 8005d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d54:	4604      	mov	r4, r0
 8005d56:	460d      	mov	r5, r1
 8005d58:	4630      	mov	r0, r6
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	f7fa fc00 	bl	8000560 <__aeabi_dmul>
 8005d60:	460b      	mov	r3, r1
 8005d62:	4602      	mov	r2, r0
 8005d64:	4629      	mov	r1, r5
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7fa fa42 	bl	80001f0 <__aeabi_dsub>
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e1c <__kernel_cos+0x17c>)
 8005d6e:	4598      	cmp	r8, r3
 8005d70:	4606      	mov	r6, r0
 8005d72:	460f      	mov	r7, r1
 8005d74:	d810      	bhi.n	8005d98 <__kernel_cos+0xf8>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	f7fa fa37 	bl	80001f0 <__aeabi_dsub>
 8005d82:	460b      	mov	r3, r1
 8005d84:	4926      	ldr	r1, [pc, #152]	@ (8005e20 <__kernel_cos+0x180>)
 8005d86:	4602      	mov	r2, r0
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f7fa fa31 	bl	80001f0 <__aeabi_dsub>
 8005d8e:	ec41 0b10 	vmov	d0, r0, r1
 8005d92:	b003      	add	sp, #12
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	4b22      	ldr	r3, [pc, #136]	@ (8005e24 <__kernel_cos+0x184>)
 8005d9a:	4921      	ldr	r1, [pc, #132]	@ (8005e20 <__kernel_cos+0x180>)
 8005d9c:	4598      	cmp	r8, r3
 8005d9e:	bf8c      	ite	hi
 8005da0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005e28 <__kernel_cos+0x188>)
 8005da2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005da6:	2400      	movs	r4, #0
 8005da8:	4622      	mov	r2, r4
 8005daa:	462b      	mov	r3, r5
 8005dac:	2000      	movs	r0, #0
 8005dae:	f7fa fa1f 	bl	80001f0 <__aeabi_dsub>
 8005db2:	4622      	mov	r2, r4
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	462b      	mov	r3, r5
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fa17 	bl	80001f0 <__aeabi_dsub>
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	f7fa fa13 	bl	80001f0 <__aeabi_dsub>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	e7da      	b.n	8005d8a <__kernel_cos+0xea>
 8005dd4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005e10 <__kernel_cos+0x170>
 8005dd8:	e7db      	b.n	8005d92 <__kernel_cos+0xf2>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	be8838d4 	.word	0xbe8838d4
 8005de4:	bda8fae9 	.word	0xbda8fae9
 8005de8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005dec:	3e21ee9e 	.word	0x3e21ee9e
 8005df0:	809c52ad 	.word	0x809c52ad
 8005df4:	3e927e4f 	.word	0x3e927e4f
 8005df8:	19cb1590 	.word	0x19cb1590
 8005dfc:	3efa01a0 	.word	0x3efa01a0
 8005e00:	16c15177 	.word	0x16c15177
 8005e04:	3f56c16c 	.word	0x3f56c16c
 8005e08:	5555554c 	.word	0x5555554c
 8005e0c:	3fa55555 	.word	0x3fa55555
 8005e10:	00000000 	.word	0x00000000
 8005e14:	3ff00000 	.word	0x3ff00000
 8005e18:	3fe00000 	.word	0x3fe00000
 8005e1c:	3fd33332 	.word	0x3fd33332
 8005e20:	3ff00000 	.word	0x3ff00000
 8005e24:	3fe90000 	.word	0x3fe90000
 8005e28:	3fd20000 	.word	0x3fd20000
 8005e2c:	00000000 	.word	0x00000000

08005e30 <__kernel_sin>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	ec55 4b10 	vmov	r4, r5, d0
 8005e38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005e42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005e46:	4680      	mov	r8, r0
 8005e48:	d205      	bcs.n	8005e56 <__kernel_sin+0x26>
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	f7fa fe21 	bl	8000a94 <__aeabi_d2iz>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d052      	beq.n	8005efc <__kernel_sin+0xcc>
 8005e56:	4622      	mov	r2, r4
 8005e58:	462b      	mov	r3, r5
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fb7f 	bl	8000560 <__aeabi_dmul>
 8005e62:	4682      	mov	sl, r0
 8005e64:	468b      	mov	fp, r1
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f7fa fb77 	bl	8000560 <__aeabi_dmul>
 8005e72:	a342      	add	r3, pc, #264	@ (adr r3, 8005f7c <__kernel_sin+0x14c>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	e9cd 0100 	strd	r0, r1, [sp]
 8005e7c:	4650      	mov	r0, sl
 8005e7e:	4659      	mov	r1, fp
 8005e80:	f7fa fb6e 	bl	8000560 <__aeabi_dmul>
 8005e84:	a33f      	add	r3, pc, #252	@ (adr r3, 8005f84 <__kernel_sin+0x154>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa f9b1 	bl	80001f0 <__aeabi_dsub>
 8005e8e:	4652      	mov	r2, sl
 8005e90:	465b      	mov	r3, fp
 8005e92:	f7fa fb65 	bl	8000560 <__aeabi_dmul>
 8005e96:	a33d      	add	r3, pc, #244	@ (adr r3, 8005f8c <__kernel_sin+0x15c>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa f9aa 	bl	80001f4 <__adddf3>
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	465b      	mov	r3, fp
 8005ea4:	f7fa fb5c 	bl	8000560 <__aeabi_dmul>
 8005ea8:	a33a      	add	r3, pc, #232	@ (adr r3, 8005f94 <__kernel_sin+0x164>)
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f7fa f99f 	bl	80001f0 <__aeabi_dsub>
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	465b      	mov	r3, fp
 8005eb6:	f7fa fb53 	bl	8000560 <__aeabi_dmul>
 8005eba:	a338      	add	r3, pc, #224	@ (adr r3, 8005f9c <__kernel_sin+0x16c>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa f998 	bl	80001f4 <__adddf3>
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	460f      	mov	r7, r1
 8005ec8:	f1b8 0f00 	cmp.w	r8, #0
 8005ecc:	d11b      	bne.n	8005f06 <__kernel_sin+0xd6>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	f7fa fb43 	bl	8000560 <__aeabi_dmul>
 8005eda:	a325      	add	r3, pc, #148	@ (adr r3, 8005f70 <__kernel_sin+0x140>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa f986 	bl	80001f0 <__aeabi_dsub>
 8005ee4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ee8:	f7fa fb3a 	bl	8000560 <__aeabi_dmul>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	f7fa f97e 	bl	80001f4 <__adddf3>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	460d      	mov	r5, r1
 8005efc:	ec45 4b10 	vmov	d0, r4, r5
 8005f00:	b005      	add	sp, #20
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f78 <__kernel_sin+0x148>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f7fa fb27 	bl	8000560 <__aeabi_dmul>
 8005f12:	4632      	mov	r2, r6
 8005f14:	4680      	mov	r8, r0
 8005f16:	4689      	mov	r9, r1
 8005f18:	463b      	mov	r3, r7
 8005f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f1e:	f7fa fb1f 	bl	8000560 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4640      	mov	r0, r8
 8005f28:	4649      	mov	r1, r9
 8005f2a:	f7fa f961 	bl	80001f0 <__aeabi_dsub>
 8005f2e:	4652      	mov	r2, sl
 8005f30:	465b      	mov	r3, fp
 8005f32:	f7fa fb15 	bl	8000560 <__aeabi_dmul>
 8005f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f3a:	f7fa f959 	bl	80001f0 <__aeabi_dsub>
 8005f3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005f70 <__kernel_sin+0x140>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f4c:	f7fa fb08 	bl	8000560 <__aeabi_dmul>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4630      	mov	r0, r6
 8005f56:	4639      	mov	r1, r7
 8005f58:	f7fa f94c 	bl	80001f4 <__adddf3>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa f944 	bl	80001f0 <__aeabi_dsub>
 8005f68:	e7c6      	b.n	8005ef8 <__kernel_sin+0xc8>
 8005f6a:	bf00      	nop
 8005f6c:	f3af 8000 	nop.w
 8005f70:	55555549 	.word	0x55555549
 8005f74:	3fc55555 	.word	0x3fc55555
 8005f78:	3fe00000 	.word	0x3fe00000
 8005f7c:	5acfd57c 	.word	0x5acfd57c
 8005f80:	3de5d93a 	.word	0x3de5d93a
 8005f84:	8a2b9ceb 	.word	0x8a2b9ceb
 8005f88:	3e5ae5e6 	.word	0x3e5ae5e6
 8005f8c:	57b1fe7d 	.word	0x57b1fe7d
 8005f90:	3ec71de3 	.word	0x3ec71de3
 8005f94:	19c161d5 	.word	0x19c161d5
 8005f98:	3f2a01a0 	.word	0x3f2a01a0
 8005f9c:	1110f8a6 	.word	0x1110f8a6
 8005fa0:	3f811111 	.word	0x3f811111
 8005fa4:	00000000 	.word	0x00000000

08005fa8 <__ieee754_rem_pio2>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	ec57 6b10 	vmov	r6, r7, d0
 8005fb0:	4bc5      	ldr	r3, [pc, #788]	@ (80062c8 <__ieee754_rem_pio2+0x320>)
 8005fb2:	b08d      	sub	sp, #52	@ 0x34
 8005fb4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005fb8:	4598      	cmp	r8, r3
 8005fba:	4604      	mov	r4, r0
 8005fbc:	9704      	str	r7, [sp, #16]
 8005fbe:	d807      	bhi.n	8005fd0 <__ieee754_rem_pio2+0x28>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	ed80 0b00 	vstr	d0, [r0]
 8005fc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005fcc:	2500      	movs	r5, #0
 8005fce:	e028      	b.n	8006022 <__ieee754_rem_pio2+0x7a>
 8005fd0:	4bbe      	ldr	r3, [pc, #760]	@ (80062cc <__ieee754_rem_pio2+0x324>)
 8005fd2:	4598      	cmp	r8, r3
 8005fd4:	d878      	bhi.n	80060c8 <__ieee754_rem_pio2+0x120>
 8005fd6:	9b04      	ldr	r3, [sp, #16]
 8005fd8:	4dbd      	ldr	r5, [pc, #756]	@ (80062d0 <__ieee754_rem_pio2+0x328>)
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	4630      	mov	r0, r6
 8005fde:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006290 <__ieee754_rem_pio2+0x2e8>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	dd38      	ble.n	800605a <__ieee754_rem_pio2+0xb2>
 8005fe8:	f7fa f902 	bl	80001f0 <__aeabi_dsub>
 8005fec:	45a8      	cmp	r8, r5
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	d01a      	beq.n	800602a <__ieee754_rem_pio2+0x82>
 8005ff4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006298 <__ieee754_rem_pio2+0x2f0>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f8f9 	bl	80001f0 <__aeabi_dsub>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4680      	mov	r8, r0
 8006004:	4689      	mov	r9, r1
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	f7fa f8f1 	bl	80001f0 <__aeabi_dsub>
 800600e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006298 <__ieee754_rem_pio2+0x2f0>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f8ec 	bl	80001f0 <__aeabi_dsub>
 8006018:	e9c4 8900 	strd	r8, r9, [r4]
 800601c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006020:	2501      	movs	r5, #1
 8006022:	4628      	mov	r0, r5
 8006024:	b00d      	add	sp, #52	@ 0x34
 8006026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602a:	a39d      	add	r3, pc, #628	@ (adr r3, 80062a0 <__ieee754_rem_pio2+0x2f8>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa f8de 	bl	80001f0 <__aeabi_dsub>
 8006034:	a39c      	add	r3, pc, #624	@ (adr r3, 80062a8 <__ieee754_rem_pio2+0x300>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	4606      	mov	r6, r0
 800603c:	460f      	mov	r7, r1
 800603e:	f7fa f8d7 	bl	80001f0 <__aeabi_dsub>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4680      	mov	r8, r0
 8006048:	4689      	mov	r9, r1
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa f8cf 	bl	80001f0 <__aeabi_dsub>
 8006052:	a395      	add	r3, pc, #596	@ (adr r3, 80062a8 <__ieee754_rem_pio2+0x300>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	e7dc      	b.n	8006014 <__ieee754_rem_pio2+0x6c>
 800605a:	f7fa f8cb 	bl	80001f4 <__adddf3>
 800605e:	45a8      	cmp	r8, r5
 8006060:	4606      	mov	r6, r0
 8006062:	460f      	mov	r7, r1
 8006064:	d018      	beq.n	8006098 <__ieee754_rem_pio2+0xf0>
 8006066:	a38c      	add	r3, pc, #560	@ (adr r3, 8006298 <__ieee754_rem_pio2+0x2f0>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa f8c2 	bl	80001f4 <__adddf3>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	4630      	mov	r0, r6
 800607a:	4639      	mov	r1, r7
 800607c:	f7fa f8b8 	bl	80001f0 <__aeabi_dsub>
 8006080:	a385      	add	r3, pc, #532	@ (adr r3, 8006298 <__ieee754_rem_pio2+0x2f0>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f7fa f8b5 	bl	80001f4 <__adddf3>
 800608a:	f04f 35ff 	mov.w	r5, #4294967295
 800608e:	e9c4 8900 	strd	r8, r9, [r4]
 8006092:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006096:	e7c4      	b.n	8006022 <__ieee754_rem_pio2+0x7a>
 8006098:	a381      	add	r3, pc, #516	@ (adr r3, 80062a0 <__ieee754_rem_pio2+0x2f8>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa f8a9 	bl	80001f4 <__adddf3>
 80060a2:	a381      	add	r3, pc, #516	@ (adr r3, 80062a8 <__ieee754_rem_pio2+0x300>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	f7fa f8a2 	bl	80001f4 <__adddf3>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4680      	mov	r8, r0
 80060b6:	4689      	mov	r9, r1
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa f898 	bl	80001f0 <__aeabi_dsub>
 80060c0:	a379      	add	r3, pc, #484	@ (adr r3, 80062a8 <__ieee754_rem_pio2+0x300>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	e7de      	b.n	8006086 <__ieee754_rem_pio2+0xde>
 80060c8:	4b82      	ldr	r3, [pc, #520]	@ (80062d4 <__ieee754_rem_pio2+0x32c>)
 80060ca:	4598      	cmp	r8, r3
 80060cc:	f200 80d1 	bhi.w	8006272 <__ieee754_rem_pio2+0x2ca>
 80060d0:	f000 f966 	bl	80063a0 <fabs>
 80060d4:	ec57 6b10 	vmov	r6, r7, d0
 80060d8:	a375      	add	r3, pc, #468	@ (adr r3, 80062b0 <__ieee754_rem_pio2+0x308>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	4630      	mov	r0, r6
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa fa3d 	bl	8000560 <__aeabi_dmul>
 80060e6:	4b7c      	ldr	r3, [pc, #496]	@ (80062d8 <__ieee754_rem_pio2+0x330>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	f7fa f883 	bl	80001f4 <__adddf3>
 80060ee:	f7fa fcd1 	bl	8000a94 <__aeabi_d2iz>
 80060f2:	4605      	mov	r5, r0
 80060f4:	f7fa f9ca 	bl	800048c <__aeabi_i2d>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006100:	a363      	add	r3, pc, #396	@ (adr r3, 8006290 <__ieee754_rem_pio2+0x2e8>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa2b 	bl	8000560 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4630      	mov	r0, r6
 8006110:	4639      	mov	r1, r7
 8006112:	f7fa f86d 	bl	80001f0 <__aeabi_dsub>
 8006116:	a360      	add	r3, pc, #384	@ (adr r3, 8006298 <__ieee754_rem_pio2+0x2f0>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	4682      	mov	sl, r0
 800611e:	468b      	mov	fp, r1
 8006120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006124:	f7fa fa1c 	bl	8000560 <__aeabi_dmul>
 8006128:	2d1f      	cmp	r5, #31
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	dc0c      	bgt.n	800614a <__ieee754_rem_pio2+0x1a2>
 8006130:	4b6a      	ldr	r3, [pc, #424]	@ (80062dc <__ieee754_rem_pio2+0x334>)
 8006132:	1e6a      	subs	r2, r5, #1
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	4543      	cmp	r3, r8
 800613a:	d006      	beq.n	800614a <__ieee754_rem_pio2+0x1a2>
 800613c:	4632      	mov	r2, r6
 800613e:	463b      	mov	r3, r7
 8006140:	4650      	mov	r0, sl
 8006142:	4659      	mov	r1, fp
 8006144:	f7fa f854 	bl	80001f0 <__aeabi_dsub>
 8006148:	e00e      	b.n	8006168 <__ieee754_rem_pio2+0x1c0>
 800614a:	463b      	mov	r3, r7
 800614c:	4632      	mov	r2, r6
 800614e:	4650      	mov	r0, sl
 8006150:	4659      	mov	r1, fp
 8006152:	f7fa f84d 	bl	80001f0 <__aeabi_dsub>
 8006156:	ea4f 5328 	mov.w	r3, r8, asr #20
 800615a:	9305      	str	r3, [sp, #20]
 800615c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006160:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006164:	2b10      	cmp	r3, #16
 8006166:	dc02      	bgt.n	800616e <__ieee754_rem_pio2+0x1c6>
 8006168:	e9c4 0100 	strd	r0, r1, [r4]
 800616c:	e039      	b.n	80061e2 <__ieee754_rem_pio2+0x23a>
 800616e:	a34c      	add	r3, pc, #304	@ (adr r3, 80062a0 <__ieee754_rem_pio2+0x2f8>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006178:	f7fa f9f2 	bl	8000560 <__aeabi_dmul>
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4650      	mov	r0, sl
 8006186:	4659      	mov	r1, fp
 8006188:	f7fa f832 	bl	80001f0 <__aeabi_dsub>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4680      	mov	r8, r0
 8006192:	4689      	mov	r9, r1
 8006194:	4650      	mov	r0, sl
 8006196:	4659      	mov	r1, fp
 8006198:	f7fa f82a 	bl	80001f0 <__aeabi_dsub>
 800619c:	4632      	mov	r2, r6
 800619e:	463b      	mov	r3, r7
 80061a0:	f7fa f826 	bl	80001f0 <__aeabi_dsub>
 80061a4:	a340      	add	r3, pc, #256	@ (adr r3, 80062a8 <__ieee754_rem_pio2+0x300>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b2:	f7fa f9d5 	bl	8000560 <__aeabi_dmul>
 80061b6:	4632      	mov	r2, r6
 80061b8:	463b      	mov	r3, r7
 80061ba:	f7fa f819 	bl	80001f0 <__aeabi_dsub>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4606      	mov	r6, r0
 80061c4:	460f      	mov	r7, r1
 80061c6:	4640      	mov	r0, r8
 80061c8:	4649      	mov	r1, r9
 80061ca:	f7fa f811 	bl	80001f0 <__aeabi_dsub>
 80061ce:	9a05      	ldr	r2, [sp, #20]
 80061d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b31      	cmp	r3, #49	@ 0x31
 80061d8:	dc20      	bgt.n	800621c <__ieee754_rem_pio2+0x274>
 80061da:	e9c4 0100 	strd	r0, r1, [r4]
 80061de:	46c2      	mov	sl, r8
 80061e0:	46cb      	mov	fp, r9
 80061e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80061e6:	4650      	mov	r0, sl
 80061e8:	4642      	mov	r2, r8
 80061ea:	464b      	mov	r3, r9
 80061ec:	4659      	mov	r1, fp
 80061ee:	f7f9 ffff 	bl	80001f0 <__aeabi_dsub>
 80061f2:	463b      	mov	r3, r7
 80061f4:	4632      	mov	r2, r6
 80061f6:	f7f9 fffb 	bl	80001f0 <__aeabi_dsub>
 80061fa:	9b04      	ldr	r3, [sp, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006202:	f6bf af0e 	bge.w	8006022 <__ieee754_rem_pio2+0x7a>
 8006206:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006210:	f8c4 8000 	str.w	r8, [r4]
 8006214:	60a0      	str	r0, [r4, #8]
 8006216:	60e3      	str	r3, [r4, #12]
 8006218:	426d      	negs	r5, r5
 800621a:	e702      	b.n	8006022 <__ieee754_rem_pio2+0x7a>
 800621c:	a326      	add	r3, pc, #152	@ (adr r3, 80062b8 <__ieee754_rem_pio2+0x310>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006226:	f7fa f99b 	bl	8000560 <__aeabi_dmul>
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4640      	mov	r0, r8
 8006234:	4649      	mov	r1, r9
 8006236:	f7f9 ffdb 	bl	80001f0 <__aeabi_dsub>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4682      	mov	sl, r0
 8006240:	468b      	mov	fp, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7f9 ffd3 	bl	80001f0 <__aeabi_dsub>
 800624a:	4632      	mov	r2, r6
 800624c:	463b      	mov	r3, r7
 800624e:	f7f9 ffcf 	bl	80001f0 <__aeabi_dsub>
 8006252:	a31b      	add	r3, pc, #108	@ (adr r3, 80062c0 <__ieee754_rem_pio2+0x318>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006260:	f7fa f97e 	bl	8000560 <__aeabi_dmul>
 8006264:	4632      	mov	r2, r6
 8006266:	463b      	mov	r3, r7
 8006268:	f7f9 ffc2 	bl	80001f0 <__aeabi_dsub>
 800626c:	4606      	mov	r6, r0
 800626e:	460f      	mov	r7, r1
 8006270:	e764      	b.n	800613c <__ieee754_rem_pio2+0x194>
 8006272:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <__ieee754_rem_pio2+0x338>)
 8006274:	4598      	cmp	r8, r3
 8006276:	d935      	bls.n	80062e4 <__ieee754_rem_pio2+0x33c>
 8006278:	4632      	mov	r2, r6
 800627a:	463b      	mov	r3, r7
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7f9 ffb6 	bl	80001f0 <__aeabi_dsub>
 8006284:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006288:	e9c4 0100 	strd	r0, r1, [r4]
 800628c:	e69e      	b.n	8005fcc <__ieee754_rem_pio2+0x24>
 800628e:	bf00      	nop
 8006290:	54400000 	.word	0x54400000
 8006294:	3ff921fb 	.word	0x3ff921fb
 8006298:	1a626331 	.word	0x1a626331
 800629c:	3dd0b461 	.word	0x3dd0b461
 80062a0:	1a600000 	.word	0x1a600000
 80062a4:	3dd0b461 	.word	0x3dd0b461
 80062a8:	2e037073 	.word	0x2e037073
 80062ac:	3ba3198a 	.word	0x3ba3198a
 80062b0:	6dc9c883 	.word	0x6dc9c883
 80062b4:	3fe45f30 	.word	0x3fe45f30
 80062b8:	2e000000 	.word	0x2e000000
 80062bc:	3ba3198a 	.word	0x3ba3198a
 80062c0:	252049c1 	.word	0x252049c1
 80062c4:	397b839a 	.word	0x397b839a
 80062c8:	3fe921fb 	.word	0x3fe921fb
 80062cc:	4002d97b 	.word	0x4002d97b
 80062d0:	3ff921fb 	.word	0x3ff921fb
 80062d4:	413921fb 	.word	0x413921fb
 80062d8:	3fe00000 	.word	0x3fe00000
 80062dc:	0800a684 	.word	0x0800a684
 80062e0:	7fefffff 	.word	0x7fefffff
 80062e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80062e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80062ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80062f0:	4630      	mov	r0, r6
 80062f2:	460f      	mov	r7, r1
 80062f4:	f7fa fbce 	bl	8000a94 <__aeabi_d2iz>
 80062f8:	f7fa f8c8 	bl	800048c <__aeabi_i2d>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006308:	f7f9 ff72 	bl	80001f0 <__aeabi_dsub>
 800630c:	4b22      	ldr	r3, [pc, #136]	@ (8006398 <__ieee754_rem_pio2+0x3f0>)
 800630e:	2200      	movs	r2, #0
 8006310:	f7fa f926 	bl	8000560 <__aeabi_dmul>
 8006314:	460f      	mov	r7, r1
 8006316:	4606      	mov	r6, r0
 8006318:	f7fa fbbc 	bl	8000a94 <__aeabi_d2iz>
 800631c:	f7fa f8b6 	bl	800048c <__aeabi_i2d>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800632c:	f7f9 ff60 	bl	80001f0 <__aeabi_dsub>
 8006330:	4b19      	ldr	r3, [pc, #100]	@ (8006398 <__ieee754_rem_pio2+0x3f0>)
 8006332:	2200      	movs	r2, #0
 8006334:	f7fa f914 	bl	8000560 <__aeabi_dmul>
 8006338:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800633c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006340:	f04f 0803 	mov.w	r8, #3
 8006344:	2600      	movs	r6, #0
 8006346:	2700      	movs	r7, #0
 8006348:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800634c:	4632      	mov	r2, r6
 800634e:	463b      	mov	r3, r7
 8006350:	46c2      	mov	sl, r8
 8006352:	f108 38ff 	add.w	r8, r8, #4294967295
 8006356:	f7fa fb6b 	bl	8000a30 <__aeabi_dcmpeq>
 800635a:	2800      	cmp	r0, #0
 800635c:	d1f4      	bne.n	8006348 <__ieee754_rem_pio2+0x3a0>
 800635e:	4b0f      	ldr	r3, [pc, #60]	@ (800639c <__ieee754_rem_pio2+0x3f4>)
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	2302      	movs	r3, #2
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	462a      	mov	r2, r5
 8006368:	4653      	mov	r3, sl
 800636a:	4621      	mov	r1, r4
 800636c:	a806      	add	r0, sp, #24
 800636e:	f000 f81f 	bl	80063b0 <__kernel_rem_pio2>
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	4605      	mov	r5, r0
 8006378:	f6bf ae53 	bge.w	8006022 <__ieee754_rem_pio2+0x7a>
 800637c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006380:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006384:	e9c4 2300 	strd	r2, r3, [r4]
 8006388:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800638c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006390:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006394:	e740      	b.n	8006218 <__ieee754_rem_pio2+0x270>
 8006396:	bf00      	nop
 8006398:	41700000 	.word	0x41700000
 800639c:	0800a704 	.word	0x0800a704

080063a0 <fabs>:
 80063a0:	ec51 0b10 	vmov	r0, r1, d0
 80063a4:	4602      	mov	r2, r0
 80063a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80063aa:	ec43 2b10 	vmov	d0, r2, r3
 80063ae:	4770      	bx	lr

080063b0 <__kernel_rem_pio2>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	ed2d 8b02 	vpush	{d8}
 80063b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80063bc:	f112 0f14 	cmn.w	r2, #20
 80063c0:	9306      	str	r3, [sp, #24]
 80063c2:	9104      	str	r1, [sp, #16]
 80063c4:	4bbe      	ldr	r3, [pc, #760]	@ (80066c0 <__kernel_rem_pio2+0x310>)
 80063c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80063c8:	9008      	str	r0, [sp, #32]
 80063ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063d6:	bfa8      	it	ge
 80063d8:	1ed4      	subge	r4, r2, #3
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	bfb2      	itee	lt
 80063de:	2400      	movlt	r4, #0
 80063e0:	2318      	movge	r3, #24
 80063e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80063e6:	f06f 0317 	mvn.w	r3, #23
 80063ea:	fb04 3303 	mla	r3, r4, r3, r3
 80063ee:	eb03 0b02 	add.w	fp, r3, r2
 80063f2:	9b00      	ldr	r3, [sp, #0]
 80063f4:	9a05      	ldr	r2, [sp, #20]
 80063f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80066b0 <__kernel_rem_pio2+0x300>
 80063fa:	eb03 0802 	add.w	r8, r3, r2
 80063fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006400:	1aa7      	subs	r7, r4, r2
 8006402:	ae20      	add	r6, sp, #128	@ 0x80
 8006404:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006408:	2500      	movs	r5, #0
 800640a:	4545      	cmp	r5, r8
 800640c:	dd13      	ble.n	8006436 <__kernel_rem_pio2+0x86>
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	aa20      	add	r2, sp, #128	@ 0x80
 8006412:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006416:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800641a:	f04f 0800 	mov.w	r8, #0
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	4598      	cmp	r8, r3
 8006422:	dc31      	bgt.n	8006488 <__kernel_rem_pio2+0xd8>
 8006424:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80066b0 <__kernel_rem_pio2+0x300>
 8006428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800642c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006430:	462f      	mov	r7, r5
 8006432:	2600      	movs	r6, #0
 8006434:	e01b      	b.n	800646e <__kernel_rem_pio2+0xbe>
 8006436:	42ef      	cmn	r7, r5
 8006438:	d407      	bmi.n	800644a <__kernel_rem_pio2+0x9a>
 800643a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800643e:	f7fa f825 	bl	800048c <__aeabi_i2d>
 8006442:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006446:	3501      	adds	r5, #1
 8006448:	e7df      	b.n	800640a <__kernel_rem_pio2+0x5a>
 800644a:	ec51 0b18 	vmov	r0, r1, d8
 800644e:	e7f8      	b.n	8006442 <__kernel_rem_pio2+0x92>
 8006450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006454:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006458:	f7fa f882 	bl	8000560 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006464:	f7f9 fec6 	bl	80001f4 <__adddf3>
 8006468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646c:	3601      	adds	r6, #1
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	429e      	cmp	r6, r3
 8006472:	f1a7 0708 	sub.w	r7, r7, #8
 8006476:	ddeb      	ble.n	8006450 <__kernel_rem_pio2+0xa0>
 8006478:	ed9d 7b02 	vldr	d7, [sp, #8]
 800647c:	f108 0801 	add.w	r8, r8, #1
 8006480:	ecaa 7b02 	vstmia	sl!, {d7}
 8006484:	3508      	adds	r5, #8
 8006486:	e7ca      	b.n	800641e <__kernel_rem_pio2+0x6e>
 8006488:	9b00      	ldr	r3, [sp, #0]
 800648a:	f8dd 8000 	ldr.w	r8, [sp]
 800648e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006494:	930a      	str	r3, [sp, #40]	@ 0x28
 8006496:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006498:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800649c:	9309      	str	r3, [sp, #36]	@ 0x24
 800649e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80064a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064a4:	ab98      	add	r3, sp, #608	@ 0x260
 80064a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80064ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80064b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80064b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80064ba:	46a1      	mov	r9, r4
 80064bc:	46c2      	mov	sl, r8
 80064be:	f1ba 0f00 	cmp.w	sl, #0
 80064c2:	f1a5 0508 	sub.w	r5, r5, #8
 80064c6:	dc77      	bgt.n	80065b8 <__kernel_rem_pio2+0x208>
 80064c8:	4658      	mov	r0, fp
 80064ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 80064ce:	f000 fac7 	bl	8006a60 <scalbn>
 80064d2:	ec57 6b10 	vmov	r6, r7, d0
 80064d6:	2200      	movs	r2, #0
 80064d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7fa f83e 	bl	8000560 <__aeabi_dmul>
 80064e4:	ec41 0b10 	vmov	d0, r0, r1
 80064e8:	f000 fb3a 	bl	8006b60 <floor>
 80064ec:	4b75      	ldr	r3, [pc, #468]	@ (80066c4 <__kernel_rem_pio2+0x314>)
 80064ee:	ec51 0b10 	vmov	r0, r1, d0
 80064f2:	2200      	movs	r2, #0
 80064f4:	f7fa f834 	bl	8000560 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 fe76 	bl	80001f0 <__aeabi_dsub>
 8006504:	460f      	mov	r7, r1
 8006506:	4606      	mov	r6, r0
 8006508:	f7fa fac4 	bl	8000a94 <__aeabi_d2iz>
 800650c:	9002      	str	r0, [sp, #8]
 800650e:	f7f9 ffbd 	bl	800048c <__aeabi_i2d>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7f9 fe69 	bl	80001f0 <__aeabi_dsub>
 800651e:	f1bb 0f00 	cmp.w	fp, #0
 8006522:	4606      	mov	r6, r0
 8006524:	460f      	mov	r7, r1
 8006526:	dd6c      	ble.n	8006602 <__kernel_rem_pio2+0x252>
 8006528:	f108 31ff 	add.w	r1, r8, #4294967295
 800652c:	ab0c      	add	r3, sp, #48	@ 0x30
 800652e:	9d02      	ldr	r5, [sp, #8]
 8006530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006534:	f1cb 0018 	rsb	r0, fp, #24
 8006538:	fa43 f200 	asr.w	r2, r3, r0
 800653c:	4415      	add	r5, r2
 800653e:	4082      	lsls	r2, r0
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	aa0c      	add	r2, sp, #48	@ 0x30
 8006544:	9502      	str	r5, [sp, #8]
 8006546:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800654a:	f1cb 0217 	rsb	r2, fp, #23
 800654e:	fa43 f902 	asr.w	r9, r3, r2
 8006552:	f1b9 0f00 	cmp.w	r9, #0
 8006556:	dd64      	ble.n	8006622 <__kernel_rem_pio2+0x272>
 8006558:	9b02      	ldr	r3, [sp, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	3301      	adds	r3, #1
 800655e:	9302      	str	r3, [sp, #8]
 8006560:	4615      	mov	r5, r2
 8006562:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006566:	4590      	cmp	r8, r2
 8006568:	f300 80b8 	bgt.w	80066dc <__kernel_rem_pio2+0x32c>
 800656c:	f1bb 0f00 	cmp.w	fp, #0
 8006570:	dd07      	ble.n	8006582 <__kernel_rem_pio2+0x1d2>
 8006572:	f1bb 0f01 	cmp.w	fp, #1
 8006576:	f000 80bf 	beq.w	80066f8 <__kernel_rem_pio2+0x348>
 800657a:	f1bb 0f02 	cmp.w	fp, #2
 800657e:	f000 80c6 	beq.w	800670e <__kernel_rem_pio2+0x35e>
 8006582:	f1b9 0f02 	cmp.w	r9, #2
 8006586:	d14c      	bne.n	8006622 <__kernel_rem_pio2+0x272>
 8006588:	4632      	mov	r2, r6
 800658a:	463b      	mov	r3, r7
 800658c:	494e      	ldr	r1, [pc, #312]	@ (80066c8 <__kernel_rem_pio2+0x318>)
 800658e:	2000      	movs	r0, #0
 8006590:	f7f9 fe2e 	bl	80001f0 <__aeabi_dsub>
 8006594:	4606      	mov	r6, r0
 8006596:	460f      	mov	r7, r1
 8006598:	2d00      	cmp	r5, #0
 800659a:	d042      	beq.n	8006622 <__kernel_rem_pio2+0x272>
 800659c:	4658      	mov	r0, fp
 800659e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80066b8 <__kernel_rem_pio2+0x308>
 80065a2:	f000 fa5d 	bl	8006a60 <scalbn>
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	ec53 2b10 	vmov	r2, r3, d0
 80065ae:	f7f9 fe1f 	bl	80001f0 <__aeabi_dsub>
 80065b2:	4606      	mov	r6, r0
 80065b4:	460f      	mov	r7, r1
 80065b6:	e034      	b.n	8006622 <__kernel_rem_pio2+0x272>
 80065b8:	4b44      	ldr	r3, [pc, #272]	@ (80066cc <__kernel_rem_pio2+0x31c>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c0:	f7f9 ffce 	bl	8000560 <__aeabi_dmul>
 80065c4:	f7fa fa66 	bl	8000a94 <__aeabi_d2iz>
 80065c8:	f7f9 ff60 	bl	800048c <__aeabi_i2d>
 80065cc:	4b40      	ldr	r3, [pc, #256]	@ (80066d0 <__kernel_rem_pio2+0x320>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	4606      	mov	r6, r0
 80065d2:	460f      	mov	r7, r1
 80065d4:	f7f9 ffc4 	bl	8000560 <__aeabi_dmul>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e0:	f7f9 fe06 	bl	80001f0 <__aeabi_dsub>
 80065e4:	f7fa fa56 	bl	8000a94 <__aeabi_d2iz>
 80065e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065ec:	f849 0b04 	str.w	r0, [r9], #4
 80065f0:	4639      	mov	r1, r7
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7f9 fdfe 	bl	80001f4 <__adddf3>
 80065f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	e75d      	b.n	80064be <__kernel_rem_pio2+0x10e>
 8006602:	d107      	bne.n	8006614 <__kernel_rem_pio2+0x264>
 8006604:	f108 33ff 	add.w	r3, r8, #4294967295
 8006608:	aa0c      	add	r2, sp, #48	@ 0x30
 800660a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006612:	e79e      	b.n	8006552 <__kernel_rem_pio2+0x1a2>
 8006614:	4b2f      	ldr	r3, [pc, #188]	@ (80066d4 <__kernel_rem_pio2+0x324>)
 8006616:	2200      	movs	r2, #0
 8006618:	f7fa fa28 	bl	8000a6c <__aeabi_dcmpge>
 800661c:	2800      	cmp	r0, #0
 800661e:	d143      	bne.n	80066a8 <__kernel_rem_pio2+0x2f8>
 8006620:	4681      	mov	r9, r0
 8006622:	2200      	movs	r2, #0
 8006624:	2300      	movs	r3, #0
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	f7fa fa01 	bl	8000a30 <__aeabi_dcmpeq>
 800662e:	2800      	cmp	r0, #0
 8006630:	f000 80bf 	beq.w	80067b2 <__kernel_rem_pio2+0x402>
 8006634:	f108 33ff 	add.w	r3, r8, #4294967295
 8006638:	2200      	movs	r2, #0
 800663a:	9900      	ldr	r1, [sp, #0]
 800663c:	428b      	cmp	r3, r1
 800663e:	da6e      	bge.n	800671e <__kernel_rem_pio2+0x36e>
 8006640:	2a00      	cmp	r2, #0
 8006642:	f000 8089 	beq.w	8006758 <__kernel_rem_pio2+0x3a8>
 8006646:	f108 38ff 	add.w	r8, r8, #4294967295
 800664a:	ab0c      	add	r3, sp, #48	@ 0x30
 800664c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006650:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f6      	beq.n	8006646 <__kernel_rem_pio2+0x296>
 8006658:	4658      	mov	r0, fp
 800665a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80066b8 <__kernel_rem_pio2+0x308>
 800665e:	f000 f9ff 	bl	8006a60 <scalbn>
 8006662:	f108 0301 	add.w	r3, r8, #1
 8006666:	00da      	lsls	r2, r3, #3
 8006668:	9205      	str	r2, [sp, #20]
 800666a:	ec55 4b10 	vmov	r4, r5, d0
 800666e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006670:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80066cc <__kernel_rem_pio2+0x31c>
 8006674:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006678:	4646      	mov	r6, r8
 800667a:	f04f 0a00 	mov.w	sl, #0
 800667e:	2e00      	cmp	r6, #0
 8006680:	f280 80cf 	bge.w	8006822 <__kernel_rem_pio2+0x472>
 8006684:	4644      	mov	r4, r8
 8006686:	2c00      	cmp	r4, #0
 8006688:	f2c0 80fd 	blt.w	8006886 <__kernel_rem_pio2+0x4d6>
 800668c:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <__kernel_rem_pio2+0x328>)
 800668e:	461f      	mov	r7, r3
 8006690:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006696:	9306      	str	r3, [sp, #24]
 8006698:	f04f 0a00 	mov.w	sl, #0
 800669c:	f04f 0b00 	mov.w	fp, #0
 80066a0:	2600      	movs	r6, #0
 80066a2:	eba8 0504 	sub.w	r5, r8, r4
 80066a6:	e0e2      	b.n	800686e <__kernel_rem_pio2+0x4be>
 80066a8:	f04f 0902 	mov.w	r9, #2
 80066ac:	e754      	b.n	8006558 <__kernel_rem_pio2+0x1a8>
 80066ae:	bf00      	nop
	...
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	0800a850 	.word	0x0800a850
 80066c4:	40200000 	.word	0x40200000
 80066c8:	3ff00000 	.word	0x3ff00000
 80066cc:	3e700000 	.word	0x3e700000
 80066d0:	41700000 	.word	0x41700000
 80066d4:	3fe00000 	.word	0x3fe00000
 80066d8:	0800a810 	.word	0x0800a810
 80066dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80066e0:	b945      	cbnz	r5, 80066f4 <__kernel_rem_pio2+0x344>
 80066e2:	b123      	cbz	r3, 80066ee <__kernel_rem_pio2+0x33e>
 80066e4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80066e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80066ec:	2301      	movs	r3, #1
 80066ee:	3201      	adds	r2, #1
 80066f0:	461d      	mov	r5, r3
 80066f2:	e738      	b.n	8006566 <__kernel_rem_pio2+0x1b6>
 80066f4:	1acb      	subs	r3, r1, r3
 80066f6:	e7f7      	b.n	80066e8 <__kernel_rem_pio2+0x338>
 80066f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80066fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80066fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006702:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006706:	a90c      	add	r1, sp, #48	@ 0x30
 8006708:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800670c:	e739      	b.n	8006582 <__kernel_rem_pio2+0x1d2>
 800670e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006712:	ab0c      	add	r3, sp, #48	@ 0x30
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800671c:	e7f3      	b.n	8006706 <__kernel_rem_pio2+0x356>
 800671e:	a90c      	add	r1, sp, #48	@ 0x30
 8006720:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006724:	3b01      	subs	r3, #1
 8006726:	430a      	orrs	r2, r1
 8006728:	e787      	b.n	800663a <__kernel_rem_pio2+0x28a>
 800672a:	3401      	adds	r4, #1
 800672c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006730:	2a00      	cmp	r2, #0
 8006732:	d0fa      	beq.n	800672a <__kernel_rem_pio2+0x37a>
 8006734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006736:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800673a:	eb0d 0503 	add.w	r5, sp, r3
 800673e:	9b06      	ldr	r3, [sp, #24]
 8006740:	aa20      	add	r2, sp, #128	@ 0x80
 8006742:	4443      	add	r3, r8
 8006744:	f108 0701 	add.w	r7, r8, #1
 8006748:	3d98      	subs	r5, #152	@ 0x98
 800674a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800674e:	4444      	add	r4, r8
 8006750:	42bc      	cmp	r4, r7
 8006752:	da04      	bge.n	800675e <__kernel_rem_pio2+0x3ae>
 8006754:	46a0      	mov	r8, r4
 8006756:	e6a2      	b.n	800649e <__kernel_rem_pio2+0xee>
 8006758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800675a:	2401      	movs	r4, #1
 800675c:	e7e6      	b.n	800672c <__kernel_rem_pio2+0x37c>
 800675e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006760:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006764:	f7f9 fe92 	bl	800048c <__aeabi_i2d>
 8006768:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006a30 <__kernel_rem_pio2+0x680>
 800676c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006770:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006778:	46b2      	mov	sl, r6
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	4598      	cmp	r8, r3
 8006782:	dd05      	ble.n	8006790 <__kernel_rem_pio2+0x3e0>
 8006784:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006788:	3701      	adds	r7, #1
 800678a:	eca5 7b02 	vstmia	r5!, {d7}
 800678e:	e7df      	b.n	8006750 <__kernel_rem_pio2+0x3a0>
 8006790:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006794:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006798:	f7f9 fee2 	bl	8000560 <__aeabi_dmul>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a4:	f7f9 fd26 	bl	80001f4 <__adddf3>
 80067a8:	f108 0801 	add.w	r8, r8, #1
 80067ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b0:	e7e5      	b.n	800677e <__kernel_rem_pio2+0x3ce>
 80067b2:	f1cb 0000 	rsb	r0, fp, #0
 80067b6:	ec47 6b10 	vmov	d0, r6, r7
 80067ba:	f000 f951 	bl	8006a60 <scalbn>
 80067be:	ec55 4b10 	vmov	r4, r5, d0
 80067c2:	4b9d      	ldr	r3, [pc, #628]	@ (8006a38 <__kernel_rem_pio2+0x688>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	f7fa f94f 	bl	8000a6c <__aeabi_dcmpge>
 80067ce:	b300      	cbz	r0, 8006812 <__kernel_rem_pio2+0x462>
 80067d0:	4b9a      	ldr	r3, [pc, #616]	@ (8006a3c <__kernel_rem_pio2+0x68c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	4620      	mov	r0, r4
 80067d6:	4629      	mov	r1, r5
 80067d8:	f7f9 fec2 	bl	8000560 <__aeabi_dmul>
 80067dc:	f7fa f95a 	bl	8000a94 <__aeabi_d2iz>
 80067e0:	4606      	mov	r6, r0
 80067e2:	f7f9 fe53 	bl	800048c <__aeabi_i2d>
 80067e6:	4b94      	ldr	r3, [pc, #592]	@ (8006a38 <__kernel_rem_pio2+0x688>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	f7f9 feb9 	bl	8000560 <__aeabi_dmul>
 80067ee:	460b      	mov	r3, r1
 80067f0:	4602      	mov	r2, r0
 80067f2:	4629      	mov	r1, r5
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7f9 fcfb 	bl	80001f0 <__aeabi_dsub>
 80067fa:	f7fa f94b 	bl	8000a94 <__aeabi_d2iz>
 80067fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8006800:	f10b 0b18 	add.w	fp, fp, #24
 8006804:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006808:	f108 0801 	add.w	r8, r8, #1
 800680c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006810:	e722      	b.n	8006658 <__kernel_rem_pio2+0x2a8>
 8006812:	4620      	mov	r0, r4
 8006814:	4629      	mov	r1, r5
 8006816:	f7fa f93d 	bl	8000a94 <__aeabi_d2iz>
 800681a:	ab0c      	add	r3, sp, #48	@ 0x30
 800681c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006820:	e71a      	b.n	8006658 <__kernel_rem_pio2+0x2a8>
 8006822:	ab0c      	add	r3, sp, #48	@ 0x30
 8006824:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006828:	f7f9 fe30 	bl	800048c <__aeabi_i2d>
 800682c:	4622      	mov	r2, r4
 800682e:	462b      	mov	r3, r5
 8006830:	f7f9 fe96 	bl	8000560 <__aeabi_dmul>
 8006834:	4652      	mov	r2, sl
 8006836:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800683a:	465b      	mov	r3, fp
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f7f9 fe8e 	bl	8000560 <__aeabi_dmul>
 8006844:	3e01      	subs	r6, #1
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
 800684a:	e718      	b.n	800667e <__kernel_rem_pio2+0x2ce>
 800684c:	9906      	ldr	r1, [sp, #24]
 800684e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006852:	9106      	str	r1, [sp, #24]
 8006854:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006858:	f7f9 fe82 	bl	8000560 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4650      	mov	r0, sl
 8006862:	4659      	mov	r1, fp
 8006864:	f7f9 fcc6 	bl	80001f4 <__adddf3>
 8006868:	3601      	adds	r6, #1
 800686a:	4682      	mov	sl, r0
 800686c:	468b      	mov	fp, r1
 800686e:	9b00      	ldr	r3, [sp, #0]
 8006870:	429e      	cmp	r6, r3
 8006872:	dc01      	bgt.n	8006878 <__kernel_rem_pio2+0x4c8>
 8006874:	42b5      	cmp	r5, r6
 8006876:	dae9      	bge.n	800684c <__kernel_rem_pio2+0x49c>
 8006878:	ab48      	add	r3, sp, #288	@ 0x120
 800687a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800687e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006882:	3c01      	subs	r4, #1
 8006884:	e6ff      	b.n	8006686 <__kernel_rem_pio2+0x2d6>
 8006886:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006888:	2b02      	cmp	r3, #2
 800688a:	dc0b      	bgt.n	80068a4 <__kernel_rem_pio2+0x4f4>
 800688c:	2b00      	cmp	r3, #0
 800688e:	dc39      	bgt.n	8006904 <__kernel_rem_pio2+0x554>
 8006890:	d05d      	beq.n	800694e <__kernel_rem_pio2+0x59e>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	f003 0007 	and.w	r0, r3, #7
 8006898:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800689c:	ecbd 8b02 	vpop	{d8}
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d1f3      	bne.n	8006892 <__kernel_rem_pio2+0x4e2>
 80068aa:	9b05      	ldr	r3, [sp, #20]
 80068ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068b0:	eb0d 0403 	add.w	r4, sp, r3
 80068b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80068b8:	4625      	mov	r5, r4
 80068ba:	46c2      	mov	sl, r8
 80068bc:	f1ba 0f00 	cmp.w	sl, #0
 80068c0:	f1a5 0508 	sub.w	r5, r5, #8
 80068c4:	dc6b      	bgt.n	800699e <__kernel_rem_pio2+0x5ee>
 80068c6:	4645      	mov	r5, r8
 80068c8:	2d01      	cmp	r5, #1
 80068ca:	f1a4 0408 	sub.w	r4, r4, #8
 80068ce:	f300 8087 	bgt.w	80069e0 <__kernel_rem_pio2+0x630>
 80068d2:	9c05      	ldr	r4, [sp, #20]
 80068d4:	ab48      	add	r3, sp, #288	@ 0x120
 80068d6:	441c      	add	r4, r3
 80068d8:	2000      	movs	r0, #0
 80068da:	2100      	movs	r1, #0
 80068dc:	f1b8 0f01 	cmp.w	r8, #1
 80068e0:	f300 809c 	bgt.w	8006a1c <__kernel_rem_pio2+0x66c>
 80068e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80068e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80068ec:	f1b9 0f00 	cmp.w	r9, #0
 80068f0:	f040 80a6 	bne.w	8006a40 <__kernel_rem_pio2+0x690>
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	e9c3 7800 	strd	r7, r8, [r3]
 80068fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80068fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006902:	e7c6      	b.n	8006892 <__kernel_rem_pio2+0x4e2>
 8006904:	9d05      	ldr	r5, [sp, #20]
 8006906:	ab48      	add	r3, sp, #288	@ 0x120
 8006908:	441d      	add	r5, r3
 800690a:	4644      	mov	r4, r8
 800690c:	2000      	movs	r0, #0
 800690e:	2100      	movs	r1, #0
 8006910:	2c00      	cmp	r4, #0
 8006912:	da35      	bge.n	8006980 <__kernel_rem_pio2+0x5d0>
 8006914:	f1b9 0f00 	cmp.w	r9, #0
 8006918:	d038      	beq.n	800698c <__kernel_rem_pio2+0x5dc>
 800691a:	4602      	mov	r2, r0
 800691c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006920:	9c04      	ldr	r4, [sp, #16]
 8006922:	e9c4 2300 	strd	r2, r3, [r4]
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800692e:	f7f9 fc5f 	bl	80001f0 <__aeabi_dsub>
 8006932:	ad4a      	add	r5, sp, #296	@ 0x128
 8006934:	2401      	movs	r4, #1
 8006936:	45a0      	cmp	r8, r4
 8006938:	da2b      	bge.n	8006992 <__kernel_rem_pio2+0x5e2>
 800693a:	f1b9 0f00 	cmp.w	r9, #0
 800693e:	d002      	beq.n	8006946 <__kernel_rem_pio2+0x596>
 8006940:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006944:	4619      	mov	r1, r3
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800694c:	e7a1      	b.n	8006892 <__kernel_rem_pio2+0x4e2>
 800694e:	9c05      	ldr	r4, [sp, #20]
 8006950:	ab48      	add	r3, sp, #288	@ 0x120
 8006952:	441c      	add	r4, r3
 8006954:	2000      	movs	r0, #0
 8006956:	2100      	movs	r1, #0
 8006958:	f1b8 0f00 	cmp.w	r8, #0
 800695c:	da09      	bge.n	8006972 <__kernel_rem_pio2+0x5c2>
 800695e:	f1b9 0f00 	cmp.w	r9, #0
 8006962:	d002      	beq.n	800696a <__kernel_rem_pio2+0x5ba>
 8006964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006968:	4619      	mov	r1, r3
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	e9c3 0100 	strd	r0, r1, [r3]
 8006970:	e78f      	b.n	8006892 <__kernel_rem_pio2+0x4e2>
 8006972:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006976:	f7f9 fc3d 	bl	80001f4 <__adddf3>
 800697a:	f108 38ff 	add.w	r8, r8, #4294967295
 800697e:	e7eb      	b.n	8006958 <__kernel_rem_pio2+0x5a8>
 8006980:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006984:	f7f9 fc36 	bl	80001f4 <__adddf3>
 8006988:	3c01      	subs	r4, #1
 800698a:	e7c1      	b.n	8006910 <__kernel_rem_pio2+0x560>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e7c6      	b.n	8006920 <__kernel_rem_pio2+0x570>
 8006992:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006996:	f7f9 fc2d 	bl	80001f4 <__adddf3>
 800699a:	3401      	adds	r4, #1
 800699c:	e7cb      	b.n	8006936 <__kernel_rem_pio2+0x586>
 800699e:	ed95 7b00 	vldr	d7, [r5]
 80069a2:	ed8d 7b00 	vstr	d7, [sp]
 80069a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80069aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ae:	ec53 2b17 	vmov	r2, r3, d7
 80069b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069b6:	f7f9 fc1d 	bl	80001f4 <__adddf3>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4606      	mov	r6, r0
 80069c0:	460f      	mov	r7, r1
 80069c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069c6:	f7f9 fc13 	bl	80001f0 <__aeabi_dsub>
 80069ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069ce:	f7f9 fc11 	bl	80001f4 <__adddf3>
 80069d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80069da:	e9c5 6700 	strd	r6, r7, [r5]
 80069de:	e76d      	b.n	80068bc <__kernel_rem_pio2+0x50c>
 80069e0:	ed94 7b00 	vldr	d7, [r4]
 80069e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80069e8:	ec51 0b17 	vmov	r0, r1, d7
 80069ec:	4652      	mov	r2, sl
 80069ee:	465b      	mov	r3, fp
 80069f0:	ed8d 7b00 	vstr	d7, [sp]
 80069f4:	f7f9 fbfe 	bl	80001f4 <__adddf3>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4606      	mov	r6, r0
 80069fe:	460f      	mov	r7, r1
 8006a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a04:	f7f9 fbf4 	bl	80001f0 <__aeabi_dsub>
 8006a08:	4652      	mov	r2, sl
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	f7f9 fbf2 	bl	80001f4 <__adddf3>
 8006a10:	3d01      	subs	r5, #1
 8006a12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a16:	e9c4 6700 	strd	r6, r7, [r4]
 8006a1a:	e755      	b.n	80068c8 <__kernel_rem_pio2+0x518>
 8006a1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a20:	f7f9 fbe8 	bl	80001f4 <__adddf3>
 8006a24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a28:	e758      	b.n	80068dc <__kernel_rem_pio2+0x52c>
 8006a2a:	bf00      	nop
 8006a2c:	f3af 8000 	nop.w
	...
 8006a38:	41700000 	.word	0x41700000
 8006a3c:	3e700000 	.word	0x3e700000
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	9a04      	ldr	r2, [sp, #16]
 8006a44:	601f      	str	r7, [r3, #0]
 8006a46:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006a4a:	605c      	str	r4, [r3, #4]
 8006a4c:	609d      	str	r5, [r3, #8]
 8006a4e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a52:	60d3      	str	r3, [r2, #12]
 8006a54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a58:	6110      	str	r0, [r2, #16]
 8006a5a:	6153      	str	r3, [r2, #20]
 8006a5c:	e719      	b.n	8006892 <__kernel_rem_pio2+0x4e2>
 8006a5e:	bf00      	nop

08006a60 <scalbn>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	ec55 4b10 	vmov	r4, r5, d0
 8006a66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	b991      	cbnz	r1, 8006a96 <scalbn+0x36>
 8006a70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006a74:	4323      	orrs	r3, r4
 8006a76:	d03d      	beq.n	8006af4 <scalbn+0x94>
 8006a78:	4b35      	ldr	r3, [pc, #212]	@ (8006b50 <scalbn+0xf0>)
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f7f9 fd6e 	bl	8000560 <__aeabi_dmul>
 8006a84:	4b33      	ldr	r3, [pc, #204]	@ (8006b54 <scalbn+0xf4>)
 8006a86:	429e      	cmp	r6, r3
 8006a88:	4604      	mov	r4, r0
 8006a8a:	460d      	mov	r5, r1
 8006a8c:	da0f      	bge.n	8006aae <scalbn+0x4e>
 8006a8e:	a328      	add	r3, pc, #160	@ (adr r3, 8006b30 <scalbn+0xd0>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	e01e      	b.n	8006ad4 <scalbn+0x74>
 8006a96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	d10b      	bne.n	8006ab6 <scalbn+0x56>
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7f9 fba6 	bl	80001f4 <__adddf3>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	e022      	b.n	8006af4 <scalbn+0x94>
 8006aae:	460b      	mov	r3, r1
 8006ab0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006ab4:	3936      	subs	r1, #54	@ 0x36
 8006ab6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006aba:	4296      	cmp	r6, r2
 8006abc:	dd0d      	ble.n	8006ada <scalbn+0x7a>
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006b38 <scalbn+0xd8>)
 8006ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac6:	da02      	bge.n	8006ace <scalbn+0x6e>
 8006ac8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006b40 <scalbn+0xe0>)
 8006aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ace:	a31a      	add	r3, pc, #104	@ (adr r3, 8006b38 <scalbn+0xd8>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fd44 	bl	8000560 <__aeabi_dmul>
 8006ad8:	e7e6      	b.n	8006aa8 <scalbn+0x48>
 8006ada:	1872      	adds	r2, r6, r1
 8006adc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006ae0:	428a      	cmp	r2, r1
 8006ae2:	dcec      	bgt.n	8006abe <scalbn+0x5e>
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	dd08      	ble.n	8006afa <scalbn+0x9a>
 8006ae8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006aec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006af0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006af4:	ec45 4b10 	vmov	d0, r4, r5
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
 8006afa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006afe:	da08      	bge.n	8006b12 <scalbn+0xb2>
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	a10b      	add	r1, pc, #44	@ (adr r1, 8006b30 <scalbn+0xd0>)
 8006b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b08:	dac1      	bge.n	8006a8e <scalbn+0x2e>
 8006b0a:	a10f      	add	r1, pc, #60	@ (adr r1, 8006b48 <scalbn+0xe8>)
 8006b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b10:	e7bd      	b.n	8006a8e <scalbn+0x2e>
 8006b12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006b16:	3236      	adds	r2, #54	@ 0x36
 8006b18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006b1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b20:	4620      	mov	r0, r4
 8006b22:	4b0d      	ldr	r3, [pc, #52]	@ (8006b58 <scalbn+0xf8>)
 8006b24:	4629      	mov	r1, r5
 8006b26:	2200      	movs	r2, #0
 8006b28:	e7d4      	b.n	8006ad4 <scalbn+0x74>
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w
 8006b30:	c2f8f359 	.word	0xc2f8f359
 8006b34:	01a56e1f 	.word	0x01a56e1f
 8006b38:	8800759c 	.word	0x8800759c
 8006b3c:	7e37e43c 	.word	0x7e37e43c
 8006b40:	8800759c 	.word	0x8800759c
 8006b44:	fe37e43c 	.word	0xfe37e43c
 8006b48:	c2f8f359 	.word	0xc2f8f359
 8006b4c:	81a56e1f 	.word	0x81a56e1f
 8006b50:	43500000 	.word	0x43500000
 8006b54:	ffff3cb0 	.word	0xffff3cb0
 8006b58:	3c900000 	.word	0x3c900000
 8006b5c:	00000000 	.word	0x00000000

08006b60 <floor>:
 8006b60:	ec51 0b10 	vmov	r0, r1, d0
 8006b64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006b70:	2e13      	cmp	r6, #19
 8006b72:	460c      	mov	r4, r1
 8006b74:	4605      	mov	r5, r0
 8006b76:	4680      	mov	r8, r0
 8006b78:	dc34      	bgt.n	8006be4 <floor+0x84>
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	da17      	bge.n	8006bae <floor+0x4e>
 8006b7e:	a332      	add	r3, pc, #200	@ (adr r3, 8006c48 <floor+0xe8>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fb36 	bl	80001f4 <__adddf3>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f7f9 ff78 	bl	8000a80 <__aeabi_dcmpgt>
 8006b90:	b150      	cbz	r0, 8006ba8 <floor+0x48>
 8006b92:	2c00      	cmp	r4, #0
 8006b94:	da55      	bge.n	8006c42 <floor+0xe2>
 8006b96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006b9a:	432c      	orrs	r4, r5
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	42ac      	cmp	r4, r5
 8006ba0:	4c2b      	ldr	r4, [pc, #172]	@ (8006c50 <floor+0xf0>)
 8006ba2:	bf08      	it	eq
 8006ba4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	e023      	b.n	8006bf6 <floor+0x96>
 8006bae:	4f29      	ldr	r7, [pc, #164]	@ (8006c54 <floor+0xf4>)
 8006bb0:	4137      	asrs	r7, r6
 8006bb2:	ea01 0307 	and.w	r3, r1, r7
 8006bb6:	4303      	orrs	r3, r0
 8006bb8:	d01d      	beq.n	8006bf6 <floor+0x96>
 8006bba:	a323      	add	r3, pc, #140	@ (adr r3, 8006c48 <floor+0xe8>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fb18 	bl	80001f4 <__adddf3>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f7f9 ff5a 	bl	8000a80 <__aeabi_dcmpgt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d0eb      	beq.n	8006ba8 <floor+0x48>
 8006bd0:	2c00      	cmp	r4, #0
 8006bd2:	bfbe      	ittt	lt
 8006bd4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006bd8:	4133      	asrlt	r3, r6
 8006bda:	18e4      	addlt	r4, r4, r3
 8006bdc:	ea24 0407 	bic.w	r4, r4, r7
 8006be0:	2500      	movs	r5, #0
 8006be2:	e7e1      	b.n	8006ba8 <floor+0x48>
 8006be4:	2e33      	cmp	r6, #51	@ 0x33
 8006be6:	dd0a      	ble.n	8006bfe <floor+0x9e>
 8006be8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006bec:	d103      	bne.n	8006bf6 <floor+0x96>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	f7f9 faff 	bl	80001f4 <__adddf3>
 8006bf6:	ec41 0b10 	vmov	d0, r0, r1
 8006bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006c02:	f04f 37ff 	mov.w	r7, #4294967295
 8006c06:	40df      	lsrs	r7, r3
 8006c08:	4207      	tst	r7, r0
 8006c0a:	d0f4      	beq.n	8006bf6 <floor+0x96>
 8006c0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c48 <floor+0xe8>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 faef 	bl	80001f4 <__adddf3>
 8006c16:	2200      	movs	r2, #0
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f7f9 ff31 	bl	8000a80 <__aeabi_dcmpgt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d0c2      	beq.n	8006ba8 <floor+0x48>
 8006c22:	2c00      	cmp	r4, #0
 8006c24:	da0a      	bge.n	8006c3c <floor+0xdc>
 8006c26:	2e14      	cmp	r6, #20
 8006c28:	d101      	bne.n	8006c2e <floor+0xce>
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	e006      	b.n	8006c3c <floor+0xdc>
 8006c2e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006c32:	2301      	movs	r3, #1
 8006c34:	40b3      	lsls	r3, r6
 8006c36:	441d      	add	r5, r3
 8006c38:	4545      	cmp	r5, r8
 8006c3a:	d3f6      	bcc.n	8006c2a <floor+0xca>
 8006c3c:	ea25 0507 	bic.w	r5, r5, r7
 8006c40:	e7b2      	b.n	8006ba8 <floor+0x48>
 8006c42:	2500      	movs	r5, #0
 8006c44:	462c      	mov	r4, r5
 8006c46:	e7af      	b.n	8006ba8 <floor+0x48>
 8006c48:	8800759c 	.word	0x8800759c
 8006c4c:	7e37e43c 	.word	0x7e37e43c
 8006c50:	bff00000 	.word	0xbff00000
 8006c54:	000fffff 	.word	0x000fffff

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
